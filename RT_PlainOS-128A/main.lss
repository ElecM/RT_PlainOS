
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004e8  00800100  00003b34  00003bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a7c  008005e8  008005e8  000040b0  2**0
                  ALLOC
  3 .stab         0000048c  00000000  00000000  000040b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000044  00000000  00000000  0000453c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000674  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002df6  00000000  00000000  00004d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bd1  00000000  00000000  00007b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002100  00000000  00000000  000086fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000610  00000000  00000000  0000a7fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000df3  00000000  00000000  0000ae0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	15 e0       	ldi	r17, 0x05	; 5
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e3       	ldi	r30, 0x34	; 52
      a0:	fb e3       	ldi	r31, 0x3B	; 59
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3e       	cpi	r26, 0xE8	; 232
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	10 e1       	ldi	r17, 0x10	; 16
      b4:	a8 ee       	ldi	r26, 0xE8	; 232
      b6:	b5 e0       	ldi	r27, 0x05	; 5
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 36       	cpi	r26, 0x64	; 100
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
      c6:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <delay>:

oled128x64 OLED;

//给空闲任务延时用，因为空闲任务中不能使用RTS_DelayTicks函数
void delay(u16_t t)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	00 d0       	rcall	.+0      	; 0xd4 <delay+0x6>
      d4:	00 d0       	rcall	.+0      	; 0xd6 <delay+0x8>
      d6:	0f 92       	push	r0
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9c 83       	std	Y+4, r25	; 0x04
      de:	8b 83       	std	Y+3, r24	; 0x03
      e0:	0e c0       	rjmp	.+28     	; 0xfe <delay+0x30>
    volatile unsigned int i;
    while(t--)
    {
        for(i=0;i<6000;i++)
      e2:	1a 82       	std	Y+2, r1	; 0x02
      e4:	19 82       	std	Y+1, r1	; 0x01
      e6:	05 c0       	rjmp	.+10     	; 0xf2 <delay+0x24>
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	9a 81       	ldd	r25, Y+2	; 0x02
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	9a 83       	std	Y+2, r25	; 0x02
      f0:	89 83       	std	Y+1, r24	; 0x01
      f2:	89 81       	ldd	r24, Y+1	; 0x01
      f4:	9a 81       	ldd	r25, Y+2	; 0x02
      f6:	27 e1       	ldi	r18, 0x17	; 23
      f8:	80 37       	cpi	r24, 0x70	; 112
      fa:	92 07       	cpc	r25, r18
      fc:	a8 f3       	brcs	.-22     	; 0xe8 <delay+0x1a>

//给空闲任务延时用，因为空闲任务中不能使用RTS_DelayTicks函数
void delay(u16_t t)
{
    volatile unsigned int i;
    while(t--)
      fe:	1d 82       	std	Y+5, r1	; 0x05
     100:	8b 81       	ldd	r24, Y+3	; 0x03
     102:	9c 81       	ldd	r25, Y+4	; 0x04
     104:	00 97       	sbiw	r24, 0x00	; 0
     106:	11 f0       	breq	.+4      	; 0x10c <delay+0x3e>
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	8d 83       	std	Y+5, r24	; 0x05
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	01 97       	sbiw	r24, 0x01	; 1
     112:	9c 83       	std	Y+4, r25	; 0x04
     114:	8b 83       	std	Y+3, r24	; 0x03
     116:	2d 81       	ldd	r18, Y+5	; 0x05
     118:	22 23       	and	r18, r18
     11a:	19 f7       	brne	.-58     	; 0xe2 <delay+0x14>
    {
        for(i=0;i<6000;i++)
            ;
    }
}
     11c:	0f 90       	pop	r0
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	cf 91       	pop	r28
     128:	df 91       	pop	r29
     12a:	08 95       	ret

0000012c <task1>:
u8_t stack1[128];
u8_t stack2[128];
u8_t stack3[128];

void task1(void *data)
{
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	df 93       	push	r29
     132:	cf 93       	push	r28
     134:	00 d0       	rcall	.+0      	; 0x136 <task1+0xa>
     136:	0f 92       	push	r0
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	9b 83       	std	Y+3, r25	; 0x03
     13e:	8a 83       	std	Y+2, r24	; 0x02
    data = data;
    u8_t rev;
    while (1)
    {
        USART1.send_str(&USART1,"  curr_task_tid:");
     140:	e0 91 18 01 	lds	r30, 0x0118
     144:	f0 91 19 01 	lds	r31, 0x0119
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	22 e2       	ldi	r18, 0x22	; 34
     14e:	31 e0       	ldi	r19, 0x01	; 1
     150:	b9 01       	movw	r22, r18
     152:	09 95       	icall
        USART1.disp_unsigned_integer(&USART1,RTS_GetCurrTaskTid());
     154:	00 91 20 01 	lds	r16, 0x0120
     158:	10 91 21 01 	lds	r17, 0x0121
     15c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <RTS_GetCurrTaskTid>
     160:	28 2f       	mov	r18, r24
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	ba 01       	movw	r22, r20
     16e:	a9 01       	movw	r20, r18
     170:	f8 01       	movw	r30, r16
     172:	09 95       	icall
        rev = USART1.receive_data(&USART1);
     174:	e0 91 1a 01 	lds	r30, 0x011A
     178:	f0 91 1b 01 	lds	r31, 0x011B
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	09 95       	icall
     182:	89 83       	std	Y+1, r24	; 0x01
        if(rev == 'H')
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	88 34       	cpi	r24, 0x48	; 72
     188:	21 f4       	brne	.+8      	; 0x192 <task1+0x66>
        {
            RTS_PendTask(3);
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	0e 94 99 0c 	call	0x1932	; 0x1932 <RTS_PendTask>
     190:	1d c0       	rjmp	.+58     	; 0x1cc <task1+0xa0>
        }
        else if(rev == 'A')
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	81 34       	cpi	r24, 0x41	; 65
     196:	21 f4       	brne	.+8      	; 0x1a0 <task1+0x74>
        {
            RTS_PendTask(1);
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 99 0c 	call	0x1932	; 0x1932 <RTS_PendTask>
     19e:	16 c0       	rjmp	.+44     	; 0x1cc <task1+0xa0>
        }
        else if(rev == 'B')
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	82 34       	cpi	r24, 0x42	; 66
     1a4:	21 f4       	brne	.+8      	; 0x1ae <task1+0x82>
        {
            RTS_ResumeTask(3);
     1a6:	83 e0       	ldi	r24, 0x03	; 3
     1a8:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <RTS_ResumeTask>
     1ac:	0f c0       	rjmp	.+30     	; 0x1cc <task1+0xa0>
        }
        else if(rev == 'C')
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	83 34       	cpi	r24, 0x43	; 67
     1b2:	29 f4       	brne	.+10     	; 0x1be <task1+0x92>
        {
            RTS_ChangeTaskPrio(3,1);
     1b4:	83 e0       	ldi	r24, 0x03	; 3
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <RTS_ChangeTaskPrio>
     1bc:	07 c0       	rjmp	.+14     	; 0x1cc <task1+0xa0>
        }
        else if(rev == 'D')
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	84 34       	cpi	r24, 0x44	; 68
     1c2:	21 f4       	brne	.+8      	; 0x1cc <task1+0xa0>
        {
            RTS_ChangeTaskPrio(3,5);
     1c4:	83 e0       	ldi	r24, 0x03	; 3
     1c6:	65 e0       	ldi	r22, 0x05	; 5
     1c8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <RTS_ChangeTaskPrio>
        }
        RTS_DelayTicks(10);
     1cc:	6a e0       	ldi	r22, 0x0A	; 10
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <RTS_DelayTicks>
     1d8:	b3 cf       	rjmp	.-154    	; 0x140 <task1+0x14>

000001da <task2>:

semaphore_t *semaphore;


void task2(void *data)
{
     1da:	df 93       	push	r29
     1dc:	cf 93       	push	r28
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <task2+0x6>
     1e0:	00 d0       	rcall	.+0      	; 0x1e2 <task2+0x8>
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <task2+0xa>
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	9e 83       	std	Y+6, r25	; 0x06
     1ea:	8d 83       	std	Y+5, r24	; 0x05
    data = data;
    u32_t cr;
    while (1)
    {
        RTS_WaitSemaphore(semaphore);
     1ec:	80 91 40 07 	lds	r24, 0x0740
     1f0:	90 91 41 07 	lds	r25, 0x0741
     1f4:	0e 94 bc 10 	call	0x2178	; 0x2178 <RTS_WaitSemaphore>
        USART1.send_str(&USART1,"task 2 is running ");
     1f8:	e0 91 18 01 	lds	r30, 0x0118
     1fc:	f0 91 19 01 	lds	r31, 0x0119
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	23 e3       	ldi	r18, 0x33	; 51
     206:	31 e0       	ldi	r19, 0x01	; 1
     208:	b9 01       	movw	r22, r18
     20a:	09 95       	icall
        OLED.disp_str6x8(&OLED,0,0,"task 2       ");
     20c:	e0 91 56 0b 	lds	r30, 0x0B56
     210:	f0 91 57 0b 	lds	r31, 0x0B57
     214:	82 e4       	ldi	r24, 0x42	; 66
     216:	97 e0       	ldi	r25, 0x07	; 7
     218:	26 e4       	ldi	r18, 0x46	; 70
     21a:	31 e0       	ldi	r19, 0x01	; 1
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	09 95       	icall
        OLED.refresh_screen(&OLED);
     222:	e0 91 52 0b 	lds	r30, 0x0B52
     226:	f0 91 53 0b 	lds	r31, 0x0B53
     22a:	82 e4       	ldi	r24, 0x42	; 66
     22c:	97 e0       	ldi	r25, 0x07	; 7
     22e:	09 95       	icall
        RTS_PostSemaphore(semaphore);
     230:	80 91 40 07 	lds	r24, 0x0740
     234:	90 91 41 07 	lds	r25, 0x0741
     238:	0e 94 05 11 	call	0x220a	; 0x220a <RTS_PostSemaphore>
        RTS_DelayTicks(2);
     23c:	62 e0       	ldi	r22, 0x02	; 2
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <RTS_DelayTicks>
     248:	d1 cf       	rjmp	.-94     	; 0x1ec <task2+0x12>

0000024a <task3>:
    } 
}

void task3(void *data)
{
     24a:	df 93       	push	r29
     24c:	cf 93       	push	r28
     24e:	00 d0       	rcall	.+0      	; 0x250 <task3+0x6>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	9a 83       	std	Y+2, r25	; 0x02
     256:	89 83       	std	Y+1, r24	; 0x01
    data = data;
    while (1)
    {
       RTS_WaitSemaphore(semaphore);
     258:	80 91 40 07 	lds	r24, 0x0740
     25c:	90 91 41 07 	lds	r25, 0x0741
     260:	0e 94 bc 10 	call	0x2178	; 0x2178 <RTS_WaitSemaphore>
       USART1.send_str(&USART1,"task3 is running  ");
     264:	e0 91 18 01 	lds	r30, 0x0118
     268:	f0 91 19 01 	lds	r31, 0x0119
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	24 e5       	ldi	r18, 0x54	; 84
     272:	31 e0       	ldi	r19, 0x01	; 1
     274:	b9 01       	movw	r22, r18
     276:	09 95       	icall
       OLED.disp_str6x8(&OLED,0,0,"task 3 is running");
     278:	e0 91 56 0b 	lds	r30, 0x0B56
     27c:	f0 91 57 0b 	lds	r31, 0x0B57
     280:	82 e4       	ldi	r24, 0x42	; 66
     282:	97 e0       	ldi	r25, 0x07	; 7
     284:	27 e6       	ldi	r18, 0x67	; 103
     286:	31 e0       	ldi	r19, 0x01	; 1
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	09 95       	icall
       OLED.refresh_screen(&OLED);
     28e:	e0 91 52 0b 	lds	r30, 0x0B52
     292:	f0 91 53 0b 	lds	r31, 0x0B53
     296:	82 e4       	ldi	r24, 0x42	; 66
     298:	97 e0       	ldi	r25, 0x07	; 7
     29a:	09 95       	icall
       RTS_PostSemaphore(semaphore);
     29c:	80 91 40 07 	lds	r24, 0x0740
     2a0:	90 91 41 07 	lds	r25, 0x0741
     2a4:	0e 94 05 11 	call	0x220a	; 0x220a <RTS_PostSemaphore>
       RTS_DelayTicks(20);
     2a8:	64 e1       	ldi	r22, 0x14	; 20
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <RTS_DelayTicks>
     2b4:	d1 cf       	rjmp	.-94     	; 0x258 <task3+0xe>

000002b6 <idle_hook>:
    }
}

//空闲任务里面不能使用RTS_DelayTicks()系统延时函数
void idle_hook(void *data)
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <idle_hook+0x6>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	9a 83       	std	Y+2, r25	; 0x02
     2c2:	89 83       	std	Y+1, r24	; 0x01
    USART1.send_str(&USART1,"IDLE\r\n");
     2c4:	e0 91 18 01 	lds	r30, 0x0118
     2c8:	f0 91 19 01 	lds	r31, 0x0119
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	29 e7       	ldi	r18, 0x79	; 121
     2d2:	31 e0       	ldi	r19, 0x01	; 1
     2d4:	b9 01       	movw	r22, r18
     2d6:	09 95       	icall
    delay(100);
     2d8:	84 e6       	ldi	r24, 0x64	; 100
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 67 00 	call	0xce	; 0xce <delay>
}
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	cf 91       	pop	r28
     2e6:	df 91       	pop	r29
     2e8:	08 95       	ret

000002ea <main>:


int main(void)
{
     2ea:	df 93       	push	r29
     2ec:	cf 93       	push	r28
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <main+0x6>
     2f0:	0f 92       	push	r0
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
    // Insert code
    s8_t rev;
    usart_init(&USART1);
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 a0 13 	call	0x2740	; 0x2740 <usart_init>
    oled128x64_init(&OLED);
     2fe:	82 e4       	ldi	r24, 0x42	; 66
     300:	97 e0       	ldi	r25, 0x07	; 7
     302:	0e 94 19 1b 	call	0x3632	; 0x3632 <oled128x64_init>
    OLED.refresh_screen(&OLED);
     306:	e0 91 52 0b 	lds	r30, 0x0B52
     30a:	f0 91 53 0b 	lds	r31, 0x0B53
     30e:	82 e4       	ldi	r24, 0x42	; 66
     310:	97 e0       	ldi	r25, 0x07	; 7
     312:	09 95       	icall
  
    DDRC |= 0XFF;
     314:	e4 e3       	ldi	r30, 0x34	; 52
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	e4 e3       	ldi	r30, 0x34	; 52
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	8f ef       	ldi	r24, 0xFF	; 255
     320:	80 83       	st	Z, r24
    PORTC = 0XFF;
     322:	e5 e3       	ldi	r30, 0x35	; 53
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	8f ef       	ldi	r24, 0xFF	; 255
     328:	80 83       	st	Z, r24
    DDRG |= 0XFF;
     32a:	e4 e6       	ldi	r30, 0x64	; 100
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	e4 e6       	ldi	r30, 0x64	; 100
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	80 83       	st	Z, r24
    PORTG |= (u8_t)(1<<4);
     338:	a5 e6       	ldi	r26, 0x65	; 101
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e5 e6       	ldi	r30, 0x65	; 101
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	80 61       	ori	r24, 0x10	; 16
     344:	8c 93       	st	X, r24

    RTS_OS_Init(idle_hook);
     346:	8b e5       	ldi	r24, 0x5B	; 91
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <RTS_OS_Init>
    RTS_CreateTask(task1,stack1,128,1);
     34e:	86 e9       	ldi	r24, 0x96	; 150
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	20 ec       	ldi	r18, 0xC0	; 192
     354:	36 e0       	ldi	r19, 0x06	; 6
     356:	b9 01       	movw	r22, r18
     358:	40 e8       	ldi	r20, 0x80	; 128
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	0e 94 3a 0c 	call	0x1874	; 0x1874 <RTS_CreateTask>
    RTS_CreateTask(task2,stack2,128,3);
     362:	8d ee       	ldi	r24, 0xED	; 237
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c e5       	ldi	r18, 0x5C	; 92
     368:	3b e0       	ldi	r19, 0x0B	; 11
     36a:	b9 01       	movw	r22, r18
     36c:	40 e8       	ldi	r20, 0x80	; 128
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	23 e0       	ldi	r18, 0x03	; 3
     372:	0e 94 3a 0c 	call	0x1874	; 0x1874 <RTS_CreateTask>
    RTS_CreateTask(task3,stack3,128,3);
     376:	85 e2       	ldi	r24, 0x25	; 37
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	2c ed       	ldi	r18, 0xDC	; 220
     37c:	3b e0       	ldi	r19, 0x0B	; 11
     37e:	b9 01       	movw	r22, r18
     380:	40 e8       	ldi	r20, 0x80	; 128
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	23 e0       	ldi	r18, 0x03	; 3
     386:	0e 94 3a 0c 	call	0x1874	; 0x1874 <RTS_CreateTask>
    semaphore = RTS_CreateSemaphore(1);
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 27 10 	call	0x204e	; 0x204e <RTS_CreateSemaphore>
     392:	90 93 41 07 	sts	0x0741, r25
     396:	80 93 40 07 	sts	0x0740, r24
    while (1)
    {
        rev = USART1.receive_data(&USART1);
     39a:	e0 91 1a 01 	lds	r30, 0x011A
     39e:	f0 91 1b 01 	lds	r31, 0x011B
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	09 95       	icall
     3a8:	89 83       	std	Y+1, r24	; 0x01
        if(rev == 'S')
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	83 35       	cpi	r24, 0x53	; 83
     3ae:	69 f4       	brne	.+26     	; 0x3ca <main+0xe0>
        {
            USART1.send_str(&USART1,"RTS_OS Started!");
     3b0:	e0 91 18 01 	lds	r30, 0x0118
     3b4:	f0 91 19 01 	lds	r31, 0x0119
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	20 e8       	ldi	r18, 0x80	; 128
     3be:	31 e0       	ldi	r19, 0x01	; 1
     3c0:	b9 01       	movw	r22, r18
     3c2:	09 95       	icall
            RTS_OS_Start();
     3c4:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <RTS_OS_Start>
     3c8:	e8 cf       	rjmp	.-48     	; 0x39a <main+0xb0>
        }
        else
            USART1.send_str(&USART1,"please input 'S' to satrt RTS OS\r\n");
     3ca:	e0 91 18 01 	lds	r30, 0x0118
     3ce:	f0 91 19 01 	lds	r31, 0x0119
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	20 e9       	ldi	r18, 0x90	; 144
     3d8:	31 e0       	ldi	r19, 0x01	; 1
     3da:	b9 01       	movw	r22, r18
     3dc:	09 95       	icall
     3de:	dd cf       	rjmp	.-70     	; 0x39a <main+0xb0>

000003e0 <MemCleanFragment>:
//定义内存控制块


//内存碎片清理函数
void  MemCleanFragment(void)
{
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <MemCleanFragment+0x6>
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <MemCleanFragment+0x8>
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
    u16_t i;
    mcb *mem_ctr_blk_point;  // mcb mem_ctr_blk_point
    mem_ctr_blk_point = mem_ctr_blk[0].mem_next;
     3ec:	80 91 5c 0c 	lds	r24, 0x0C5C
     3f0:	90 91 5d 0c 	lds	r25, 0x0C5D
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
    #if  MEM_DEBUG >= 1
      MemDebug("cleanning up the memory fragmentation...");
    #endif
    for(i=0;i<mem_ctr_blk[0].mem_blk_num - 1 ;i++)
     3f8:	1c 82       	std	Y+4, r1	; 0x04
     3fa:	1b 82       	std	Y+3, r1	; 0x03
     3fc:	78 c0       	rjmp	.+240    	; 0x4ee <MemCleanFragment+0x10e>
    {
       if((mem_ctr_blk_point->mem_blk_ofs + mem_ctr_blk_point->mem_blk_num) == \
     3fe:	e9 81       	ldd	r30, Y+1	; 0x01
     400:	fa 81       	ldd	r31, Y+2	; 0x02
     402:	24 81       	ldd	r18, Z+4	; 0x04
     404:	35 81       	ldd	r19, Z+5	; 0x05
     406:	e9 81       	ldd	r30, Y+1	; 0x01
     408:	fa 81       	ldd	r31, Y+2	; 0x02
     40a:	86 81       	ldd	r24, Z+6	; 0x06
     40c:	97 81       	ldd	r25, Z+7	; 0x07
     40e:	28 0f       	add	r18, r24
     410:	39 1f       	adc	r19, r25
     412:	e9 81       	ldd	r30, Y+1	; 0x01
     414:	fa 81       	ldd	r31, Y+2	; 0x02
     416:	01 90       	ld	r0, Z+
     418:	f0 81       	ld	r31, Z
     41a:	e0 2d       	mov	r30, r0
     41c:	84 81       	ldd	r24, Z+4	; 0x04
     41e:	95 81       	ldd	r25, Z+5	; 0x05
     420:	28 17       	cp	r18, r24
     422:	39 07       	cpc	r19, r25
     424:	09 f0       	breq	.+2      	; 0x428 <MemCleanFragment+0x48>
     426:	58 c0       	rjmp	.+176    	; 0x4d8 <MemCleanFragment+0xf8>
           mem_ctr_blk_point->mem_next->mem_blk_ofs)
       {
           mem_ctr_blk_point->mem_next->mem_blk_ofs = mem_ctr_blk_point->mem_blk_ofs;
     428:	e9 81       	ldd	r30, Y+1	; 0x01
     42a:	fa 81       	ldd	r31, Y+2	; 0x02
     42c:	a0 81       	ld	r26, Z
     42e:	b1 81       	ldd	r27, Z+1	; 0x01
     430:	e9 81       	ldd	r30, Y+1	; 0x01
     432:	fa 81       	ldd	r31, Y+2	; 0x02
     434:	84 81       	ldd	r24, Z+4	; 0x04
     436:	95 81       	ldd	r25, Z+5	; 0x05
     438:	15 96       	adiw	r26, 0x05	; 5
     43a:	9c 93       	st	X, r25
     43c:	8e 93       	st	-X, r24
     43e:	14 97       	sbiw	r26, 0x04	; 4
           mem_ctr_blk_point->mem_next->mem_blk_num += mem_ctr_blk_point->mem_blk_num;
     440:	e9 81       	ldd	r30, Y+1	; 0x01
     442:	fa 81       	ldd	r31, Y+2	; 0x02
     444:	a0 81       	ld	r26, Z
     446:	b1 81       	ldd	r27, Z+1	; 0x01
     448:	e9 81       	ldd	r30, Y+1	; 0x01
     44a:	fa 81       	ldd	r31, Y+2	; 0x02
     44c:	01 90       	ld	r0, Z+
     44e:	f0 81       	ld	r31, Z
     450:	e0 2d       	mov	r30, r0
     452:	26 81       	ldd	r18, Z+6	; 0x06
     454:	37 81       	ldd	r19, Z+7	; 0x07
     456:	e9 81       	ldd	r30, Y+1	; 0x01
     458:	fa 81       	ldd	r31, Y+2	; 0x02
     45a:	86 81       	ldd	r24, Z+6	; 0x06
     45c:	97 81       	ldd	r25, Z+7	; 0x07
     45e:	82 0f       	add	r24, r18
     460:	93 1f       	adc	r25, r19
     462:	17 96       	adiw	r26, 0x07	; 7
     464:	9c 93       	st	X, r25
     466:	8e 93       	st	-X, r24
     468:	16 97       	sbiw	r26, 0x06	; 6

           //删除该节点，并归还给空闲链表
           mem_ctr_blk_point->mem_prv->mem_next = mem_ctr_blk_point->mem_next;
     46a:	e9 81       	ldd	r30, Y+1	; 0x01
     46c:	fa 81       	ldd	r31, Y+2	; 0x02
     46e:	a2 81       	ldd	r26, Z+2	; 0x02
     470:	b3 81       	ldd	r27, Z+3	; 0x03
     472:	e9 81       	ldd	r30, Y+1	; 0x01
     474:	fa 81       	ldd	r31, Y+2	; 0x02
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	8d 93       	st	X+, r24
     47c:	9c 93       	st	X, r25
           mem_ctr_blk_point->mem_next->mem_prv = mem_ctr_blk_point->mem_prv;
     47e:	e9 81       	ldd	r30, Y+1	; 0x01
     480:	fa 81       	ldd	r31, Y+2	; 0x02
     482:	a0 81       	ld	r26, Z
     484:	b1 81       	ldd	r27, Z+1	; 0x01
     486:	e9 81       	ldd	r30, Y+1	; 0x01
     488:	fa 81       	ldd	r31, Y+2	; 0x02
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	93 81       	ldd	r25, Z+3	; 0x03
     48e:	13 96       	adiw	r26, 0x03	; 3
     490:	9c 93       	st	X, r25
     492:	8e 93       	st	-X, r24
     494:	12 97       	sbiw	r26, 0x02	; 2

           mem_ctr_blk_point->mem_next = mem_ctr_blk[2].mem_next;
     496:	80 91 6c 0c 	lds	r24, 0x0C6C
     49a:	90 91 6d 0c 	lds	r25, 0x0C6D
     49e:	e9 81       	ldd	r30, Y+1	; 0x01
     4a0:	fa 81       	ldd	r31, Y+2	; 0x02
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	80 83       	st	Z, r24
           mem_ctr_blk[2].mem_next    = mem_ctr_blk_point;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	90 93 6d 0c 	sts	0x0C6D, r25
     4ae:	80 93 6c 0c 	sts	0x0C6C, r24
           mem_ctr_blk[2].mem_blk_num ++ ;
     4b2:	80 91 72 0c 	lds	r24, 0x0C72
     4b6:	90 91 73 0c 	lds	r25, 0x0C73
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	90 93 73 0c 	sts	0x0C73, r25
     4c0:	80 93 72 0c 	sts	0x0C72, r24
           mem_ctr_blk[0].mem_blk_num -- ;
     4c4:	80 91 62 0c 	lds	r24, 0x0C62
     4c8:	90 91 63 0c 	lds	r25, 0x0C63
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	90 93 63 0c 	sts	0x0C63, r25
     4d2:	80 93 62 0c 	sts	0x0C62, r24
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <MemCleanFragment+0x104>
       }
       else
       {
           mem_ctr_blk_point = mem_ctr_blk_point->mem_next;
     4d8:	e9 81       	ldd	r30, Y+1	; 0x01
     4da:	fa 81       	ldd	r31, Y+2	; 0x02
     4dc:	80 81       	ld	r24, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	9a 83       	std	Y+2, r25	; 0x02
     4e2:	89 83       	std	Y+1, r24	; 0x01
    mcb *mem_ctr_blk_point;  // mcb mem_ctr_blk_point
    mem_ctr_blk_point = mem_ctr_blk[0].mem_next;
    #if  MEM_DEBUG >= 1
      MemDebug("cleanning up the memory fragmentation...");
    #endif
    for(i=0;i<mem_ctr_blk[0].mem_blk_num - 1 ;i++)
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	9c 83       	std	Y+4, r25	; 0x04
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	80 91 62 0c 	lds	r24, 0x0C62
     4f2:	90 91 63 0c 	lds	r25, 0x0C63
     4f6:	9c 01       	movw	r18, r24
     4f8:	21 50       	subi	r18, 0x01	; 1
     4fa:	30 40       	sbci	r19, 0x00	; 0
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	9c 81       	ldd	r25, Y+4	; 0x04
     500:	82 17       	cp	r24, r18
     502:	93 07       	cpc	r25, r19
     504:	08 f4       	brcc	.+2      	; 0x508 <MemCleanFragment+0x128>
     506:	7b cf       	rjmp	.-266    	; 0x3fe <MemCleanFragment+0x1e>
       }
    }
     #if  MEM_DEBUG >= 1
      MemDebug("cleanning up the memory fragment completed");
    #endif
}
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	08 95       	ret

00000516 <MemAllocInit>:



//内存管理初始化
void MemAllocInit(void)
{
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	00 d0       	rcall	.+0      	; 0x51c <MemAllocInit+0x6>
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
      MemDebug("memory's allocatation initialization start...");
   #endif

   //内存管理链表初始化，内存管理链表使用双向链表
   //mem_ctr_blk[0]作为管理链表表头
   mem_ctr_blk[0].mem_next = &mem_ctr_blk[1];
     520:	84 e6       	ldi	r24, 0x64	; 100
     522:	9c e0       	ldi	r25, 0x0C	; 12
     524:	90 93 5d 0c 	sts	0x0C5D, r25
     528:	80 93 5c 0c 	sts	0x0C5C, r24
   mem_ctr_blk[0].mem_prv  = &mem_ctr_blk[1];
     52c:	84 e6       	ldi	r24, 0x64	; 100
     52e:	9c e0       	ldi	r25, 0x0C	; 12
     530:	90 93 5f 0c 	sts	0x0C5F, r25
     534:	80 93 5e 0c 	sts	0x0C5E, r24
   mem_ctr_blk[1].mem_next = &mem_ctr_blk[0];
     538:	8c e5       	ldi	r24, 0x5C	; 92
     53a:	9c e0       	ldi	r25, 0x0C	; 12
     53c:	90 93 65 0c 	sts	0x0C65, r25
     540:	80 93 64 0c 	sts	0x0C64, r24
   mem_ctr_blk[1].mem_prv  = &mem_ctr_blk[0];
     544:	8c e5       	ldi	r24, 0x5C	; 92
     546:	9c e0       	ldi	r25, 0x0C	; 12
     548:	90 93 67 0c 	sts	0x0C67, r25
     54c:	80 93 66 0c 	sts	0x0C66, r24

   mem_ctr_blk[0].mem_blk_num  = 1;    //mcb_NUM 表头下面挂载的mcb的个数初始化为1
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	90 93 63 0c 	sts	0x0C63, r25
     558:	80 93 62 0c 	sts	0x0C62, r24
   mem_ctr_blk[0].mem_blk_ofs  = 0;    //UsedBytes;已经使用的总字节数初始化为0
     55c:	10 92 61 0c 	sts	0x0C61, r1
     560:	10 92 60 0c 	sts	0x0C60, r1

   //初始化第一块内存管理块mcb
   mem_ctr_blk[1].mem_blk_ofs = 0;
     564:	10 92 69 0c 	sts	0x0C69, r1
     568:	10 92 68 0c 	sts	0x0C68, r1
   mem_ctr_blk[1].mem_blk_num = MEM_POOL_SIZE/MEM_BLK_SIZE;
     56c:	80 e4       	ldi	r24, 0x40	; 64
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	90 93 6b 0c 	sts	0x0C6B, r25
     574:	80 93 6a 0c 	sts	0x0C6A, r24

   //内存空闲链表初始化，空闲链表使用单向链表
   //mem_ctr_blk[2]作为空闲链表表头
   //空闲链表中表头中空闲块的个数初始化为MEM_mcb_NUM - 3
   mem_ctr_blk[2].mem_blk_num = MEM_MCB_NUM - 3;
     578:	8d e3       	ldi	r24, 0x3D	; 61
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	90 93 73 0c 	sts	0x0C73, r25
     580:	80 93 72 0c 	sts	0x0C72, r24
   for(i=2; i<MEM_MCB_NUM - 1; i++)
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	9a 83       	std	Y+2, r25	; 0x02
     58a:	89 83       	std	Y+1, r24	; 0x01
     58c:	3a c0       	rjmp	.+116    	; 0x602 <MemAllocInit+0xec>
   {
       mem_ctr_blk[i].mem_next = &mem_ctr_blk[i+1];
     58e:	49 81       	ldd	r20, Y+1	; 0x01
     590:	5a 81       	ldd	r21, Y+2	; 0x02
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	9c 01       	movw	r18, r24
     5a6:	24 5a       	subi	r18, 0xA4	; 164
     5a8:	33 4f       	sbci	r19, 0xF3	; 243
     5aa:	ca 01       	movw	r24, r20
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	fc 01       	movw	r30, r24
     5ba:	e4 5a       	subi	r30, 0xA4	; 164
     5bc:	f3 4f       	sbci	r31, 0xF3	; 243
     5be:	31 83       	std	Z+1, r19	; 0x01
     5c0:	20 83       	st	Z, r18
       mem_ctr_blk[i].mem_blk_num = 0;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	fc 01       	movw	r30, r24
     5d4:	ee 59       	subi	r30, 0x9E	; 158
     5d6:	f3 4f       	sbci	r31, 0xF3	; 243
     5d8:	11 82       	std	Z+1, r1	; 0x01
     5da:	10 82       	st	Z, r1
       mem_ctr_blk[i].mem_blk_ofs = 0;
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	9a 81       	ldd	r25, Y+2	; 0x02
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	fc 01       	movw	r30, r24
     5f0:	e4 5a       	subi	r30, 0xA4	; 164
     5f2:	f3 4f       	sbci	r31, 0xF3	; 243
     5f4:	11 82       	std	Z+1, r1	; 0x01
     5f6:	10 82       	st	Z, r1

   //内存空闲链表初始化，空闲链表使用单向链表
   //mem_ctr_blk[2]作为空闲链表表头
   //空闲链表中表头中空闲块的个数初始化为MEM_mcb_NUM - 3
   mem_ctr_blk[2].mem_blk_num = MEM_MCB_NUM - 3;
   for(i=2; i<MEM_MCB_NUM - 1; i++)
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	9a 81       	ldd	r25, Y+2	; 0x02
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	9a 83       	std	Y+2, r25	; 0x02
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	8f 33       	cpi	r24, 0x3F	; 63
     608:	91 05       	cpc	r25, r1
     60a:	08 f2       	brcs	.-126    	; 0x58e <MemAllocInit+0x78>
   {
       mem_ctr_blk[i].mem_next = &mem_ctr_blk[i+1];
       mem_ctr_blk[i].mem_blk_num = 0;
       mem_ctr_blk[i].mem_blk_ofs = 0;
   }
   mem_ctr_blk[MEM_MCB_NUM - 1].mem_blk_num = 0;
     60c:	10 92 5b 0e 	sts	0x0E5B, r1
     610:	10 92 5a 0e 	sts	0x0E5A, r1
   mem_ctr_blk[MEM_MCB_NUM - 1].mem_blk_ofs = 0;
     614:	10 92 59 0e 	sts	0x0E59, r1
     618:	10 92 58 0e 	sts	0x0E58, r1

   #if  MEM_DEBUG >= 1
      MemDebug("memory's allocatation initialization completed");
   #endif
}
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	cf 91       	pop	r28
     622:	df 91       	pop	r29
     624:	08 95       	ret

00000626 <MemAlloc>:


//内存分配函数
void *MemAlloc(MEM_ALC_BYT_TYP byte_size)
{
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	2b 97       	sbiw	r28, 0x0b	; 11
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	99 87       	std	Y+9, r25	; 0x09
     63c:	88 87       	std	Y+8, r24	; 0x08

    u16_t i=0;
     63e:	1f 82       	std	Y+7, r1	; 0x07
     640:	1e 82       	std	Y+6, r1	; 0x06
    #if  MEM_DATA_BITS == 32
    u32_t        mem_alc_blk_num;
    #endif

    mcb* mem_ctr_blk_point;
    mem_ctr_blk_point = mem_ctr_blk[0].mem_next;
     642:	80 91 5c 0c 	lds	r24, 0x0C5C
     646:	90 91 5d 0c 	lds	r25, 0x0C5D
     64a:	9a 83       	std	Y+2, r25	; 0x02
     64c:	89 83       	std	Y+1, r24	; 0x01

    #if  MEM_DEBUG >= 1
      MemDebug("memory's allocatation start...");
    #endif
    //计算所需字节数
    byte_size = (byte_size + MEM_DATA_BYTES);
     64e:	88 85       	ldd	r24, Y+8	; 0x08
     650:	99 85       	ldd	r25, Y+9	; 0x09
     652:	02 96       	adiw	r24, 0x02	; 2
     654:	99 87       	std	Y+9, r25	; 0x09
     656:	88 87       	std	Y+8, r24	; 0x08

    //寻找可用的内存控制块
    for(i=0;i< mem_ctr_blk[0].mem_blk_num;i++)
     658:	1f 82       	std	Y+7, r1	; 0x07
     65a:	1e 82       	std	Y+6, r1	; 0x06
     65c:	c1 c0       	rjmp	.+386    	; 0x7e0 <MemAlloc+0x1ba>
    {
       if( byte_size <= (mem_ctr_blk_point->mem_blk_num*MEM_BLK_SIZE))
     65e:	e9 81       	ldd	r30, Y+1	; 0x01
     660:	fa 81       	ldd	r31, Y+2	; 0x02
     662:	86 81       	ldd	r24, Z+6	; 0x06
     664:	97 81       	ldd	r25, Z+7	; 0x07
     666:	9c 01       	movw	r18, r24
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	22 0f       	add	r18, r18
     66e:	33 1f       	adc	r19, r19
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	88 85       	ldd	r24, Y+8	; 0x08
     676:	99 85       	ldd	r25, Y+9	; 0x09
     678:	28 17       	cp	r18, r24
     67a:	39 07       	cpc	r19, r25
     67c:	08 f4       	brcc	.+2      	; 0x680 <MemAlloc+0x5a>
     67e:	a5 c0       	rjmp	.+330    	; 0x7ca <MemAlloc+0x1a4>
       {
          //计算所需的内存块个数
          mem_alc_blk_num = byte_size/MEM_BLK_SIZE+((byte_size%MEM_BLK_SIZE)+MEM_BLK_SIZE - 1)/MEM_BLK_SIZE;
     680:	88 85       	ldd	r24, Y+8	; 0x08
     682:	99 85       	ldd	r25, Y+9	; 0x09
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	96 95       	lsr	r25
     68e:	87 95       	ror	r24
     690:	28 2f       	mov	r18, r24
     692:	88 85       	ldd	r24, Y+8	; 0x08
     694:	99 85       	ldd	r25, Y+9	; 0x09
     696:	87 70       	andi	r24, 0x07	; 7
     698:	90 70       	andi	r25, 0x00	; 0
     69a:	07 96       	adiw	r24, 0x07	; 7
     69c:	96 95       	lsr	r25
     69e:	87 95       	ror	r24
     6a0:	96 95       	lsr	r25
     6a2:	87 95       	ror	r24
     6a4:	96 95       	lsr	r25
     6a6:	87 95       	ror	r24
     6a8:	82 0f       	add	r24, r18
     6aa:	8b 83       	std	Y+3, r24	; 0x03

          //更新内存使用的总字节数
          mem_ctr_blk[0].mem_blk_ofs += mem_alc_blk_num;
     6ac:	20 91 60 0c 	lds	r18, 0x0C60
     6b0:	30 91 61 0c 	lds	r19, 0x0C61
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	90 93 61 0c 	sts	0x0C61, r25
     6c2:	80 93 60 0c 	sts	0x0C60, r24

          //计算返回的偏移量
          return_addr_ofs = mem_ctr_blk_point->mem_blk_ofs*MEM_BLK_SIZE;
     6c6:	e9 81       	ldd	r30, Y+1	; 0x01
     6c8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ca:	84 81       	ldd	r24, Z+4	; 0x04
     6cc:	95 81       	ldd	r25, Z+5	; 0x05
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	9d 83       	std	Y+5, r25	; 0x05
     6dc:	8c 83       	std	Y+4, r24	; 0x04

          //在返回地址前面注入此次使用的内存块的个数
          #if  MEM_ADDR_BITS == 16
          *(u16_t*)(&mem_pool[return_addr_ofs]) = (u16_t)((mem_alc_blk_num));
     6de:	2c e5       	ldi	r18, 0x5C	; 92
     6e0:	3e e0       	ldi	r19, 0x0E	; 14
     6e2:	8c 81       	ldd	r24, Y+4	; 0x04
     6e4:	9d 81       	ldd	r25, Y+5	; 0x05
     6e6:	f9 01       	movw	r30, r18
     6e8:	e8 0f       	add	r30, r24
     6ea:	f9 1f       	adc	r31, r25
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	80 83       	st	Z, r24
          return_addr_ofs = return_addr_ofs + 2;
     6f6:	8c 81       	ldd	r24, Y+4	; 0x04
     6f8:	9d 81       	ldd	r25, Y+5	; 0x05
     6fa:	02 96       	adiw	r24, 0x02	; 2
     6fc:	9d 83       	std	Y+5, r25	; 0x05
     6fe:	8c 83       	std	Y+4, r24	; 0x04
          return_addr_ofs = return_addr_ofs + 4;
          #endif

          //如果所需内存块个数与当前内存控制块中的块数相等，则
          //在内存管理链表钟删除该节点并归还给空闲链表
          if(mem_alc_blk_num == mem_ctr_blk_point->mem_blk_num )
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	28 2f       	mov	r18, r24
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	e9 81       	ldd	r30, Y+1	; 0x01
     708:	fa 81       	ldd	r31, Y+2	; 0x02
     70a:	86 81       	ldd	r24, Z+6	; 0x06
     70c:	97 81       	ldd	r25, Z+7	; 0x07
     70e:	28 17       	cp	r18, r24
     710:	39 07       	cpc	r19, r25
     712:	b9 f5       	brne	.+110    	; 0x782 <MemAlloc+0x15c>
          {
              mem_ctr_blk_point->mem_prv->mem_next = mem_ctr_blk_point->mem_next;
     714:	e9 81       	ldd	r30, Y+1	; 0x01
     716:	fa 81       	ldd	r31, Y+2	; 0x02
     718:	a2 81       	ldd	r26, Z+2	; 0x02
     71a:	b3 81       	ldd	r27, Z+3	; 0x03
     71c:	e9 81       	ldd	r30, Y+1	; 0x01
     71e:	fa 81       	ldd	r31, Y+2	; 0x02
     720:	80 81       	ld	r24, Z
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	8d 93       	st	X+, r24
     726:	9c 93       	st	X, r25
              mem_ctr_blk_point->mem_next->mem_prv = mem_ctr_blk_point->mem_prv;
     728:	e9 81       	ldd	r30, Y+1	; 0x01
     72a:	fa 81       	ldd	r31, Y+2	; 0x02
     72c:	a0 81       	ld	r26, Z
     72e:	b1 81       	ldd	r27, Z+1	; 0x01
     730:	e9 81       	ldd	r30, Y+1	; 0x01
     732:	fa 81       	ldd	r31, Y+2	; 0x02
     734:	82 81       	ldd	r24, Z+2	; 0x02
     736:	93 81       	ldd	r25, Z+3	; 0x03
     738:	13 96       	adiw	r26, 0x03	; 3
     73a:	9c 93       	st	X, r25
     73c:	8e 93       	st	-X, r24
     73e:	12 97       	sbiw	r26, 0x02	; 2

              mem_ctr_blk_point->mem_next = mem_ctr_blk[2].mem_next;
     740:	80 91 6c 0c 	lds	r24, 0x0C6C
     744:	90 91 6d 0c 	lds	r25, 0x0C6D
     748:	e9 81       	ldd	r30, Y+1	; 0x01
     74a:	fa 81       	ldd	r31, Y+2	; 0x02
     74c:	91 83       	std	Z+1, r25	; 0x01
     74e:	80 83       	st	Z, r24
              mem_ctr_blk[2].mem_next    = mem_ctr_blk_point;
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	9a 81       	ldd	r25, Y+2	; 0x02
     754:	90 93 6d 0c 	sts	0x0C6D, r25
     758:	80 93 6c 0c 	sts	0x0C6C, r24

              mem_ctr_blk[2].mem_blk_num ++ ;
     75c:	80 91 72 0c 	lds	r24, 0x0C72
     760:	90 91 73 0c 	lds	r25, 0x0C73
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	90 93 73 0c 	sts	0x0C73, r25
     76a:	80 93 72 0c 	sts	0x0C72, r24
              mem_ctr_blk[0].mem_blk_num -- ;
     76e:	80 91 62 0c 	lds	r24, 0x0C62
     772:	90 91 63 0c 	lds	r25, 0x0C63
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	90 93 63 0c 	sts	0x0C63, r25
     77c:	80 93 62 0c 	sts	0x0C62, r24
     780:	1c c0       	rjmp	.+56     	; 0x7ba <MemAlloc+0x194>

          }
          else
          {
              //更新内存块的偏移量和内存块个数
              mem_ctr_blk_point->mem_blk_ofs = mem_ctr_blk_point->mem_blk_ofs + mem_alc_blk_num;
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	fa 81       	ldd	r31, Y+2	; 0x02
     786:	24 81       	ldd	r18, Z+4	; 0x04
     788:	35 81       	ldd	r19, Z+5	; 0x05
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	88 2f       	mov	r24, r24
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	82 0f       	add	r24, r18
     792:	93 1f       	adc	r25, r19
     794:	e9 81       	ldd	r30, Y+1	; 0x01
     796:	fa 81       	ldd	r31, Y+2	; 0x02
     798:	95 83       	std	Z+5, r25	; 0x05
     79a:	84 83       	std	Z+4, r24	; 0x04
              mem_ctr_blk_point->mem_blk_num -= mem_alc_blk_num;
     79c:	e9 81       	ldd	r30, Y+1	; 0x01
     79e:	fa 81       	ldd	r31, Y+2	; 0x02
     7a0:	26 81       	ldd	r18, Z+6	; 0x06
     7a2:	37 81       	ldd	r19, Z+7	; 0x07
     7a4:	8b 81       	ldd	r24, Y+3	; 0x03
     7a6:	88 2f       	mov	r24, r24
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	48 1b       	sub	r20, r24
     7ae:	59 0b       	sbc	r21, r25
     7b0:	ca 01       	movw	r24, r20
     7b2:	e9 81       	ldd	r30, Y+1	; 0x01
     7b4:	fa 81       	ldd	r31, Y+2	; 0x02
     7b6:	97 83       	std	Z+7, r25	; 0x07
     7b8:	86 83       	std	Z+6, r24	; 0x06

          #if  MEM_DEBUG >= 1
            MemDebug("memory's allocatation successed");
          #endif

          return (mem_pool + return_addr_ofs);
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	9d 81       	ldd	r25, Y+5	; 0x05
     7be:	9c 01       	movw	r18, r24
     7c0:	24 5a       	subi	r18, 0xA4	; 164
     7c2:	31 4f       	sbci	r19, 0xF1	; 241
     7c4:	3b 87       	std	Y+11, r19	; 0x0b
     7c6:	2a 87       	std	Y+10, r18	; 0x0a
     7c8:	17 c0       	rjmp	.+46     	; 0x7f8 <MemAlloc+0x1d2>
       }
       else
         mem_ctr_blk_point = mem_ctr_blk_point->mem_next;
     7ca:	e9 81       	ldd	r30, Y+1	; 0x01
     7cc:	fa 81       	ldd	r31, Y+2	; 0x02
     7ce:	80 81       	ld	r24, Z
     7d0:	91 81       	ldd	r25, Z+1	; 0x01
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
    #endif
    //计算所需字节数
    byte_size = (byte_size + MEM_DATA_BYTES);

    //寻找可用的内存控制块
    for(i=0;i< mem_ctr_blk[0].mem_blk_num;i++)
     7d6:	8e 81       	ldd	r24, Y+6	; 0x06
     7d8:	9f 81       	ldd	r25, Y+7	; 0x07
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	9f 83       	std	Y+7, r25	; 0x07
     7de:	8e 83       	std	Y+6, r24	; 0x06
     7e0:	20 91 62 0c 	lds	r18, 0x0C62
     7e4:	30 91 63 0c 	lds	r19, 0x0C63
     7e8:	8e 81       	ldd	r24, Y+6	; 0x06
     7ea:	9f 81       	ldd	r25, Y+7	; 0x07
     7ec:	82 17       	cp	r24, r18
     7ee:	93 07       	cpc	r25, r19
     7f0:	08 f4       	brcc	.+2      	; 0x7f4 <MemAlloc+0x1ce>
     7f2:	35 cf       	rjmp	.-406    	; 0x65e <MemAlloc+0x38>
         mem_ctr_blk_point = mem_ctr_blk_point->mem_next;
    }
    #if  MEM_DEBUG >= 1
      MemDebug("memory's allocatation fail");
    #endif
    return NULL;
     7f4:	1b 86       	std	Y+11, r1	; 0x0b
     7f6:	1a 86       	std	Y+10, r1	; 0x0a
     7f8:	8a 85       	ldd	r24, Y+10	; 0x0a
     7fa:	9b 85       	ldd	r25, Y+11	; 0x0b
}
     7fc:	2b 96       	adiw	r28, 0x0b	; 11
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	08 95       	ret

0000080e <MemFree>:


//内存释放函数
void  MemFree(void *p)
{
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	2c 97       	sbiw	r28, 0x0c	; 12
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	9c 87       	std	Y+12, r25	; 0x0c
     824:	8b 87       	std	Y+11, r24	; 0x0b
        MemDebug("memory's freeing start...");
     #endif

     //从指针前面取出内存块的个数和求出该块内存的实际偏移量
     #if  MEM_ADDR_BITS == 16
     mem_alc_num  =(MEM_DATA_TYPE)(*(u16_t*)((u8_t *)p-2));
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	9c 85       	ldd	r25, Y+12	; 0x0c
     82a:	fc 01       	movw	r30, r24
     82c:	32 97       	sbiw	r30, 0x02	; 2
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	98 87       	std	Y+8, r25	; 0x08
     834:	8f 83       	std	Y+7, r24	; 0x07
     mem_blk_ofs = (MEM_DATA_TYPE)(((u16_t)((u8_t *)p - mem_pool - 2))/MEM_BLK_SIZE);
     836:	4b 85       	ldd	r20, Y+11	; 0x0b
     838:	5c 85       	ldd	r21, Y+12	; 0x0c
     83a:	2c e5       	ldi	r18, 0x5C	; 92
     83c:	3e e0       	ldi	r19, 0x0E	; 14
     83e:	8e ef       	ldi	r24, 0xFE	; 254
     840:	9f ef       	ldi	r25, 0xFF	; 255
     842:	82 1b       	sub	r24, r18
     844:	93 0b       	sbc	r25, r19
     846:	84 0f       	add	r24, r20
     848:	95 1f       	adc	r25, r21
     84a:	96 95       	lsr	r25
     84c:	87 95       	ror	r24
     84e:	96 95       	lsr	r25
     850:	87 95       	ror	r24
     852:	96 95       	lsr	r25
     854:	87 95       	ror	r24
     856:	9e 83       	std	Y+6, r25	; 0x06
     858:	8d 83       	std	Y+5, r24	; 0x05
     mem_blk_ofs = (MEM_DATA_TYPE)(((u32_t)((u8_t *)p - mem_pool - 4))/MEM_BLK_SIZE);
     #endif


     //开始指向内存管理链表的第一个控制块
     mem_ctr_blk_point = mem_ctr_blk[0].mem_next;
     85a:	80 91 5c 0c 	lds	r24, 0x0C5C
     85e:	90 91 5d 0c 	lds	r25, 0x0C5D
     862:	9c 83       	std	Y+4, r25	; 0x04
     864:	8b 83       	std	Y+3, r24	; 0x03

     //按照从小到大顺序插入新的内存控制块到内存控制链表中
     for(i=0;i<mem_ctr_blk[0].mem_blk_num; i++)
     866:	1a 86       	std	Y+10, r1	; 0x0a
     868:	19 86       	std	Y+9, r1	; 0x09
     86a:	7b c0       	rjmp	.+246    	; 0x962 <MemFree+0x154>
     {
        if(mem_blk_ofs < mem_ctr_blk_point->mem_blk_ofs)
     86c:	eb 81       	ldd	r30, Y+3	; 0x03
     86e:	fc 81       	ldd	r31, Y+4	; 0x04
     870:	24 81       	ldd	r18, Z+4	; 0x04
     872:	35 81       	ldd	r19, Z+5	; 0x05
     874:	8d 81       	ldd	r24, Y+5	; 0x05
     876:	9e 81       	ldd	r25, Y+6	; 0x06
     878:	82 17       	cp	r24, r18
     87a:	93 07       	cpc	r25, r19
     87c:	08 f0       	brcs	.+2      	; 0x880 <MemFree+0x72>
     87e:	66 c0       	rjmp	.+204    	; 0x94c <MemFree+0x13e>
        {
           //临时存放空闲链表的第二个内存块地址
           mem_idl_blk_point = mem_ctr_blk[2].mem_next->mem_next;
     880:	e0 91 6c 0c 	lds	r30, 0x0C6C
     884:	f0 91 6d 0c 	lds	r31, 0x0C6D
     888:	80 81       	ld	r24, Z
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	9a 83       	std	Y+2, r25	; 0x02
     88e:	89 83       	std	Y+1, r24	; 0x01

           //装入即将要释放的内存块的大小属性和偏移量属性到从空闲链表中取出的控制块中
           mem_ctr_blk[2].mem_next->mem_blk_ofs = mem_blk_ofs;
     890:	e0 91 6c 0c 	lds	r30, 0x0C6C
     894:	f0 91 6d 0c 	lds	r31, 0x0C6D
     898:	8d 81       	ldd	r24, Y+5	; 0x05
     89a:	9e 81       	ldd	r25, Y+6	; 0x06
     89c:	95 83       	std	Z+5, r25	; 0x05
     89e:	84 83       	std	Z+4, r24	; 0x04
           mem_ctr_blk[2].mem_next->mem_blk_num = mem_alc_num;
     8a0:	e0 91 6c 0c 	lds	r30, 0x0C6C
     8a4:	f0 91 6d 0c 	lds	r31, 0x0C6D
     8a8:	8f 81       	ldd	r24, Y+7	; 0x07
     8aa:	98 85       	ldd	r25, Y+8	; 0x08
     8ac:	97 83       	std	Z+7, r25	; 0x07
     8ae:	86 83       	std	Z+6, r24	; 0x06

           //更新管理链表表头属性
           mem_ctr_blk[0].mem_blk_ofs -= mem_alc_num;
     8b0:	20 91 60 0c 	lds	r18, 0x0C60
     8b4:	30 91 61 0c 	lds	r19, 0x0C61
     8b8:	8f 81       	ldd	r24, Y+7	; 0x07
     8ba:	98 85       	ldd	r25, Y+8	; 0x08
     8bc:	a9 01       	movw	r20, r18
     8be:	48 1b       	sub	r20, r24
     8c0:	59 0b       	sbc	r21, r25
     8c2:	ca 01       	movw	r24, r20
     8c4:	90 93 61 0c 	sts	0x0C61, r25
     8c8:	80 93 60 0c 	sts	0x0C60, r24

           //插入管理链表中
           mem_ctr_blk[2].mem_next->mem_next = mem_ctr_blk_point;
     8cc:	e0 91 6c 0c 	lds	r30, 0x0C6C
     8d0:	f0 91 6d 0c 	lds	r31, 0x0C6D
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	91 83       	std	Z+1, r25	; 0x01
     8da:	80 83       	st	Z, r24
           mem_ctr_blk[2].mem_next->mem_prv  = mem_ctr_blk_point->mem_prv;
     8dc:	a0 91 6c 0c 	lds	r26, 0x0C6C
     8e0:	b0 91 6d 0c 	lds	r27, 0x0C6D
     8e4:	eb 81       	ldd	r30, Y+3	; 0x03
     8e6:	fc 81       	ldd	r31, Y+4	; 0x04
     8e8:	82 81       	ldd	r24, Z+2	; 0x02
     8ea:	93 81       	ldd	r25, Z+3	; 0x03
     8ec:	13 96       	adiw	r26, 0x03	; 3
     8ee:	9c 93       	st	X, r25
     8f0:	8e 93       	st	-X, r24
     8f2:	12 97       	sbiw	r26, 0x02	; 2
           mem_ctr_blk_point->mem_prv->mem_next = mem_ctr_blk[2].mem_next;
     8f4:	eb 81       	ldd	r30, Y+3	; 0x03
     8f6:	fc 81       	ldd	r31, Y+4	; 0x04
     8f8:	02 80       	ldd	r0, Z+2	; 0x02
     8fa:	f3 81       	ldd	r31, Z+3	; 0x03
     8fc:	e0 2d       	mov	r30, r0
     8fe:	80 91 6c 0c 	lds	r24, 0x0C6C
     902:	90 91 6d 0c 	lds	r25, 0x0C6D
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	80 83       	st	Z, r24
           mem_ctr_blk_point->mem_prv = mem_ctr_blk[2].mem_next;
     90a:	80 91 6c 0c 	lds	r24, 0x0C6C
     90e:	90 91 6d 0c 	lds	r25, 0x0C6D
     912:	eb 81       	ldd	r30, Y+3	; 0x03
     914:	fc 81       	ldd	r31, Y+4	; 0x04
     916:	93 83       	std	Z+3, r25	; 0x03
     918:	82 83       	std	Z+2, r24	; 0x02

           //更新内存管理链表中挂载的内存块的个数
           mem_ctr_blk[0].mem_blk_num ++ ;
     91a:	80 91 62 0c 	lds	r24, 0x0C62
     91e:	90 91 63 0c 	lds	r25, 0x0C63
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	90 93 63 0c 	sts	0x0C63, r25
     928:	80 93 62 0c 	sts	0x0C62, r24

           //将空闲链表的表头指向下一个空闲内存块
           mem_ctr_blk[2].mem_next = mem_idl_blk_point;
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	90 93 6d 0c 	sts	0x0C6D, r25
     934:	80 93 6c 0c 	sts	0x0C6C, r24

           //更新空闲链表下挂载的控制块个数
           mem_ctr_blk[2].mem_blk_num --;
     938:	80 91 72 0c 	lds	r24, 0x0C72
     93c:	90 91 73 0c 	lds	r25, 0x0C73
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	90 93 73 0c 	sts	0x0C73, r25
     946:	80 93 72 0c 	sts	0x0C72, r24
     94a:	15 c0       	rjmp	.+42     	; 0x976 <MemFree+0x168>

           break;
        }
        else
        {
            mem_ctr_blk_point = mem_ctr_blk_point->mem_next;
     94c:	eb 81       	ldd	r30, Y+3	; 0x03
     94e:	fc 81       	ldd	r31, Y+4	; 0x04
     950:	80 81       	ld	r24, Z
     952:	91 81       	ldd	r25, Z+1	; 0x01
     954:	9c 83       	std	Y+4, r25	; 0x04
     956:	8b 83       	std	Y+3, r24	; 0x03

     //开始指向内存管理链表的第一个控制块
     mem_ctr_blk_point = mem_ctr_blk[0].mem_next;

     //按照从小到大顺序插入新的内存控制块到内存控制链表中
     for(i=0;i<mem_ctr_blk[0].mem_blk_num; i++)
     958:	89 85       	ldd	r24, Y+9	; 0x09
     95a:	9a 85       	ldd	r25, Y+10	; 0x0a
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	9a 87       	std	Y+10, r25	; 0x0a
     960:	89 87       	std	Y+9, r24	; 0x09
     962:	20 91 62 0c 	lds	r18, 0x0C62
     966:	30 91 63 0c 	lds	r19, 0x0C63
     96a:	89 85       	ldd	r24, Y+9	; 0x09
     96c:	9a 85       	ldd	r25, Y+10	; 0x0a
     96e:	82 17       	cp	r24, r18
     970:	93 07       	cpc	r25, r19
     972:	08 f4       	brcc	.+2      	; 0x976 <MemFree+0x168>
     974:	7b cf       	rjmp	.-266    	; 0x86c <MemFree+0x5e>
          MemDebug("memory's freeing successed");
        else
          MemDebug("memory's freeing fail");
     #endif

}
     976:	2c 96       	adiw	r28, 0x0c	; 12
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	08 95       	ret

00000988 <MemGetUsedBytes>:

//获取内存使用总字节数
MEM_DATA_TYPE MemGetUsedBytes(void)
{
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
   return mem_ctr_blk[0].mem_blk_ofs*MEM_BLK_SIZE;
     990:	80 91 60 0c 	lds	r24, 0x0C60
     994:	90 91 61 0c 	lds	r25, 0x0C61
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
}
     9a4:	cf 91       	pop	r28
     9a6:	df 91       	pop	r29
     9a8:	08 95       	ret

000009aa <RTS_PORT_SystickInit>:

#include "rts_port.h"

//RTS OS滴答定时器初始化，移植时需要用户自己实现
void RTS_PORT_SystickInit(void)
{
     9aa:	df 93       	push	r29
     9ac:	cf 93       	push	r28
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
    /** 填写你的OS滴答定时器初始化代码 **/
    TCCR1B|=0X02;
     9b2:	ae e4       	ldi	r26, 0x4E	; 78
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ee e4       	ldi	r30, 0x4E	; 78
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	82 60       	ori	r24, 0x02	; 2
     9be:	8c 93       	st	X, r24
    TCNT1=0xEFFF;
     9c0:	ec e4       	ldi	r30, 0x4C	; 76
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	9f ee       	ldi	r25, 0xEF	; 239
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	80 83       	st	Z, r24
    RTS_DISABLE_INTERRUPTS  /*< 关中断 */
     9cc:	af e5       	ldi	r26, 0x5F	; 95
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	ef e5       	ldi	r30, 0x5F	; 95
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	8f 77       	andi	r24, 0x7F	; 127
     9d8:	8c 93       	st	X, r24
}
     9da:	cf 91       	pop	r28
     9dc:	df 91       	pop	r29
     9de:	08 95       	ret

000009e0 <RTS_PORT_TaskStackInit>:

//任务堆栈初始化，移植需要用户自己实现
u8_t* RTS_PORT_TaskStackInit(void (*task)(void *data) ,
                                 u8_t     *task_stack,
                                 u16_t    stack_size)
{
     9e0:	df 93       	push	r29
     9e2:	cf 93       	push	r28
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <RTS_PORT_TaskStackInit+0x6>
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <RTS_PORT_TaskStackInit+0x8>
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <RTS_PORT_TaskStackInit+0xa>
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	9a 83       	std	Y+2, r25	; 0x02
     9f0:	89 83       	std	Y+1, r24	; 0x01
     9f2:	7c 83       	std	Y+4, r23	; 0x04
     9f4:	6b 83       	std	Y+3, r22	; 0x03
     9f6:	5e 83       	std	Y+6, r21	; 0x06
     9f8:	4d 83       	std	Y+5, r20	; 0x05
    task_stack      +=  stack_size - 1;
     9fa:	8d 81       	ldd	r24, Y+5	; 0x05
     9fc:	9e 81       	ldd	r25, Y+6	; 0x06
     9fe:	9c 01       	movw	r18, r24
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	30 40       	sbci	r19, 0x00	; 0
     a04:	8b 81       	ldd	r24, Y+3	; 0x03
     a06:	9c 81       	ldd	r25, Y+4	; 0x04
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	9c 83       	std	Y+4, r25	; 0x04
     a0e:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = (u8_t)((u16_t)task);
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	eb 81       	ldd	r30, Y+3	; 0x03
     a16:	fc 81       	ldd	r31, Y+4	; 0x04
     a18:	80 83       	st	Z, r24
     a1a:	8b 81       	ldd	r24, Y+3	; 0x03
     a1c:	9c 81       	ldd	r25, Y+4	; 0x04
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	9c 83       	std	Y+4, r25	; 0x04
     a22:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = (u8_t)((u16_t)task>>8);
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	89 2f       	mov	r24, r25
     a2a:	99 27       	eor	r25, r25
     a2c:	eb 81       	ldd	r30, Y+3	; 0x03
     a2e:	fc 81       	ldd	r31, Y+4	; 0x04
     a30:	80 83       	st	Z, r24
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	10 82       	st	Z, r1
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
     a46:	01 97       	sbiw	r24, 0x01	; 1
     a48:	9c 83       	std	Y+4, r25	; 0x04
     a4a:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     a4c:	eb 81       	ldd	r30, Y+3	; 0x03
     a4e:	fc 81       	ldd	r31, Y+4	; 0x04
     a50:	10 82       	st	Z, r1
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     a5c:	eb 81       	ldd	r30, Y+3	; 0x03
     a5e:	fc 81       	ldd	r31, Y+4	; 0x04
     a60:	10 82       	st	Z, r1
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;   
     a6c:	eb 81       	ldd	r30, Y+3	; 0x03
     a6e:	fc 81       	ldd	r31, Y+4	; 0x04
     a70:	10 82       	st	Z, r1
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	9c 81       	ldd	r25, Y+4	; 0x04
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     a7c:	eb 81       	ldd	r30, Y+3	; 0x03
     a7e:	fc 81       	ldd	r31, Y+4	; 0x04
     a80:	10 82       	st	Z, r1
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	9c 83       	std	Y+4, r25	; 0x04
     a8a:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = (u8_t)(1<<7);  //开中断标志，为了让每个任务都有可能被切换
     a8c:	eb 81       	ldd	r30, Y+3	; 0x03
     a8e:	fc 81       	ldd	r31, Y+4	; 0x04
     a90:	80 e8       	ldi	r24, 0x80	; 128
     a92:	80 83       	st	Z, r24
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	9c 83       	std	Y+4, r25	; 0x04
     a9c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     a9e:	eb 81       	ldd	r30, Y+3	; 0x03
     aa0:	fc 81       	ldd	r31, Y+4	; 0x04
     aa2:	10 82       	st	Z, r1
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	9c 81       	ldd	r25, Y+4	; 0x04
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	9c 83       	std	Y+4, r25	; 0x04
     aac:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     aae:	eb 81       	ldd	r30, Y+3	; 0x03
     ab0:	fc 81       	ldd	r31, Y+4	; 0x04
     ab2:	10 82       	st	Z, r1
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	9c 83       	std	Y+4, r25	; 0x04
     abc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     abe:	eb 81       	ldd	r30, Y+3	; 0x03
     ac0:	fc 81       	ldd	r31, Y+4	; 0x04
     ac2:	10 82       	st	Z, r1
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	9c 83       	std	Y+4, r25	; 0x04
     acc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     ace:	eb 81       	ldd	r30, Y+3	; 0x03
     ad0:	fc 81       	ldd	r31, Y+4	; 0x04
     ad2:	10 82       	st	Z, r1
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	9c 83       	std	Y+4, r25	; 0x04
     adc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     ade:	eb 81       	ldd	r30, Y+3	; 0x03
     ae0:	fc 81       	ldd	r31, Y+4	; 0x04
     ae2:	10 82       	st	Z, r1
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	9c 83       	std	Y+4, r25	; 0x04
     aec:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     aee:	eb 81       	ldd	r30, Y+3	; 0x03
     af0:	fc 81       	ldd	r31, Y+4	; 0x04
     af2:	10 82       	st	Z, r1
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	9c 81       	ldd	r25, Y+4	; 0x04
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	9c 83       	std	Y+4, r25	; 0x04
     afc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     afe:	eb 81       	ldd	r30, Y+3	; 0x03
     b00:	fc 81       	ldd	r31, Y+4	; 0x04
     b02:	10 82       	st	Z, r1
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	9c 83       	std	Y+4, r25	; 0x04
     b0c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b0e:	eb 81       	ldd	r30, Y+3	; 0x03
     b10:	fc 81       	ldd	r31, Y+4	; 0x04
     b12:	10 82       	st	Z, r1
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b1e:	eb 81       	ldd	r30, Y+3	; 0x03
     b20:	fc 81       	ldd	r31, Y+4	; 0x04
     b22:	10 82       	st	Z, r1
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	9c 83       	std	Y+4, r25	; 0x04
     b2c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b2e:	eb 81       	ldd	r30, Y+3	; 0x03
     b30:	fc 81       	ldd	r31, Y+4	; 0x04
     b32:	10 82       	st	Z, r1
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	9c 81       	ldd	r25, Y+4	; 0x04
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	9c 83       	std	Y+4, r25	; 0x04
     b3c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b3e:	eb 81       	ldd	r30, Y+3	; 0x03
     b40:	fc 81       	ldd	r31, Y+4	; 0x04
     b42:	10 82       	st	Z, r1
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	9c 81       	ldd	r25, Y+4	; 0x04
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	9c 83       	std	Y+4, r25	; 0x04
     b4c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b4e:	eb 81       	ldd	r30, Y+3	; 0x03
     b50:	fc 81       	ldd	r31, Y+4	; 0x04
     b52:	10 82       	st	Z, r1
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	9c 83       	std	Y+4, r25	; 0x04
     b5c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b5e:	eb 81       	ldd	r30, Y+3	; 0x03
     b60:	fc 81       	ldd	r31, Y+4	; 0x04
     b62:	10 82       	st	Z, r1
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	10 82       	st	Z, r1
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	9c 83       	std	Y+4, r25	; 0x04
     b7c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b7e:	eb 81       	ldd	r30, Y+3	; 0x03
     b80:	fc 81       	ldd	r31, Y+4	; 0x04
     b82:	10 82       	st	Z, r1
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	9c 83       	std	Y+4, r25	; 0x04
     b8c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b8e:	eb 81       	ldd	r30, Y+3	; 0x03
     b90:	fc 81       	ldd	r31, Y+4	; 0x04
     b92:	10 82       	st	Z, r1
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	9c 83       	std	Y+4, r25	; 0x04
     b9c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     b9e:	eb 81       	ldd	r30, Y+3	; 0x03
     ba0:	fc 81       	ldd	r31, Y+4	; 0x04
     ba2:	10 82       	st	Z, r1
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	9c 83       	std	Y+4, r25	; 0x04
     bac:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     bae:	eb 81       	ldd	r30, Y+3	; 0x03
     bb0:	fc 81       	ldd	r31, Y+4	; 0x04
     bb2:	10 82       	st	Z, r1
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	9c 83       	std	Y+4, r25	; 0x04
     bbc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     bbe:	eb 81       	ldd	r30, Y+3	; 0x03
     bc0:	fc 81       	ldd	r31, Y+4	; 0x04
     bc2:	10 82       	st	Z, r1
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	9c 83       	std	Y+4, r25	; 0x04
     bcc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     bce:	eb 81       	ldd	r30, Y+3	; 0x03
     bd0:	fc 81       	ldd	r31, Y+4	; 0x04
     bd2:	10 82       	st	Z, r1
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     bde:	eb 81       	ldd	r30, Y+3	; 0x03
     be0:	fc 81       	ldd	r31, Y+4	; 0x04
     be2:	10 82       	st	Z, r1
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9c 83       	std	Y+4, r25	; 0x04
     bec:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     bee:	eb 81       	ldd	r30, Y+3	; 0x03
     bf0:	fc 81       	ldd	r31, Y+4	; 0x04
     bf2:	10 82       	st	Z, r1
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	9c 81       	ldd	r25, Y+4	; 0x04
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	9c 83       	std	Y+4, r25	; 0x04
     bfc:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     bfe:	eb 81       	ldd	r30, Y+3	; 0x03
     c00:	fc 81       	ldd	r31, Y+4	; 0x04
     c02:	10 82       	st	Z, r1
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     c0e:	eb 81       	ldd	r30, Y+3	; 0x03
     c10:	fc 81       	ldd	r31, Y+4	; 0x04
     c12:	10 82       	st	Z, r1
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     c1e:	eb 81       	ldd	r30, Y+3	; 0x03
     c20:	fc 81       	ldd	r31, Y+4	; 0x04
     c22:	10 82       	st	Z, r1
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     c2e:	eb 81       	ldd	r30, Y+3	; 0x03
     c30:	fc 81       	ldd	r31, Y+4	; 0x04
     c32:	10 82       	st	Z, r1
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     c3e:	eb 81       	ldd	r30, Y+3	; 0x03
     c40:	fc 81       	ldd	r31, Y+4	; 0x04
     c42:	10 82       	st	Z, r1
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	9c 83       	std	Y+4, r25	; 0x04
     c4c:	8b 83       	std	Y+3, r24	; 0x03
    *(task_stack--)  = 0u;
     c4e:	eb 81       	ldd	r30, Y+3	; 0x03
     c50:	fc 81       	ldd	r31, Y+4	; 0x04
     c52:	10 82       	st	Z, r1
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	8b 83       	std	Y+3, r24	; 0x03
    return task_stack;
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04

}
     c62:	26 96       	adiw	r28, 0x06	; 6
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	cf 91       	pop	r28
     c70:	df 91       	pop	r29
     c72:	08 95       	ret

00000c74 <RTS_CORE_TasksRegTblInit>:


/*---------------------------------- RTS_OS初始化部分 -------------------------------------*/
//RTS_OS任务注册表初始化
static void RTS_CORE_TasksRegTblInit(void)
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	0f 92       	push	r0
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_TASKS_NUM+1;i++)
     c7e:	19 82       	std	Y+1, r1	; 0x01
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <RTS_CORE_TasksRegTblInit+0x28>
    {
        rts_gb_tasks_reg_tbl[i]= NULL;
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	fc 01       	movw	r30, r24
     c8e:	e8 51       	subi	r30, 0x18	; 24
     c90:	fa 4f       	sbci	r31, 0xFA	; 250
     c92:	11 82       	std	Z+1, r1	; 0x01
     c94:	10 82       	st	Z, r1
/*---------------------------------- RTS_OS初始化部分 -------------------------------------*/
//RTS_OS任务注册表初始化
static void RTS_CORE_TasksRegTblInit(void)
{
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_TASKS_NUM+1;i++)
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	8f 5f       	subi	r24, 0xFF	; 255
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	80 f3       	brcs	.-32     	; 0xc82 <RTS_CORE_TasksRegTblInit+0xe>
    {
        rts_gb_tasks_reg_tbl[i]= NULL;
    }
}
     ca2:	0f 90       	pop	r0
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <RTS_CORE_PrioBitMapInit>:


//RTS_OS优先级位图初始化
static void RTS_CORE_PrioBitMapInit(void)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	0f 92       	push	r0
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
    u8_t i;
    for(i=0;i<MAX_BITMAP_ARRAY_NUM;i++)
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	0a c0       	rjmp	.+20     	; 0xccc <RTS_CORE_PrioBitMapInit+0x22>
    {
        rts_gb_prio_bitmap[i] = 0;
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	fc 01       	movw	r30, r24
     cc0:	e2 50       	subi	r30, 0x02	; 2
     cc2:	fa 4f       	sbci	r31, 0xFA	; 250
     cc4:	10 82       	st	Z, r1

//RTS_OS优先级位图初始化
static void RTS_CORE_PrioBitMapInit(void)
{
    u8_t i;
    for(i=0;i<MAX_BITMAP_ARRAY_NUM;i++)
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	88 23       	and	r24, r24
     cd0:	99 f3       	breq	.-26     	; 0xcb8 <RTS_CORE_PrioBitMapInit+0xe>
    {
        rts_gb_prio_bitmap[i] = 0;
    }
}
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <RTS_CORE_RdyListHeadTblInit>:


//RTS_OS就绪任务链表数组初始化
static void RTS_CORE_RdyListHeadTblInit(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_MAX_PRIORITIES+1;i++)
     ce4:	19 82       	std	Y+1, r1	; 0x01
     ce6:	1c c0       	rjmp	.+56     	; 0xd20 <RTS_CORE_RdyListHeadTblInit+0x46>
    {
        rts_gb_rdy_lh_tbl[i].head = NULL;
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	c9 01       	movw	r24, r18
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	82 0f       	add	r24, r18
     cf6:	93 1f       	adc	r25, r19
     cf8:	fc 01       	movw	r30, r24
     cfa:	ef 5f       	subi	r30, 0xFF	; 255
     cfc:	f9 4f       	sbci	r31, 0xF9	; 249
     cfe:	11 82       	std	Z+1, r1	; 0x01
     d00:	10 82       	st	Z, r1
        rts_gb_rdy_lh_tbl[i].node_num = 0;
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	c9 01       	movw	r24, r18
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	82 0f       	add	r24, r18
     d10:	93 1f       	adc	r25, r19
     d12:	fc 01       	movw	r30, r24
     d14:	ed 5f       	subi	r30, 0xFD	; 253
     d16:	f9 4f       	sbci	r31, 0xF9	; 249
     d18:	10 82       	st	Z, r1

//RTS_OS就绪任务链表数组初始化
static void RTS_CORE_RdyListHeadTblInit(void)
{
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_MAX_PRIORITIES+1;i++)
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	8f 5f       	subi	r24, 0xFF	; 255
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	87 30       	cpi	r24, 0x07	; 7
     d24:	08 f3       	brcs	.-62     	; 0xce8 <RTS_CORE_RdyListHeadTblInit+0xe>
    {
        rts_gb_rdy_lh_tbl[i].head = NULL;
        rts_gb_rdy_lh_tbl[i].node_num = 0;
    }
}
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <RTS_CORE_Pend_DlyListHeadInit>:

//RTS_OS任务挂起、延时链表头初始化
static void RTS_CORE_Pend_DlyListHeadInit(void)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
    rts_pend_tcb0.curr_status = RTS_TASK_STATUS_INVALID;
     d36:	87 e0       	ldi	r24, 0x07	; 7
     d38:	80 93 1c 06 	sts	0x061C, r24
    rts_pend_tcb0.prev_status = RTS_TASK_STATUS_INVALID;
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	80 93 1d 06 	sts	0x061D, r24
    rts_pend_tcb0.prev = &rts_pend_tcb0;
     d42:	89 e1       	ldi	r24, 0x19	; 25
     d44:	96 e0       	ldi	r25, 0x06	; 6
     d46:	90 93 28 06 	sts	0x0628, r25
     d4a:	80 93 27 06 	sts	0x0627, r24
    rts_pend_tcb0.next = &rts_pend_tcb0;
     d4e:	89 e1       	ldi	r24, 0x19	; 25
     d50:	96 e0       	ldi	r25, 0x06	; 6
     d52:	90 93 26 06 	sts	0x0626, r25
     d56:	80 93 25 06 	sts	0x0625, r24
    rts_pend_tcb0.list_head = &rts_gb_pend_lh;
     d5a:	86 e1       	ldi	r24, 0x16	; 22
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	90 93 24 06 	sts	0x0624, r25
     d62:	80 93 23 06 	sts	0x0623, r24
    rts_gb_pend_lh.head = &rts_pend_tcb0;
     d66:	89 e1       	ldi	r24, 0x19	; 25
     d68:	96 e0       	ldi	r25, 0x06	; 6
     d6a:	90 93 17 06 	sts	0x0617, r25
     d6e:	80 93 16 06 	sts	0x0616, r24
    rts_gb_pend_lh.node_num = 0;
     d72:	10 92 18 06 	sts	0x0618, r1

    #if(RTS_CFG_DELAY_ENB > 0u)
    rts_pend_tcb0.dly_coun = 0;
     d76:	10 92 1f 06 	sts	0x061F, r1
     d7a:	10 92 20 06 	sts	0x0620, r1
     d7e:	10 92 21 06 	sts	0x0621, r1
     d82:	10 92 22 06 	sts	0x0622, r1
    rts_dly_tcb0.curr_status = RTS_TASK_STATUS_INVALID;
     d86:	87 e0       	ldi	r24, 0x07	; 7
     d88:	80 93 2f 06 	sts	0x062F, r24
    rts_dly_tcb0.prev_status = RTS_TASK_STATUS_INVALID;
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	80 93 30 06 	sts	0x0630, r24
    rts_dly_tcb0.prev = &rts_dly_tcb0;
     d92:	8c e2       	ldi	r24, 0x2C	; 44
     d94:	96 e0       	ldi	r25, 0x06	; 6
     d96:	90 93 3b 06 	sts	0x063B, r25
     d9a:	80 93 3a 06 	sts	0x063A, r24
    rts_dly_tcb0.next = &rts_dly_tcb0;
     d9e:	8c e2       	ldi	r24, 0x2C	; 44
     da0:	96 e0       	ldi	r25, 0x06	; 6
     da2:	90 93 39 06 	sts	0x0639, r25
     da6:	80 93 38 06 	sts	0x0638, r24
    rts_dly_tcb0.dly_coun = (u32_t)0xffffffffUL;
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	9f ef       	ldi	r25, 0xFF	; 255
     dae:	af ef       	ldi	r26, 0xFF	; 255
     db0:	bf ef       	ldi	r27, 0xFF	; 255
     db2:	80 93 32 06 	sts	0x0632, r24
     db6:	90 93 33 06 	sts	0x0633, r25
     dba:	a0 93 34 06 	sts	0x0634, r26
     dbe:	b0 93 35 06 	sts	0x0635, r27
    rts_dly_tcb0.list_head = &rts_gb_dly_lh;
     dc2:	89 e2       	ldi	r24, 0x29	; 41
     dc4:	96 e0       	ldi	r25, 0x06	; 6
     dc6:	90 93 37 06 	sts	0x0637, r25
     dca:	80 93 36 06 	sts	0x0636, r24
    rts_gb_dly_lh.head = &rts_dly_tcb0;
     dce:	8c e2       	ldi	r24, 0x2C	; 44
     dd0:	96 e0       	ldi	r25, 0x06	; 6
     dd2:	90 93 2a 06 	sts	0x062A, r25
     dd6:	80 93 29 06 	sts	0x0629, r24
    rts_gb_dly_lh.node_num = 0;
     dda:	10 92 2b 06 	sts	0x062B, r1
    #endif
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <RTS_CORE_Init>:


void RTS_CORE_Init(void)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
    RTS_CORE_TasksRegTblInit();
     dec:	0e 94 3a 06 	call	0xc74	; 0xc74 <RTS_CORE_TasksRegTblInit>
    RTS_CORE_PrioBitMapInit();
     df0:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTS_CORE_PrioBitMapInit>
    RTS_CORE_RdyListHeadTblInit();
     df4:	0e 94 6d 06 	call	0xcda	; 0xcda <RTS_CORE_RdyListHeadTblInit>
    RTS_CORE_Pend_DlyListHeadInit();
     df8:	0e 94 97 06 	call	0xd2e	; 0xd2e <RTS_CORE_Pend_DlyListHeadInit>
}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <RTS_CORE_UpdateTaskHightPrio>:

/*+++++++++++++++++++++++++++++++++++++++++++ 内核函数 +++++++++++++++++++++++++++++++++++++++++++*/
//注意：内核函数是不安全的函数，使用时必须进行临界区保护
//++++++获取就绪任务的最高优先级，通过查询方式获取最高优先级
u8_t RTS_CORE_UpdateTaskHightPrio(void)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <RTS_CORE_UpdateTaskHightPrio+0x6>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <RTS_CORE_UpdateTaskHightPrio+0x8>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
    u8_t prio;
    u8_t bitmap_lv1_index;
    u8_t bitmap_index;
    u8_t bitmap_bit;
    
    bitmap_lv1_index = rts_gb_prio_tbl[rts_gb_prio_bitmap_lv2_index];
     e0e:	80 91 00 06 	lds	r24, 0x0600
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	fc 01       	movw	r30, r24
     e18:	ed 54       	subi	r30, 0x4D	; 77
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	80 81       	ld	r24, Z
     e1e:	8b 83       	std	Y+3, r24	; 0x03
    bitmap_index     = rts_gb_prio_tbl[rts_gb_prio_bitmap_lv1_index[bitmap_lv1_index]];
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	fc 01       	movw	r30, r24
     e28:	e1 50       	subi	r30, 0x01	; 1
     e2a:	fa 4f       	sbci	r31, 0xFA	; 250
     e2c:	80 81       	ld	r24, Z
     e2e:	88 2f       	mov	r24, r24
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	fc 01       	movw	r30, r24
     e34:	ed 54       	subi	r30, 0x4D	; 77
     e36:	fe 4f       	sbci	r31, 0xFE	; 254
     e38:	80 81       	ld	r24, Z
     e3a:	8a 83       	std	Y+2, r24	; 0x02
    bitmap_bit       = rts_gb_prio_tbl[rts_gb_prio_bitmap[bitmap_lv1_index*8 + bitmap_index]];
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 01       	movw	r18, r24
     e44:	22 0f       	add	r18, r18
     e46:	33 1f       	adc	r19, r19
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	82 0f       	add	r24, r18
     e58:	93 1f       	adc	r25, r19
     e5a:	fc 01       	movw	r30, r24
     e5c:	e2 50       	subi	r30, 0x02	; 2
     e5e:	fa 4f       	sbci	r31, 0xFA	; 250
     e60:	80 81       	ld	r24, Z
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	fc 01       	movw	r30, r24
     e68:	ed 54       	subi	r30, 0x4D	; 77
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	80 81       	ld	r24, Z
     e6e:	89 83       	std	Y+1, r24	; 0x01
    prio = bitmap_lv1_index*64 + bitmap_index*8 + bitmap_bit;
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9c 01       	movw	r18, r24
     e78:	22 0f       	add	r18, r18
     e7a:	33 1f       	adc	r19, r19
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	98 2f       	mov	r25, r24
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	89 0f       	add	r24, r25
     ea0:	8c 83       	std	Y+4, r24	; 0x04
    hiprio = prio;
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	80 93 b3 02 	sts	0x02B3, r24
    return prio;
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <RTS_CORE_ClearPrioBitmapBit>:

//根据优先级清除优先级位图
void RTS_CORE_ClearPrioBitmapBit(u8_t prio)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <RTS_CORE_ClearPrioBitmapBit+0x6>
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <RTS_CORE_ClearPrioBitmapBit+0x8>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <RTS_CORE_ClearPrioBitmapBit+0xa>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	89 83       	std	Y+1, r24	; 0x01
    rts_gb_prio_bitmap[prio/8] &= (u8_t)(~(1<<(prio%8)));
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	86 95       	lsr	r24
     ecc:	86 95       	lsr	r24
     ece:	86 95       	lsr	r24
     ed0:	48 2f       	mov	r20, r24
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	fc 01       	movw	r30, r24
     eda:	e2 50       	subi	r30, 0x02	; 2
     edc:	fa 4f       	sbci	r31, 0xFA	; 250
     ede:	60 81       	ld	r22, Z
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 01       	movw	r18, r24
     ee8:	27 70       	andi	r18, 0x07	; 7
     eea:	30 70       	andi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <RTS_CORE_ClearPrioBitmapBit+0x40>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <RTS_CORE_ClearPrioBitmapBit+0x3c>
     efc:	80 95       	com	r24
     efe:	86 23       	and	r24, r22
     f00:	fa 01       	movw	r30, r20
     f02:	e2 50       	subi	r30, 0x02	; 2
     f04:	fa 4f       	sbci	r31, 0xFA	; 250
     f06:	80 83       	st	Z, r24
    if(rts_gb_prio_bitmap[prio/8] == 0)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	86 95       	lsr	r24
     f0c:	86 95       	lsr	r24
     f0e:	86 95       	lsr	r24
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	fc 01       	movw	r30, r24
     f16:	e2 50       	subi	r30, 0x02	; 2
     f18:	fa 4f       	sbci	r31, 0xFA	; 250
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	09 f0       	breq	.+2      	; 0xf22 <RTS_CORE_ClearPrioBitmapBit+0x6a>
     f20:	5d c0       	rjmp	.+186    	; 0xfdc <RTS_CORE_ClearPrioBitmapBit+0x124>
    {
        rts_gb_prio_bitmap_lv1_index[prio/64] &= (u8_t)(~(1<<((prio%64)/8)));
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	82 95       	swap	r24
     f26:	86 95       	lsr	r24
     f28:	86 95       	lsr	r24
     f2a:	83 70       	andi	r24, 0x03	; 3
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3c 83       	std	Y+4, r19	; 0x04
     f32:	2b 83       	std	Y+3, r18	; 0x03
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	fc 01       	movw	r30, r24
     f3a:	e1 50       	subi	r30, 0x01	; 1
     f3c:	fa 4f       	sbci	r31, 0xFA	; 250
     f3e:	30 81       	ld	r19, Z
     f40:	3a 83       	std	Y+2, r19	; 0x02
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8f 73       	andi	r24, 0x3F	; 63
     f4a:	90 70       	andi	r25, 0x00	; 0
     f4c:	9e 83       	std	Y+6, r25	; 0x06
     f4e:	8d 83       	std	Y+5, r24	; 0x05
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	99 23       	and	r25, r25
     f56:	34 f4       	brge	.+12     	; 0xf64 <RTS_CORE_ClearPrioBitmapBit+0xac>
     f58:	2d 81       	ldd	r18, Y+5	; 0x05
     f5a:	3e 81       	ldd	r19, Y+6	; 0x06
     f5c:	29 5f       	subi	r18, 0xF9	; 249
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	3e 83       	std	Y+6, r19	; 0x06
     f62:	2d 83       	std	Y+5, r18	; 0x05
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	95 95       	asr	r25
     f6a:	87 95       	ror	r24
     f6c:	95 95       	asr	r25
     f6e:	87 95       	ror	r24
     f70:	95 95       	asr	r25
     f72:	87 95       	ror	r24
     f74:	9c 01       	movw	r18, r24
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <RTS_CORE_ClearPrioBitmapBit+0xca>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <RTS_CORE_ClearPrioBitmapBit+0xc6>
     f86:	80 95       	com	r24
     f88:	3a 81       	ldd	r19, Y+2	; 0x02
     f8a:	83 23       	and	r24, r19
     f8c:	eb 81       	ldd	r30, Y+3	; 0x03
     f8e:	fc 81       	ldd	r31, Y+4	; 0x04
     f90:	e1 50       	subi	r30, 0x01	; 1
     f92:	fa 4f       	sbci	r31, 0xFA	; 250
     f94:	80 83       	st	Z, r24
        if(rts_gb_prio_bitmap_lv1_index[prio/64] == 0)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	82 95       	swap	r24
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	83 70       	andi	r24, 0x03	; 3
     fa0:	88 2f       	mov	r24, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	fc 01       	movw	r30, r24
     fa6:	e1 50       	subi	r30, 0x01	; 1
     fa8:	fa 4f       	sbci	r31, 0xFA	; 250
     faa:	80 81       	ld	r24, Z
     fac:	88 23       	and	r24, r24
     fae:	b1 f4       	brne	.+44     	; 0xfdc <RTS_CORE_ClearPrioBitmapBit+0x124>
        {
            rts_gb_prio_bitmap_lv2_index  &= (u8_t)(~(1<<(prio/64)));
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	82 95       	swap	r24
     fb4:	86 95       	lsr	r24
     fb6:	86 95       	lsr	r24
     fb8:	83 70       	andi	r24, 0x03	; 3
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <RTS_CORE_ClearPrioBitmapBit+0x112>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <RTS_CORE_ClearPrioBitmapBit+0x10e>
     fce:	98 2f       	mov	r25, r24
     fd0:	90 95       	com	r25
     fd2:	80 91 00 06 	lds	r24, 0x0600
     fd6:	89 23       	and	r24, r25
     fd8:	80 93 00 06 	sts	0x0600, r24
        }
    }
}
     fdc:	26 96       	adiw	r28, 0x06	; 6
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <RTS_CORE_SetPrioBitmapBit>:

//根据优先级设置优先级位图
void RTS_CORE_SetPrioBitmapBit(u8_t prio)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <RTS_CORE_SetPrioBitmapBit+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <RTS_CORE_SetPrioBitmapBit+0x8>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <RTS_CORE_SetPrioBitmapBit+0xa>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01
   rts_gb_prio_bitmap[prio/8] |= (u8_t)(1<<(prio%8)); //更新优先级位图
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	48 2f       	mov	r20, r24
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	fc 01       	movw	r30, r24
    1010:	e2 50       	subi	r30, 0x02	; 2
    1012:	fa 4f       	sbci	r31, 0xFA	; 250
    1014:	60 81       	ld	r22, Z
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 01       	movw	r18, r24
    101e:	27 70       	andi	r18, 0x07	; 7
    1020:	30 70       	andi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 c0       	rjmp	.+4      	; 0x102c <RTS_CORE_SetPrioBitmapBit+0x3e>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	2a 95       	dec	r18
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <RTS_CORE_SetPrioBitmapBit+0x3a>
    1030:	86 2b       	or	r24, r22
    1032:	fa 01       	movw	r30, r20
    1034:	e2 50       	subi	r30, 0x02	; 2
    1036:	fa 4f       	sbci	r31, 0xFA	; 250
    1038:	80 83       	st	Z, r24
   rts_gb_prio_bitmap_lv1_index[prio/64] |= (u8_t)(1<<((prio%64)/8));
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	82 95       	swap	r24
    103e:	86 95       	lsr	r24
    1040:	86 95       	lsr	r24
    1042:	83 70       	andi	r24, 0x03	; 3
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3c 83       	std	Y+4, r19	; 0x04
    104a:	2b 83       	std	Y+3, r18	; 0x03
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	fc 01       	movw	r30, r24
    1052:	e1 50       	subi	r30, 0x01	; 1
    1054:	fa 4f       	sbci	r31, 0xFA	; 250
    1056:	30 81       	ld	r19, Z
    1058:	3a 83       	std	Y+2, r19	; 0x02
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8f 73       	andi	r24, 0x3F	; 63
    1062:	90 70       	andi	r25, 0x00	; 0
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	99 23       	and	r25, r25
    106e:	34 f4       	brge	.+12     	; 0x107c <RTS_CORE_SetPrioBitmapBit+0x8e>
    1070:	2d 81       	ldd	r18, Y+5	; 0x05
    1072:	3e 81       	ldd	r19, Y+6	; 0x06
    1074:	29 5f       	subi	r18, 0xF9	; 249
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
    1078:	3e 83       	std	Y+6, r19	; 0x06
    107a:	2d 83       	std	Y+5, r18	; 0x05
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	95 95       	asr	r25
    1082:	87 95       	ror	r24
    1084:	95 95       	asr	r25
    1086:	87 95       	ror	r24
    1088:	95 95       	asr	r25
    108a:	87 95       	ror	r24
    108c:	9c 01       	movw	r18, r24
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <RTS_CORE_SetPrioBitmapBit+0xaa>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	2a 95       	dec	r18
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <RTS_CORE_SetPrioBitmapBit+0xa6>
    109c:	3a 81       	ldd	r19, Y+2	; 0x02
    109e:	83 2b       	or	r24, r19
    10a0:	eb 81       	ldd	r30, Y+3	; 0x03
    10a2:	fc 81       	ldd	r31, Y+4	; 0x04
    10a4:	e1 50       	subi	r30, 0x01	; 1
    10a6:	fa 4f       	sbci	r31, 0xFA	; 250
    10a8:	80 83       	st	Z, r24
   rts_gb_prio_bitmap_lv2_index  |= (u8_t)(1<<(prio/64));
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	82 95       	swap	r24
    10ae:	86 95       	lsr	r24
    10b0:	86 95       	lsr	r24
    10b2:	83 70       	andi	r24, 0x03	; 3
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <RTS_CORE_SetPrioBitmapBit+0xd6>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <RTS_CORE_SetPrioBitmapBit+0xd2>
    10c8:	98 2f       	mov	r25, r24
    10ca:	80 91 00 06 	lds	r24, 0x0600
    10ce:	89 2b       	or	r24, r25
    10d0:	80 93 00 06 	sts	0x0600, r24
}
    10d4:	26 96       	adiw	r28, 0x06	; 6
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <RTS_CORE_RegisterTask>:


//++++++注册任务到任务注册表中，注册成功后返回任务tid
//++++++返回0表示注册失败，规定0号tid用户不能使用
u8_t RTS_CORE_RegisterTask(TCB_t *tcb)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <RTS_CORE_RegisterTask+0x6>
    10ec:	0f 92       	push	r0
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	9b 83       	std	Y+3, r25	; 0x03
    10f4:	8a 83       	std	Y+2, r24	; 0x02
    u8_t tid;
    for(tid = 0;tid < RTS_CFG_MAX_TASKS_NUM+1;tid++)
    10f6:	19 82       	std	Y+1, r1	; 0x01
    10f8:	20 c0       	rjmp	.+64     	; 0x113a <__stack+0x3b>
    {
        //如果该位置没有被注册，则将TCB注册到该位置上
        if(rts_gb_tasks_reg_tbl[tid] == NULL) 
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	fc 01       	movw	r30, r24
    1106:	e8 51       	subi	r30, 0x18	; 24
    1108:	fa 4f       	sbci	r31, 0xFA	; 250
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	89 f4       	brne	.+34     	; 0x1134 <__stack+0x35>
        {
            rts_gb_tasks_reg_tbl[tid] = tcb;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	fc 01       	movw	r30, r24
    111e:	e8 51       	subi	r30, 0x18	; 24
    1120:	fa 4f       	sbci	r31, 0xFA	; 250
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	9b 81       	ldd	r25, Y+3	; 0x03
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
            tcb->tid = tid;
    112a:	ea 81       	ldd	r30, Y+2	; 0x02
    112c:	fb 81       	ldd	r31, Y+3	; 0x03
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	85 83       	std	Z+5, r24	; 0x05
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <__stack+0x41>
//++++++注册任务到任务注册表中，注册成功后返回任务tid
//++++++返回0表示注册失败，规定0号tid用户不能使用
u8_t RTS_CORE_RegisterTask(TCB_t *tcb)
{
    u8_t tid;
    for(tid = 0;tid < RTS_CFG_MAX_TASKS_NUM+1;tid++)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	8b 30       	cpi	r24, 0x0B	; 11
    113e:	e8 f2       	brcs	.-70     	; 0x10fa <RTS_CORE_RegisterTask+0x14>
            rts_gb_tasks_reg_tbl[tid] = tcb;
            tcb->tid = tid;
            break;
        }
    }
    return tid;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <RTS_CORE_InsertTcbToRdyList>:

//++++++将任务TCB插入到任务就绪链表中
void RTS_CORE_InsertTcbToRdyList(TCB_t *tcb)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <RTS_CORE_InsertTcbToRdyList+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <RTS_CORE_InsertTcbToRdyList+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	9d 83       	std	Y+5, r25	; 0x05
    115e:	8c 83       	std	Y+4, r24	; 0x04
    u8_t prio;
    TCB_t *head = NULL;
    1160:	1a 82       	std	Y+2, r1	; 0x02
    1162:	19 82       	std	Y+1, r1	; 0x01
    prio = tcb->prio;  //获取任务的优先级
    1164:	ec 81       	ldd	r30, Y+4	; 0x04
    1166:	fd 81       	ldd	r31, Y+5	; 0x05
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	8b 83       	std	Y+3, r24	; 0x03
    head = rts_gb_rdy_lh_tbl[prio].head;  //取得即将要插入就绪链表数组中的位置
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	c9 01       	movw	r24, r18
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	fc 01       	movw	r30, r24
    117e:	ef 5f       	subi	r30, 0xFF	; 255
    1180:	f9 4f       	sbci	r31, 0xF9	; 249
    1182:	80 81       	ld	r24, Z
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
    if(head == NULL)   //当就绪链表下没有就绪TCB时
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	e1 f4       	brne	.+56     	; 0x11ca <RTS_CORE_InsertTcbToRdyList+0x7c>
    {
        rts_gb_rdy_lh_tbl[prio].head = tcb;  
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	c9 01       	movw	r24, r18
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	ef 5f       	subi	r30, 0xFF	; 255
    11a6:	f9 4f       	sbci	r31, 0xF9	; 249
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	80 83       	st	Z, r24
        tcb->next = tcb;
    11b0:	ec 81       	ldd	r30, Y+4	; 0x04
    11b2:	fd 81       	ldd	r31, Y+5	; 0x05
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	95 87       	std	Z+13, r25	; 0x0d
    11ba:	84 87       	std	Z+12, r24	; 0x0c
        tcb->prev = tcb;
    11bc:	ec 81       	ldd	r30, Y+4	; 0x04
    11be:	fd 81       	ldd	r31, Y+5	; 0x05
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	97 87       	std	Z+15, r25	; 0x0f
    11c6:	86 87       	std	Z+14, r24	; 0x0e
    11c8:	1d c0       	rjmp	.+58     	; 0x1204 <RTS_CORE_InsertTcbToRdyList+0xb6>
    }
    else               //当就绪链表下存在就绪TCB时
    {
        tcb->next = head;
    11ca:	ec 81       	ldd	r30, Y+4	; 0x04
    11cc:	fd 81       	ldd	r31, Y+5	; 0x05
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	95 87       	std	Z+13, r25	; 0x0d
    11d4:	84 87       	std	Z+12, r24	; 0x0c
        tcb->prev = head->prev;
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	86 85       	ldd	r24, Z+14	; 0x0e
    11dc:	97 85       	ldd	r25, Z+15	; 0x0f
    11de:	ec 81       	ldd	r30, Y+4	; 0x04
    11e0:	fd 81       	ldd	r31, Y+5	; 0x05
    11e2:	97 87       	std	Z+15, r25	; 0x0f
    11e4:	86 87       	std	Z+14, r24	; 0x0e
        head->prev->next = tcb;
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	06 84       	ldd	r0, Z+14	; 0x0e
    11ec:	f7 85       	ldd	r31, Z+15	; 0x0f
    11ee:	e0 2d       	mov	r30, r0
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	95 87       	std	Z+13, r25	; 0x0d
    11f6:	84 87       	std	Z+12, r24	; 0x0c
        head->prev = tcb;
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	97 87       	std	Z+15, r25	; 0x0f
    1202:	86 87       	std	Z+14, r24	; 0x0e
    }
    ++rts_gb_rdy_lh_tbl[prio].node_num;  
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	c9 01       	movw	r24, r18
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	82 0f       	add	r24, r18
    1212:	93 1f       	adc	r25, r19
    1214:	fc 01       	movw	r30, r24
    1216:	ed 5f       	subi	r30, 0xFD	; 253
    1218:	f9 4f       	sbci	r31, 0xF9	; 249
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	4f 5f       	subi	r20, 0xFF	; 255
    1220:	c9 01       	movw	r24, r18
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	fc 01       	movw	r30, r24
    122c:	ed 5f       	subi	r30, 0xFD	; 253
    122e:	f9 4f       	sbci	r31, 0xF9	; 249
    1230:	40 83       	st	Z, r20
    tcb->list_head = &rts_gb_rdy_lh_tbl[prio];
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	99 4f       	sbci	r25, 0xF9	; 249
    1246:	ec 81       	ldd	r30, Y+4	; 0x04
    1248:	fd 81       	ldd	r31, Y+5	; 0x05
    124a:	93 87       	std	Z+11, r25	; 0x0b
    124c:	82 87       	std	Z+10, r24	; 0x0a
    //设置相应的优先级位图中的bit位
    RTS_CORE_SetPrioBitmapBit(prio);
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	0e 94 f7 07 	call	0xfee	; 0xfee <RTS_CORE_SetPrioBitmapBit>
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <RTS_CORE_RemoveTcbFromRdyList>:


//++++++将任务TCB从就绪链表中删除
void RTS_CORE_RemoveTcbFromRdyList(TCB_t *tcb)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <RTS_CORE_RemoveTcbFromRdyList+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <RTS_CORE_RemoveTcbFromRdyList+0x8>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    u8_t prio,num;
    prio = tcb->prio;
    1274:	eb 81       	ldd	r30, Y+3	; 0x03
    1276:	fc 81       	ldd	r31, Y+4	; 0x04
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	8a 83       	std	Y+2, r24	; 0x02
    num = rts_gb_rdy_lh_tbl[prio].node_num;
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	c9 01       	movw	r24, r18
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	fc 01       	movw	r30, r24
    128e:	ed 5f       	subi	r30, 0xFD	; 253
    1290:	f9 4f       	sbci	r31, 0xF9	; 249
    1292:	80 81       	ld	r24, Z
    1294:	89 83       	std	Y+1, r24	; 0x01
    if(num == 1)  //如果移除后就绪链表中的节点为0时
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	e9 f4       	brne	.+58     	; 0x12d6 <RTS_CORE_RemoveTcbFromRdyList+0x72>
    {
        rts_gb_rdy_lh_tbl[prio].head = NULL;
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	c9 01       	movw	r24, r18
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	82 0f       	add	r24, r18
    12aa:	93 1f       	adc	r25, r19
    12ac:	fc 01       	movw	r30, r24
    12ae:	ef 5f       	subi	r30, 0xFF	; 255
    12b0:	f9 4f       	sbci	r31, 0xF9	; 249
    12b2:	11 82       	std	Z+1, r1	; 0x01
    12b4:	10 82       	st	Z, r1
        RTS_CORE_ClearPrioBitmapBit(prio);    //清除相应的优先级位图中的bit位
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <RTS_CORE_ClearPrioBitmapBit>
        rts_gb_rdy_lh_tbl[prio].node_num = 0;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	c9 01       	movw	r24, r18
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	fc 01       	movw	r30, r24
    12ce:	ed 5f       	subi	r30, 0xFD	; 253
    12d0:	f9 4f       	sbci	r31, 0xF9	; 249
    12d2:	10 82       	st	Z, r1
    12d4:	44 c0       	rjmp	.+136    	; 0x135e <RTS_CORE_RemoveTcbFromRdyList+0xfa>
    }
    else if(num > 1)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	08 f4       	brcc	.+2      	; 0x12de <RTS_CORE_RemoveTcbFromRdyList+0x7a>
    12dc:	40 c0       	rjmp	.+128    	; 0x135e <RTS_CORE_RemoveTcbFromRdyList+0xfa>
    {
        rts_gb_rdy_lh_tbl[prio].head = tcb->next;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	eb 81       	ldd	r30, Y+3	; 0x03
    12e6:	fc 81       	ldd	r31, Y+4	; 0x04
    12e8:	44 85       	ldd	r20, Z+12	; 0x0c
    12ea:	55 85       	ldd	r21, Z+13	; 0x0d
    12ec:	c9 01       	movw	r24, r18
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	82 0f       	add	r24, r18
    12f4:	93 1f       	adc	r25, r19
    12f6:	fc 01       	movw	r30, r24
    12f8:	ef 5f       	subi	r30, 0xFF	; 255
    12fa:	f9 4f       	sbci	r31, 0xF9	; 249
    12fc:	51 83       	std	Z+1, r21	; 0x01
    12fe:	40 83       	st	Z, r20
        tcb->prev->next = tcb->next;
    1300:	eb 81       	ldd	r30, Y+3	; 0x03
    1302:	fc 81       	ldd	r31, Y+4	; 0x04
    1304:	a6 85       	ldd	r26, Z+14	; 0x0e
    1306:	b7 85       	ldd	r27, Z+15	; 0x0f
    1308:	eb 81       	ldd	r30, Y+3	; 0x03
    130a:	fc 81       	ldd	r31, Y+4	; 0x04
    130c:	84 85       	ldd	r24, Z+12	; 0x0c
    130e:	95 85       	ldd	r25, Z+13	; 0x0d
    1310:	1d 96       	adiw	r26, 0x0d	; 13
    1312:	9c 93       	st	X, r25
    1314:	8e 93       	st	-X, r24
    1316:	1c 97       	sbiw	r26, 0x0c	; 12
        tcb->next->prev = tcb->prev;
    1318:	eb 81       	ldd	r30, Y+3	; 0x03
    131a:	fc 81       	ldd	r31, Y+4	; 0x04
    131c:	a4 85       	ldd	r26, Z+12	; 0x0c
    131e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1320:	eb 81       	ldd	r30, Y+3	; 0x03
    1322:	fc 81       	ldd	r31, Y+4	; 0x04
    1324:	86 85       	ldd	r24, Z+14	; 0x0e
    1326:	97 85       	ldd	r25, Z+15	; 0x0f
    1328:	1f 96       	adiw	r26, 0x0f	; 15
    132a:	9c 93       	st	X, r25
    132c:	8e 93       	st	-X, r24
    132e:	1e 97       	sbiw	r26, 0x0e	; 14
        --rts_gb_rdy_lh_tbl[prio].node_num;
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	c9 01       	movw	r24, r18
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	82 0f       	add	r24, r18
    133e:	93 1f       	adc	r25, r19
    1340:	fc 01       	movw	r30, r24
    1342:	ed 5f       	subi	r30, 0xFD	; 253
    1344:	f9 4f       	sbci	r31, 0xF9	; 249
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	41 50       	subi	r20, 0x01	; 1
    134c:	c9 01       	movw	r24, r18
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	82 0f       	add	r24, r18
    1354:	93 1f       	adc	r25, r19
    1356:	fc 01       	movw	r30, r24
    1358:	ed 5f       	subi	r30, 0xFD	; 253
    135a:	f9 4f       	sbci	r31, 0xF9	; 249
    135c:	40 83       	st	Z, r20
    }
}
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <RTS_CORE_InsertTcbToPendList>:


//++++++将任务TCB插入到挂起链表下
void RTS_CORE_InsertTcbToPendList(TCB_t *tcb)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <RTS_CORE_InsertTcbToPendList+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <RTS_CORE_InsertTcbToPendList+0x8>
    1374:	00 d0       	rcall	.+0      	; 0x1376 <RTS_CORE_InsertTcbToPendList+0xa>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
    TCB_t *p;
    taskListHead_t *list = &rts_gb_pend_lh; 
    137e:	86 e1       	ldi	r24, 0x16	; 22
    1380:	96 e0       	ldi	r25, 0x06	; 6
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    p = list->head;
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03

    tcb->prev = p;        //总是将TCB插入到挂起链表中无效填充链表的下一个位置
    1392:	ed 81       	ldd	r30, Y+5	; 0x05
    1394:	fe 81       	ldd	r31, Y+6	; 0x06
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	97 87       	std	Z+15, r25	; 0x0f
    139c:	86 87       	std	Z+14, r24	; 0x0e
    tcb->list_head = list;
    139e:	ed 81       	ldd	r30, Y+5	; 0x05
    13a0:	fe 81       	ldd	r31, Y+6	; 0x06
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	93 87       	std	Z+11, r25	; 0x0b
    13a8:	82 87       	std	Z+10, r24	; 0x0a
    tcb->next = p->next; 
    13aa:	eb 81       	ldd	r30, Y+3	; 0x03
    13ac:	fc 81       	ldd	r31, Y+4	; 0x04
    13ae:	84 85       	ldd	r24, Z+12	; 0x0c
    13b0:	95 85       	ldd	r25, Z+13	; 0x0d
    13b2:	ed 81       	ldd	r30, Y+5	; 0x05
    13b4:	fe 81       	ldd	r31, Y+6	; 0x06
    13b6:	95 87       	std	Z+13, r25	; 0x0d
    13b8:	84 87       	std	Z+12, r24	; 0x0c
    p->next->prev = tcb;
    13ba:	eb 81       	ldd	r30, Y+3	; 0x03
    13bc:	fc 81       	ldd	r31, Y+4	; 0x04
    13be:	04 84       	ldd	r0, Z+12	; 0x0c
    13c0:	f5 85       	ldd	r31, Z+13	; 0x0d
    13c2:	e0 2d       	mov	r30, r0
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	97 87       	std	Z+15, r25	; 0x0f
    13ca:	86 87       	std	Z+14, r24	; 0x0e
    p->next = tcb;
    13cc:	eb 81       	ldd	r30, Y+3	; 0x03
    13ce:	fc 81       	ldd	r31, Y+4	; 0x04
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	95 87       	std	Z+13, r25	; 0x0d
    13d6:	84 87       	std	Z+12, r24	; 0x0c

    ++list->node_num;
    13d8:	e9 81       	ldd	r30, Y+1	; 0x01
    13da:	fa 81       	ldd	r31, Y+2	; 0x02
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	e9 81       	ldd	r30, Y+1	; 0x01
    13e2:	fa 81       	ldd	r31, Y+2	; 0x02
    13e4:	82 83       	std	Z+2, r24	; 0x02
}
    13e6:	26 96       	adiw	r28, 0x06	; 6
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <RTS_CORE_RemoveTcbFromPendList>:

//+++++将任务TCB从挂起链表下移除
void RTS_CORE_RemoveTcbFromPendList(TCB_t *tcb)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <RTS_CORE_RemoveTcbFromPendList+0x6>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	9a 83       	std	Y+2, r25	; 0x02
    1404:	89 83       	std	Y+1, r24	; 0x01
    tcb->prev->next = tcb->next;
    1406:	e9 81       	ldd	r30, Y+1	; 0x01
    1408:	fa 81       	ldd	r31, Y+2	; 0x02
    140a:	a6 85       	ldd	r26, Z+14	; 0x0e
    140c:	b7 85       	ldd	r27, Z+15	; 0x0f
    140e:	e9 81       	ldd	r30, Y+1	; 0x01
    1410:	fa 81       	ldd	r31, Y+2	; 0x02
    1412:	84 85       	ldd	r24, Z+12	; 0x0c
    1414:	95 85       	ldd	r25, Z+13	; 0x0d
    1416:	1d 96       	adiw	r26, 0x0d	; 13
    1418:	9c 93       	st	X, r25
    141a:	8e 93       	st	-X, r24
    141c:	1c 97       	sbiw	r26, 0x0c	; 12
    tcb->next->prev = tcb->prev;
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	a4 85       	ldd	r26, Z+12	; 0x0c
    1424:	b5 85       	ldd	r27, Z+13	; 0x0d
    1426:	e9 81       	ldd	r30, Y+1	; 0x01
    1428:	fa 81       	ldd	r31, Y+2	; 0x02
    142a:	86 85       	ldd	r24, Z+14	; 0x0e
    142c:	97 85       	ldd	r25, Z+15	; 0x0f
    142e:	1f 96       	adiw	r26, 0x0f	; 15
    1430:	9c 93       	st	X, r25
    1432:	8e 93       	st	-X, r24
    1434:	1e 97       	sbiw	r26, 0x0e	; 14
    --rts_gb_pend_lh.node_num;
    1436:	80 91 18 06 	lds	r24, 0x0618
    143a:	81 50       	subi	r24, 0x01	; 1
    143c:	80 93 18 06 	sts	0x0618, r24
}
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <RTS_CORE_InsertTcbToDlyList>:


//+++++将任务TCB插入到延时链表中 (在后续版本中会加入错误处理)
#if(RTS_CFG_DELAY_ENB > 0u)
void RTS_CORE_InsertTcbToDlyList(TCB_t *tcb)
{
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	2a 97       	sbiw	r28, 0x0a	; 10
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	9a 87       	std	Y+10, r25	; 0x0a
    1468:	89 87       	std	Y+9, r24	; 0x09
    //这里需要按照从小到大的顺序插入到延时链表中
    TCB_t *p;
    u32_t end_ticks = tcb->dly_coun + rts_gb_systicks; //计算到达的时间点
    146a:	e9 85       	ldd	r30, Y+9	; 0x09
    146c:	fa 85       	ldd	r31, Y+10	; 0x0a
    146e:	26 81       	ldd	r18, Z+6	; 0x06
    1470:	37 81       	ldd	r19, Z+7	; 0x07
    1472:	40 85       	ldd	r20, Z+8	; 0x08
    1474:	51 85       	ldd	r21, Z+9	; 0x09
    1476:	80 91 5c 10 	lds	r24, 0x105C
    147a:	90 91 5d 10 	lds	r25, 0x105D
    147e:	a0 91 5e 10 	lds	r26, 0x105E
    1482:	b0 91 5f 10 	lds	r27, 0x105F
    1486:	82 0f       	add	r24, r18
    1488:	93 1f       	adc	r25, r19
    148a:	a4 1f       	adc	r26, r20
    148c:	b5 1f       	adc	r27, r21
    148e:	8b 83       	std	Y+3, r24	; 0x03
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	ad 83       	std	Y+5, r26	; 0x05
    1494:	be 83       	std	Y+6, r27	; 0x06
    taskListHead_t *list = &rts_gb_dly_lh;
    1496:	89 e2       	ldi	r24, 0x29	; 41
    1498:	96 e0       	ldi	r25, 0x06	; 6
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    p = list->head;
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	80 81       	ld	r24, Z
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
    14a6:	98 87       	std	Y+8, r25	; 0x08
    14a8:	8f 83       	std	Y+7, r24	; 0x07
    ++list->node_num;
    14aa:	e9 81       	ldd	r30, Y+1	; 0x01
    14ac:	fa 81       	ldd	r31, Y+2	; 0x02
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	8f 5f       	subi	r24, 0xFF	; 255
    14b2:	e9 81       	ldd	r30, Y+1	; 0x01
    14b4:	fa 81       	ldd	r31, Y+2	; 0x02
    14b6:	82 83       	std	Z+2, r24	; 0x02
    //此时滴答定时器溢出,此种情况的概率很小，大约1年才会发生一次
    if(end_ticks < rts_gb_systicks) 
    14b8:	20 91 5c 10 	lds	r18, 0x105C
    14bc:	30 91 5d 10 	lds	r19, 0x105D
    14c0:	40 91 5e 10 	lds	r20, 0x105E
    14c4:	50 91 5f 10 	lds	r21, 0x105F
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	ad 81       	ldd	r26, Y+5	; 0x05
    14ce:	be 81       	ldd	r27, Y+6	; 0x06
    14d0:	82 17       	cp	r24, r18
    14d2:	93 07       	cpc	r25, r19
    14d4:	a4 07       	cpc	r26, r20
    14d6:	b5 07       	cpc	r27, r21
    14d8:	d0 f5       	brcc	.+116    	; 0x154e <RTS_CORE_InsertTcbToDlyList+0x104>
    14da:	22 c0       	rjmp	.+68     	; 0x1520 <RTS_CORE_InsertTcbToDlyList+0xd6>
    {
        //遍历到链表末尾，堆链表元素进行处理
        while(p->curr_status != RTS_TASK_STATUS_INVALID) 
        {
            p->dly_coun -= rts_gb_systicks;
    14dc:	ef 81       	ldd	r30, Y+7	; 0x07
    14de:	f8 85       	ldd	r31, Y+8	; 0x08
    14e0:	26 81       	ldd	r18, Z+6	; 0x06
    14e2:	37 81       	ldd	r19, Z+7	; 0x07
    14e4:	40 85       	ldd	r20, Z+8	; 0x08
    14e6:	51 85       	ldd	r21, Z+9	; 0x09
    14e8:	80 91 5c 10 	lds	r24, 0x105C
    14ec:	90 91 5d 10 	lds	r25, 0x105D
    14f0:	a0 91 5e 10 	lds	r26, 0x105E
    14f4:	b0 91 5f 10 	lds	r27, 0x105F
    14f8:	79 01       	movw	r14, r18
    14fa:	8a 01       	movw	r16, r20
    14fc:	e8 1a       	sub	r14, r24
    14fe:	f9 0a       	sbc	r15, r25
    1500:	0a 0b       	sbc	r16, r26
    1502:	1b 0b       	sbc	r17, r27
    1504:	d8 01       	movw	r26, r16
    1506:	c7 01       	movw	r24, r14
    1508:	ef 81       	ldd	r30, Y+7	; 0x07
    150a:	f8 85       	ldd	r31, Y+8	; 0x08
    150c:	86 83       	std	Z+6, r24	; 0x06
    150e:	97 83       	std	Z+7, r25	; 0x07
    1510:	a0 87       	std	Z+8, r26	; 0x08
    1512:	b1 87       	std	Z+9, r27	; 0x09
            p = p->next;
    1514:	ef 81       	ldd	r30, Y+7	; 0x07
    1516:	f8 85       	ldd	r31, Y+8	; 0x08
    1518:	84 85       	ldd	r24, Z+12	; 0x0c
    151a:	95 85       	ldd	r25, Z+13	; 0x0d
    151c:	98 87       	std	Y+8, r25	; 0x08
    151e:	8f 83       	std	Y+7, r24	; 0x07
    ++list->node_num;
    //此时滴答定时器溢出,此种情况的概率很小，大约1年才会发生一次
    if(end_ticks < rts_gb_systicks) 
    {
        //遍历到链表末尾，堆链表元素进行处理
        while(p->curr_status != RTS_TASK_STATUS_INVALID) 
    1520:	ef 81       	ldd	r30, Y+7	; 0x07
    1522:	f8 85       	ldd	r31, Y+8	; 0x08
    1524:	83 81       	ldd	r24, Z+3	; 0x03
    1526:	87 30       	cpi	r24, 0x07	; 7
    1528:	c9 f6       	brne	.-78     	; 0x14dc <RTS_CORE_InsertTcbToDlyList+0x92>
        {
            p->dly_coun -= rts_gb_systicks;
            p = p->next;
        }
        end_ticks = tcb->dly_coun;
    152a:	e9 85       	ldd	r30, Y+9	; 0x09
    152c:	fa 85       	ldd	r31, Y+10	; 0x0a
    152e:	86 81       	ldd	r24, Z+6	; 0x06
    1530:	97 81       	ldd	r25, Z+7	; 0x07
    1532:	a0 85       	ldd	r26, Z+8	; 0x08
    1534:	b1 85       	ldd	r27, Z+9	; 0x09
    1536:	8b 83       	std	Y+3, r24	; 0x03
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	ad 83       	std	Y+5, r26	; 0x05
    153c:	be 83       	std	Y+6, r27	; 0x06
        rts_gb_systicks = 0;
    153e:	10 92 5c 10 	sts	0x105C, r1
    1542:	10 92 5d 10 	sts	0x105D, r1
    1546:	10 92 5e 10 	sts	0x105E, r1
    154a:	10 92 5f 10 	sts	0x105F, r1
    }
    p = list->head;  //开始重新插入
    154e:	e9 81       	ldd	r30, Y+1	; 0x01
    1550:	fa 81       	ldd	r31, Y+2	; 0x02
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	98 87       	std	Y+8, r25	; 0x08
    1558:	8f 83       	std	Y+7, r24	; 0x07
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <RTS_CORE_InsertTcbToDlyList+0x11e>
    //这里千万注意，如果后插进来的TCB块延时数等于当前数，则插入到该TCB后面
    while(end_ticks >= p->dly_coun)//找出要插入的位置
    {
       p = p->next;
    155c:	ef 81       	ldd	r30, Y+7	; 0x07
    155e:	f8 85       	ldd	r31, Y+8	; 0x08
    1560:	84 85       	ldd	r24, Z+12	; 0x0c
    1562:	95 85       	ldd	r25, Z+13	; 0x0d
    1564:	98 87       	std	Y+8, r25	; 0x08
    1566:	8f 83       	std	Y+7, r24	; 0x07
        end_ticks = tcb->dly_coun;
        rts_gb_systicks = 0;
    }
    p = list->head;  //开始重新插入
    //这里千万注意，如果后插进来的TCB块延时数等于当前数，则插入到该TCB后面
    while(end_ticks >= p->dly_coun)//找出要插入的位置
    1568:	ef 81       	ldd	r30, Y+7	; 0x07
    156a:	f8 85       	ldd	r31, Y+8	; 0x08
    156c:	26 81       	ldd	r18, Z+6	; 0x06
    156e:	37 81       	ldd	r19, Z+7	; 0x07
    1570:	40 85       	ldd	r20, Z+8	; 0x08
    1572:	51 85       	ldd	r21, Z+9	; 0x09
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	ad 81       	ldd	r26, Y+5	; 0x05
    157a:	be 81       	ldd	r27, Y+6	; 0x06
    157c:	82 17       	cp	r24, r18
    157e:	93 07       	cpc	r25, r19
    1580:	a4 07       	cpc	r26, r20
    1582:	b5 07       	cpc	r27, r21
    1584:	58 f7       	brcc	.-42     	; 0x155c <RTS_CORE_InsertTcbToDlyList+0x112>
    {
       p = p->next;
    }
    tcb->next = p;  //开始将TCB插入到延时链表中
    1586:	e9 85       	ldd	r30, Y+9	; 0x09
    1588:	fa 85       	ldd	r31, Y+10	; 0x0a
    158a:	8f 81       	ldd	r24, Y+7	; 0x07
    158c:	98 85       	ldd	r25, Y+8	; 0x08
    158e:	95 87       	std	Z+13, r25	; 0x0d
    1590:	84 87       	std	Z+12, r24	; 0x0c
    tcb->prev = p->prev;
    1592:	ef 81       	ldd	r30, Y+7	; 0x07
    1594:	f8 85       	ldd	r31, Y+8	; 0x08
    1596:	86 85       	ldd	r24, Z+14	; 0x0e
    1598:	97 85       	ldd	r25, Z+15	; 0x0f
    159a:	e9 85       	ldd	r30, Y+9	; 0x09
    159c:	fa 85       	ldd	r31, Y+10	; 0x0a
    159e:	97 87       	std	Z+15, r25	; 0x0f
    15a0:	86 87       	std	Z+14, r24	; 0x0e
    p->prev->next = tcb;
    15a2:	ef 81       	ldd	r30, Y+7	; 0x07
    15a4:	f8 85       	ldd	r31, Y+8	; 0x08
    15a6:	06 84       	ldd	r0, Z+14	; 0x0e
    15a8:	f7 85       	ldd	r31, Z+15	; 0x0f
    15aa:	e0 2d       	mov	r30, r0
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	95 87       	std	Z+13, r25	; 0x0d
    15b2:	84 87       	std	Z+12, r24	; 0x0c
    p->prev = tcb;
    15b4:	ef 81       	ldd	r30, Y+7	; 0x07
    15b6:	f8 85       	ldd	r31, Y+8	; 0x08
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	97 87       	std	Z+15, r25	; 0x0f
    15be:	86 87       	std	Z+14, r24	; 0x0e
    //如果当前的计数最小，则让延时链表头指向该TCB
    if(end_ticks < list->head->dly_coun)
    15c0:	e9 81       	ldd	r30, Y+1	; 0x01
    15c2:	fa 81       	ldd	r31, Y+2	; 0x02
    15c4:	01 90       	ld	r0, Z+
    15c6:	f0 81       	ld	r31, Z
    15c8:	e0 2d       	mov	r30, r0
    15ca:	26 81       	ldd	r18, Z+6	; 0x06
    15cc:	37 81       	ldd	r19, Z+7	; 0x07
    15ce:	40 85       	ldd	r20, Z+8	; 0x08
    15d0:	51 85       	ldd	r21, Z+9	; 0x09
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	ad 81       	ldd	r26, Y+5	; 0x05
    15d8:	be 81       	ldd	r27, Y+6	; 0x06
    15da:	82 17       	cp	r24, r18
    15dc:	93 07       	cpc	r25, r19
    15de:	a4 07       	cpc	r26, r20
    15e0:	b5 07       	cpc	r27, r21
    15e2:	30 f4       	brcc	.+12     	; 0x15f0 <RTS_CORE_InsertTcbToDlyList+0x1a6>
        list->head = tcb;
    15e4:	e9 81       	ldd	r30, Y+1	; 0x01
    15e6:	fa 81       	ldd	r31, Y+2	; 0x02
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	80 83       	st	Z, r24
    //将延时时间到达的时刻写回TCB中
    tcb->dly_coun = end_ticks;
    15f0:	e9 85       	ldd	r30, Y+9	; 0x09
    15f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	ad 81       	ldd	r26, Y+5	; 0x05
    15fa:	be 81       	ldd	r27, Y+6	; 0x06
    15fc:	86 83       	std	Z+6, r24	; 0x06
    15fe:	97 83       	std	Z+7, r25	; 0x07
    1600:	a0 87       	std	Z+8, r26	; 0x08
    1602:	b1 87       	std	Z+9, r27	; 0x09
    tcb->list_head = &rts_gb_dly_lh;
    1604:	e9 85       	ldd	r30, Y+9	; 0x09
    1606:	fa 85       	ldd	r31, Y+10	; 0x0a
    1608:	89 e2       	ldi	r24, 0x29	; 41
    160a:	96 e0       	ldi	r25, 0x06	; 6
    160c:	93 87       	std	Z+11, r25	; 0x0b
    160e:	82 87       	std	Z+10, r24	; 0x0a
}
    1610:	2a 96       	adiw	r28, 0x0a	; 10
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	ff 90       	pop	r15
    1626:	ef 90       	pop	r14
    1628:	08 95       	ret

0000162a <RTS_CORE_RemoveTcbFromDlyList>:

//+++++将任务TCB从延时链表下移除
void RTS_CORE_RemoveTcbFromDlyList(TCB_t *tcb)
{ 
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <RTS_CORE_RemoveTcbFromDlyList+0x6>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
    //这里为了加快速度，不对延时链表头进行处理，延时链表头的处理需要在调用该函数时进行
    tcb->prev->next = tcb->next;
    1638:	e9 81       	ldd	r30, Y+1	; 0x01
    163a:	fa 81       	ldd	r31, Y+2	; 0x02
    163c:	a6 85       	ldd	r26, Z+14	; 0x0e
    163e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1640:	e9 81       	ldd	r30, Y+1	; 0x01
    1642:	fa 81       	ldd	r31, Y+2	; 0x02
    1644:	84 85       	ldd	r24, Z+12	; 0x0c
    1646:	95 85       	ldd	r25, Z+13	; 0x0d
    1648:	1d 96       	adiw	r26, 0x0d	; 13
    164a:	9c 93       	st	X, r25
    164c:	8e 93       	st	-X, r24
    164e:	1c 97       	sbiw	r26, 0x0c	; 12
    tcb->next->prev = tcb->prev;
    1650:	e9 81       	ldd	r30, Y+1	; 0x01
    1652:	fa 81       	ldd	r31, Y+2	; 0x02
    1654:	a4 85       	ldd	r26, Z+12	; 0x0c
    1656:	b5 85       	ldd	r27, Z+13	; 0x0d
    1658:	e9 81       	ldd	r30, Y+1	; 0x01
    165a:	fa 81       	ldd	r31, Y+2	; 0x02
    165c:	86 85       	ldd	r24, Z+14	; 0x0e
    165e:	97 85       	ldd	r25, Z+15	; 0x0f
    1660:	1f 96       	adiw	r26, 0x0f	; 15
    1662:	9c 93       	st	X, r25
    1664:	8e 93       	st	-X, r24
    1666:	1e 97       	sbiw	r26, 0x0e	; 14
    --rts_gb_dly_lh.node_num;
    1668:	80 91 2b 06 	lds	r24, 0x062B
    166c:	81 50       	subi	r24, 0x01	; 1
    166e:	80 93 2b 06 	sts	0x062B, r24
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <RTS_CORE_DlyListHeadRelocate>:

//删除延时链表节点后，重新找到合适的延时链表头节点
void RTS_CORE_DlyListHeadRelocate(TCB_t *tcb)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <RTS_CORE_DlyListHeadRelocate+0x6>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    if(tcb == rts_gb_dly_lh.head)             //如果移除的是延时链表头，则将延时链表头指向下一个tcb
    168a:	20 91 29 06 	lds	r18, 0x0629
    168e:	30 91 2a 06 	lds	r19, 0x062A
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	28 17       	cp	r18, r24
    1698:	39 07       	cpc	r19, r25
    169a:	41 f4       	brne	.+16     	; 0x16ac <RTS_CORE_DlyListHeadRelocate+0x30>
        rts_gb_dly_lh.head = tcb->next;
    169c:	e9 81       	ldd	r30, Y+1	; 0x01
    169e:	fa 81       	ldd	r31, Y+2	; 0x02
    16a0:	84 85       	ldd	r24, Z+12	; 0x0c
    16a2:	95 85       	ldd	r25, Z+13	; 0x0d
    16a4:	90 93 2a 06 	sts	0x062A, r25
    16a8:	80 93 29 06 	sts	0x0629, r24
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <RTS_CORE_SetDlyListHead>:


//指定延时链表头节点
void RTS_CORE_SetDlyListHead(TCB_t *tcb)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <RTS_CORE_SetDlyListHead+0x6>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
    rts_gb_dly_lh.head = tcb;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	90 93 2a 06 	sts	0x062A, r25
    16cc:	80 93 29 06 	sts	0x0629, r24
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <RTS_CORE_GetDlyListHead>:

//获取延时链表表头节点
void RTS_CORE_GetDlyListHead(TCB_t **tcb)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <RTS_CORE_GetDlyListHead+0x6>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    (*tcb) = rts_gb_dly_lh.head;
    16e8:	80 91 29 06 	lds	r24, 0x0629
    16ec:	90 91 2a 06 	lds	r25, 0x062A
    16f0:	e9 81       	ldd	r30, Y+1	; 0x01
    16f2:	fa 81       	ldd	r31, Y+2	; 0x02
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <RTS_CORE_GetTcbFromTid>:

#endif

//根据tid获取TCB
void RTS_CORE_GetTcbFromTid(u8_t tid,TCB_t **tcb)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <RTS_CORE_GetTcbFromTid+0x6>
    1708:	0f 92       	push	r0
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	7b 83       	std	Y+3, r23	; 0x03
    1712:	6a 83       	std	Y+2, r22	; 0x02
    *tcb = rts_gb_tasks_reg_tbl[tid];
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	fc 01       	movw	r30, r24
    1720:	e8 51       	subi	r30, 0x18	; 24
    1722:	fa 4f       	sbci	r31, 0xFA	; 250
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	ea 81       	ldd	r30, Y+2	; 0x02
    172a:	fb 81       	ldd	r31, Y+3	; 0x03
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <RTS_CORE_GetHightPrioTcb>:

void RTS_CORE_GetHightPrioTcb(TCB_t **tcb)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <RTS_CORE_GetHightPrioTcb+0x6>
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
    *tcb = rts_gb_rdy_lh_tbl[hiprio].head;
    174a:	80 91 b3 02 	lds	r24, 0x02B3
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	c9 01       	movw	r24, r18
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	fc 01       	movw	r30, r24
    175e:	ef 5f       	subi	r30, 0xFF	; 255
    1760:	f9 4f       	sbci	r31, 0xF9	; 249
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	80 83       	st	Z, r24
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <RTS_CORE_SwitchToHiprioTask>:

//切换到最高优先级
void RTS_CORE_SwitchToHiprioTask(void)
{
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    rts_gb_curr_task_tcb = rts_gb_rdy_lh_tbl[hiprio].head;
    1780:	80 91 b3 02 	lds	r24, 0x02B3
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	c9 01       	movw	r24, r18
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	82 0f       	add	r24, r18
    1790:	93 1f       	adc	r25, r19
    1792:	fc 01       	movw	r30, r24
    1794:	ef 5f       	subi	r30, 0xFF	; 255
    1796:	f9 4f       	sbci	r31, 0xF9	; 249
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	90 93 63 10 	sts	0x1063, r25
    17a0:	80 93 62 10 	sts	0x1062, r24
        RTS_SYSTICK_ENABLE
    else
        RTS_SYSTICK_DISABLE

    #endif
}
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <RTS_CORE_GetHiprioTcbNum>:


//获取最高优先级TCB个数
u8_t RTS_CORE_GetHiprioTcbNum(void)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    return rts_gb_rdy_lh_tbl[hiprio].node_num;
    17b2:	80 91 b3 02 	lds	r24, 0x02B3
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	c9 01       	movw	r24, r18
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	82 0f       	add	r24, r18
    17c2:	93 1f       	adc	r25, r19
    17c4:	fc 01       	movw	r30, r24
    17c6:	ed 5f       	subi	r30, 0xFD	; 253
    17c8:	f9 4f       	sbci	r31, 0xF9	; 249
    17ca:	80 81       	ld	r24, Z
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <RTS_CORE_SwitchToNextTask>:



//在优先级不改变情况下切换到下一个要运行的任务
void RTS_CORE_SwitchToNextTask(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    rts_gb_curr_task_tcb = rts_gb_prev_task_tcb->next;
    17da:	e0 91 60 10 	lds	r30, 0x1060
    17de:	f0 91 61 10 	lds	r31, 0x1061
    17e2:	84 85       	ldd	r24, Z+12	; 0x0c
    17e4:	95 85       	ldd	r25, Z+13	; 0x0d
    17e6:	90 93 63 10 	sts	0x1063, r25
    17ea:	80 93 62 10 	sts	0x1062, r24
}
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <RTS_CORE_OsSchdule>:


//进行最高优先级调度
void RTS_CORE_OsSchdule(void)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    RTS_CORE_UpdateTaskHightPrio();
    17fc:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_SwitchToHiprioTask();
    1800:	0e 94 bc 0b 	call	0x1778	; 0x1778 <RTS_CORE_SwitchToHiprioTask>
}
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <IdleTask>:


/*----------------------------------------- 任务初始化 ---------------------------------------------------*/
//定义空闲任务
static void IdleTask(void *data)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <IdleTask+0x6>
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
    data = data;
    while(1)
    {
        #if(RTS_CFG_IDLE_HOOK_ENB > 0u)
        if(rts_gb_idle_task_pf != NULL)  //空闲任务的钩子函数指针
    1818:	80 91 bc 06 	lds	r24, 0x06BC
    181c:	90 91 bd 06 	lds	r25, 0x06BD
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	d1 f3       	breq	.-12     	; 0x1818 <IdleTask+0xe>
           rts_gb_idle_task_pf(data);
    1824:	e0 91 bc 06 	lds	r30, 0x06BC
    1828:	f0 91 bd 06 	lds	r31, 0x06BD
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	9a 81       	ldd	r25, Y+2	; 0x02
    1830:	09 95       	icall
    1832:	f2 cf       	rjmp	.-28     	; 0x1818 <IdleTask+0xe>

00001834 <RTS_TASK_IdleTaskInit>:
    }
}

//空闲任务初始化
u8_t RTS_TASK_IdleTaskInit(void (*hook)(void *))
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <RTS_TASK_IdleTaskInit+0x6>
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9b 83       	std	Y+3, r25	; 0x03
    1842:	8a 83       	std	Y+2, r24	; 0x02
    static u8_t idle_stack[128];
    u8_t tid;
    tid = RTS_CreateTask(IdleTask,idle_stack,128,RTS_CFG_MAX_MAX_PRIORITIES);
    1844:	85 e0       	ldi	r24, 0x05	; 5
    1846:	9c e0       	ldi	r25, 0x0C	; 12
    1848:	2c e3       	ldi	r18, 0x3C	; 60
    184a:	36 e0       	ldi	r19, 0x06	; 6
    184c:	b9 01       	movw	r22, r18
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	26 e0       	ldi	r18, 0x06	; 6
    1854:	0e 94 3a 0c 	call	0x1874	; 0x1874 <RTS_CreateTask>
    1858:	89 83       	std	Y+1, r24	; 0x01
    #if(RTS_CFG_IDLE_HOOK_ENB > 0u)
    rts_gb_idle_task_pf = hook;
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	9b 81       	ldd	r25, Y+3	; 0x03
    185e:	90 93 bd 06 	sts	0x06BD, r25
    1862:	80 93 bc 06 	sts	0x06BC, r24
    #endif
    return tid;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <RTS_CreateTask>:
//******创建任务,成功返回tid，失败返回0
u8_t RTS_CreateTask(void (*task)(void *),
                    taskStack_t *stack,
                    u16_t       stack_size,
                    u8_t        prio)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2a 97       	sbiw	r28, 0x0a	; 10
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	9d 83       	std	Y+5, r25	; 0x05
    188a:	8c 83       	std	Y+4, r24	; 0x04
    188c:	7f 83       	std	Y+7, r23	; 0x07
    188e:	6e 83       	std	Y+6, r22	; 0x06
    1890:	59 87       	std	Y+9, r21	; 0x09
    1892:	48 87       	std	Y+8, r20	; 0x08
    1894:	2a 87       	std	Y+10, r18	; 0x0a
    TCB_t *task_tcb = NULL;
    1896:	1b 82       	std	Y+3, r1	; 0x03
    1898:	1a 82       	std	Y+2, r1	; 0x02
    u8_t tid = 0;
    189a:	19 82       	std	Y+1, r1	; 0x01
    //提前初始化堆栈,尽可能减少临界区访问时间
    stack = RTS_PORT_TaskStackInit(task,stack,stack_size);
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	9d 81       	ldd	r25, Y+5	; 0x05
    18a0:	2e 81       	ldd	r18, Y+6	; 0x06
    18a2:	3f 81       	ldd	r19, Y+7	; 0x07
    18a4:	48 85       	ldd	r20, Y+8	; 0x08
    18a6:	59 85       	ldd	r21, Y+9	; 0x09
    18a8:	b9 01       	movw	r22, r18
    18aa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <RTS_PORT_TaskStackInit>
    18ae:	9f 83       	std	Y+7, r25	; 0x07
    18b0:	8e 83       	std	Y+6, r24	; 0x06
    RTS_ENTER_CRITICAL
    18b2:	00 90 5f 00 	lds	r0, 0x005F
    18b6:	0f 92       	push	r0
    18b8:	af e5       	ldi	r26, 0x5F	; 95
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	ef e5       	ldi	r30, 0x5F	; 95
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8f 77       	andi	r24, 0x7F	; 127
    18c4:	8c 93       	st	X, r24
    //一旦分配成功并创建成功，则由任务注册表来接管该TCB
    task_tcb = (TCB_t *)MemAlloc(sizeof(TCB_t)); 
    18c6:	80 e1       	ldi	r24, 0x10	; 16
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 13 03 	call	0x626	; 0x626 <MemAlloc>
    18ce:	9b 83       	std	Y+3, r25	; 0x03
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    if(task_tcb)
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	f9 f0       	breq	.+62     	; 0x1918 <RTS_CreateTask+0xa4>
    {   
        tid = RTS_CORE_RegisterTask(task_tcb);
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	0e 94 73 08 	call	0x10e6	; 0x10e6 <RTS_CORE_RegisterTask>
    18e2:	89 83       	std	Y+1, r24	; 0x01
        if(tid >= 0)
        { 
            task_tcb->tid  = tid;
    18e4:	ea 81       	ldd	r30, Y+2	; 0x02
    18e6:	fb 81       	ldd	r31, Y+3	; 0x03
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	85 83       	std	Z+5, r24	; 0x05
            task_tcb->prio = prio;
    18ec:	ea 81       	ldd	r30, Y+2	; 0x02
    18ee:	fb 81       	ldd	r31, Y+3	; 0x03
    18f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18f2:	82 83       	std	Z+2, r24	; 0x02
            task_tcb->curr_status = RTS_TASK_STATUS_READY;
    18f4:	ea 81       	ldd	r30, Y+2	; 0x02
    18f6:	fb 81       	ldd	r31, Y+3	; 0x03
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	83 83       	std	Z+3, r24	; 0x03
            task_tcb->prev_status = RTS_TASK_STATUS_REMOVED;
    18fc:	ea 81       	ldd	r30, Y+2	; 0x02
    18fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1900:	86 e0       	ldi	r24, 0x06	; 6
    1902:	84 83       	std	Z+4, r24	; 0x04
            task_tcb->sp = stack;
    1904:	ea 81       	ldd	r30, Y+2	; 0x02
    1906:	fb 81       	ldd	r31, Y+3	; 0x03
    1908:	8e 81       	ldd	r24, Y+6	; 0x06
    190a:	9f 81       	ldd	r25, Y+7	; 0x07
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
            //将任务TCB挂载到任务就绪链表中，同时更新优先级位图
            RTS_CORE_InsertTcbToRdyList(task_tcb);
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	0e 94 a7 08 	call	0x114e	; 0x114e <RTS_CORE_InsertTcbToRdyList>
        else
        {
            MemFree(task_tcb);
        }
    }
    RTS_EXIT_CRITICAL
    1918:	0f 90       	pop	r0
    191a:	00 92 5f 00 	sts	0x005F, r0
    return tid;
    191e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1920:	2a 96       	adiw	r28, 0x0a	; 10
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <RTS_PendTask>:


//根据tid挂起任务
void RTS_PendTask(u8_t tid)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <RTS_PendTask+0x6>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	8b 83       	std	Y+3, r24	; 0x03
    TCB_t * tcb;
    RTS_ENTER_CRITICAL
    1940:	00 90 5f 00 	lds	r0, 0x005F
    1944:	0f 92       	push	r0
    1946:	af e5       	ldi	r26, 0x5F	; 95
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ef e5       	ldi	r30, 0x5F	; 95
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8f 77       	andi	r24, 0x7F	; 127
    1952:	8c 93       	st	X, r24
    RTS_CORE_GetTcbFromTid(tid,&tcb);
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9e 01       	movw	r18, r28
    1958:	2f 5f       	subi	r18, 0xFF	; 255
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	b9 01       	movw	r22, r18
    195e:	0e 94 81 0b 	call	0x1702	; 0x1702 <RTS_CORE_GetTcbFromTid>
    if(tcb->curr_status != RTS_TASK_STATUS_SYNC)
    1962:	e9 81       	ldd	r30, Y+1	; 0x01
    1964:	fa 81       	ldd	r31, Y+2	; 0x02
    1966:	83 81       	ldd	r24, Z+3	; 0x03
    1968:	88 30       	cpi	r24, 0x08	; 8
    196a:	09 f4       	brne	.+2      	; 0x196e <RTS_PendTask+0x3c>
    196c:	5a c0       	rjmp	.+180    	; 0x1a22 <RTS_PendTask+0xf0>
    {
        //如果挂起的是自己,则获取最高优先级任务运行
        if(tcb == rts_gb_curr_task_tcb)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	9c 01       	movw	r18, r24
    1974:	80 91 62 10 	lds	r24, 0x1062
    1978:	90 91 63 10 	lds	r25, 0x1063
    197c:	28 17       	cp	r18, r24
    197e:	39 07       	cpc	r19, r25
    1980:	d9 f4       	brne	.+54     	; 0x19b8 <RTS_PendTask+0x86>
        {
            if(tcb->curr_status == RTS_TASK_STATUS_READY)
    1982:	e9 81       	ldd	r30, Y+1	; 0x01
    1984:	fa 81       	ldd	r31, Y+2	; 0x02
    1986:	83 81       	ldd	r24, Z+3	; 0x03
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	09 f0       	breq	.+2      	; 0x198e <RTS_PendTask+0x5c>
    198c:	48 c0       	rjmp	.+144    	; 0x1a1e <RTS_PendTask+0xec>
            {
                tcb->curr_status = RTS_TASK_STATUS_PEND;
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	84 e0       	ldi	r24, 0x04	; 4
    1994:	83 83       	std	Z+3, r24	; 0x03
                tcb->prev_status = RTS_TASK_STATUS_READY;
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	84 83       	std	Z+4, r24	; 0x04
                RTS_CORE_RemoveTcbFromRdyList(tcb);
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	0e 94 32 09 	call	0x1264	; 0x1264 <RTS_CORE_RemoveTcbFromRdyList>
                RTS_CORE_InsertTcbToPendList(tcb);
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	0e 94 b6 09 	call	0x136c	; 0x136c <RTS_CORE_InsertTcbToPendList>
                RTS_CORE_UpdateTaskHightPrio();
    19ae:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
                RTS_CORE_SwitchToHiprioTask();
    19b2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <RTS_CORE_SwitchToHiprioTask>
    19b6:	33 c0       	rjmp	.+102    	; 0x1a1e <RTS_PendTask+0xec>
            }
        }
        else
        {
            if(tcb->curr_status == RTS_TASK_STATUS_READY) //从就绪态挂起
    19b8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ba:	fa 81       	ldd	r31, Y+2	; 0x02
    19bc:	83 81       	ldd	r24, Z+3	; 0x03
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	99 f4       	brne	.+38     	; 0x19e8 <RTS_PendTask+0xb6>
            {
                tcb->curr_status = RTS_TASK_STATUS_PEND;
    19c2:	e9 81       	ldd	r30, Y+1	; 0x01
    19c4:	fa 81       	ldd	r31, Y+2	; 0x02
    19c6:	84 e0       	ldi	r24, 0x04	; 4
    19c8:	83 83       	std	Z+3, r24	; 0x03
                tcb->prev_status = RTS_TASK_STATUS_READY;
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	84 83       	std	Z+4, r24	; 0x04
                RTS_CORE_RemoveTcbFromRdyList(tcb);      
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	0e 94 32 09 	call	0x1264	; 0x1264 <RTS_CORE_RemoveTcbFromRdyList>
                RTS_CORE_InsertTcbToPendList(tcb);
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	0e 94 b6 09 	call	0x136c	; 0x136c <RTS_CORE_InsertTcbToPendList>
                RTS_CORE_OsSchdule();
    19e2:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <RTS_CORE_OsSchdule>
    19e6:	1b c0       	rjmp	.+54     	; 0x1a1e <RTS_PendTask+0xec>
            }

            #if(RTS_CFG_DELAY_ENB > 0u)
            else if(tcb->curr_status == RTS_TASK_STATUS_DELAY) //从延时态挂起
    19e8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ea:	fa 81       	ldd	r31, Y+2	; 0x02
    19ec:	83 81       	ldd	r24, Z+3	; 0x03
    19ee:	82 30       	cpi	r24, 0x02	; 2
    19f0:	b1 f4       	brne	.+44     	; 0x1a1e <RTS_PendTask+0xec>
            {
                tcb->curr_status = RTS_TASK_STATUS_PEND;
    19f2:	e9 81       	ldd	r30, Y+1	; 0x01
    19f4:	fa 81       	ldd	r31, Y+2	; 0x02
    19f6:	84 e0       	ldi	r24, 0x04	; 4
    19f8:	83 83       	std	Z+3, r24	; 0x03
                tcb->prev_status = RTS_TASK_STATUS_DELAY;
    19fa:	e9 81       	ldd	r30, Y+1	; 0x01
    19fc:	fa 81       	ldd	r31, Y+2	; 0x02
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	84 83       	std	Z+4, r24	; 0x04
                RTS_CORE_RemoveTcbFromDlyList(tcb); //移除后，tcb的下一个指针未变，不影响tcb的下一个指向
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	0e 94 15 0b 	call	0x162a	; 0x162a <RTS_CORE_RemoveTcbFromDlyList>
                RTS_CORE_DlyListHeadRelocate(tcb);  //让延时链表头指向新的链表节点
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	0e 94 3e 0b 	call	0x167c	; 0x167c <RTS_CORE_DlyListHeadRelocate>
                RTS_CORE_InsertTcbToPendList(tcb);
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	0e 94 b6 09 	call	0x136c	; 0x136c <RTS_CORE_InsertTcbToPendList>
                RTS_CORE_OsSchdule();
    1a1a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <RTS_CORE_OsSchdule>
            }
            #endif
        }
        RTS_PORT_SwitchToNextTask();
    1a1e:	0e 94 9b 1b 	call	0x3736	; 0x3736 <RTS_PORT_SwitchToNextTask>
        
    }
    RTS_EXIT_CRITICAL
    1a22:	0f 90       	pop	r0
    1a24:	00 92 5f 00 	sts	0x005F, r0
}
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <RTS_ResumeTask>:


//根据tid恢复任务
void RTS_ResumeTask(u8_t tid)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <RTS_ResumeTask+0x6>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    TCB_t * tcb;
    RTS_ENTER_CRITICAL
    1a42:	00 90 5f 00 	lds	r0, 0x005F
    1a46:	0f 92       	push	r0
    1a48:	af e5       	ldi	r26, 0x5F	; 95
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ef e5       	ldi	r30, 0x5F	; 95
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 77       	andi	r24, 0x7F	; 127
    1a54:	8c 93       	st	X, r24
    RTS_CORE_GetTcbFromTid(tid,&tcb);
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9e 01       	movw	r18, r28
    1a5a:	2f 5f       	subi	r18, 0xFF	; 255
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	b9 01       	movw	r22, r18
    1a60:	0e 94 81 0b 	call	0x1702	; 0x1702 <RTS_CORE_GetTcbFromTid>
    if(tcb->curr_status == RTS_TASK_STATUS_PEND)
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	83 81       	ldd	r24, Z+3	; 0x03
    1a6a:	84 30       	cpi	r24, 0x04	; 4
    1a6c:	a1 f4       	brne	.+40     	; 0x1a96 <RTS_ResumeTask+0x62>
    {
        //从挂起态恢复到就绪态，这里不做超时处理，只是简单地处理为忽略中间挂起时间而直接进入就绪态
        tcb->curr_status = RTS_TASK_STATUS_READY;
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	83 83       	std	Z+3, r24	; 0x03
        tcb->prev_status = RTS_TASK_STATUS_PEND;
    1a76:	e9 81       	ldd	r30, Y+1	; 0x01
    1a78:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7a:	84 e0       	ldi	r24, 0x04	; 4
    1a7c:	84 83       	std	Z+4, r24	; 0x04
        RTS_CORE_RemoveTcbFromPendList(tcb);
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <RTS_CORE_RemoveTcbFromPendList>
        RTS_CORE_InsertTcbToRdyList(tcb);
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	0e 94 a7 08 	call	0x114e	; 0x114e <RTS_CORE_InsertTcbToRdyList>
        RTS_CORE_OsSchdule();
    1a8e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <RTS_CORE_OsSchdule>
        RTS_PORT_SwitchToNextTask();
    1a92:	0e 94 9b 1b 	call	0x3736	; 0x3736 <RTS_PORT_SwitchToNextTask>
    }
    RTS_EXIT_CRITICAL
    1a96:	0f 90       	pop	r0
    1a98:	00 92 5f 00 	sts	0x005F, r0
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <RTS_DelayTicks>:


//系统滴答延时函数
#if(RTS_CFG_DELAY_ENB > 0u)
void RTS_DelayTicks(u32_t ticks)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <RTS_DelayTicks+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <RTS_DelayTicks+0x8>
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	69 83       	std	Y+1, r22	; 0x01
    1ab6:	7a 83       	std	Y+2, r23	; 0x02
    1ab8:	8b 83       	std	Y+3, r24	; 0x03
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    if(ticks >= 2)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	a1 05       	cpc	r26, r1
    1aca:	b1 05       	cpc	r27, r1
    1acc:	b8 f1       	brcs	.+110    	; 0x1b3c <RTS_DelayTicks+0x94>
    {
        RTS_ENTER_CRITICAL
    1ace:	00 90 5f 00 	lds	r0, 0x005F
    1ad2:	0f 92       	push	r0
    1ad4:	af e5       	ldi	r26, 0x5F	; 95
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	ef e5       	ldi	r30, 0x5F	; 95
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 77       	andi	r24, 0x7F	; 127
    1ae0:	8c 93       	st	X, r24
        rts_gb_curr_task_tcb->dly_coun = ticks;
    1ae2:	e0 91 62 10 	lds	r30, 0x1062
    1ae6:	f0 91 63 10 	lds	r31, 0x1063
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	ab 81       	ldd	r26, Y+3	; 0x03
    1af0:	bc 81       	ldd	r27, Y+4	; 0x04
    1af2:	86 83       	std	Z+6, r24	; 0x06
    1af4:	97 83       	std	Z+7, r25	; 0x07
    1af6:	a0 87       	std	Z+8, r26	; 0x08
    1af8:	b1 87       	std	Z+9, r27	; 0x09
        RTS_CORE_RemoveTcbFromRdyList((TCB_t *)rts_gb_curr_task_tcb);
    1afa:	80 91 62 10 	lds	r24, 0x1062
    1afe:	90 91 63 10 	lds	r25, 0x1063
    1b02:	0e 94 32 09 	call	0x1264	; 0x1264 <RTS_CORE_RemoveTcbFromRdyList>
        RTS_CORE_InsertTcbToDlyList((TCB_t *)rts_gb_curr_task_tcb);
    1b06:	80 91 62 10 	lds	r24, 0x1062
    1b0a:	90 91 63 10 	lds	r25, 0x1063
    1b0e:	0e 94 25 0a 	call	0x144a	; 0x144a <RTS_CORE_InsertTcbToDlyList>
        rts_gb_curr_task_tcb->prev_status = RTS_TASK_STATUS_READY; //这里不进行运行态处理，因为只考虑单核处理器
    1b12:	e0 91 62 10 	lds	r30, 0x1062
    1b16:	f0 91 63 10 	lds	r31, 0x1063
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	84 83       	std	Z+4, r24	; 0x04
        rts_gb_curr_task_tcb->curr_status = RTS_TASK_STATUS_DELAY;
    1b1e:	e0 91 62 10 	lds	r30, 0x1062
    1b22:	f0 91 63 10 	lds	r31, 0x1063
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	83 83       	std	Z+3, r24	; 0x03
        RTS_CORE_UpdateTaskHightPrio();
    1b2a:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
        RTS_CORE_SwitchToHiprioTask();
    1b2e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <RTS_CORE_SwitchToHiprioTask>
        RTS_EXIT_CRITICAL
    1b32:	0f 90       	pop	r0
    1b34:	00 92 5f 00 	sts	0x005F, r0
        RTS_PORT_SwitchToNextTask();
    1b38:	0e 94 9b 1b 	call	0x3736	; 0x3736 <RTS_PORT_SwitchToNextTask>
    }
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <RTS_GetCurrTaskTid>:
#endif


//获取当前运行任务的tid
u8_t RTS_GetCurrTaskTid(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    return rts_gb_curr_task_tcb->tid;
    1b52:	e0 91 62 10 	lds	r30, 0x1062
    1b56:	f0 91 63 10 	lds	r31, 0x1063
    1b5a:	85 81       	ldd	r24, Z+5	; 0x05
}
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <RTS_GetCurrTaskPrio>:

//获取当前运行任务的优先级
u8_t RTS_GetCurrTaskPrio(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    return rts_gb_curr_task_tcb->prio;
    1b6a:	e0 91 62 10 	lds	r30, 0x1062
    1b6e:	f0 91 63 10 	lds	r31, 0x1063
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <RTS_ChangeTaskPrio>:

//改变任务优先级
void RTS_ChangeTaskPrio(u8_t tid, u8_t dst_prio)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <RTS_ChangeTaskPrio+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <RTS_ChangeTaskPrio+0x8>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	8b 83       	std	Y+3, r24	; 0x03
    1b88:	6c 83       	std	Y+4, r22	; 0x04
    TCB_t *tcb;
    RTS_ENTER_CRITICAL
    1b8a:	00 90 5f 00 	lds	r0, 0x005F
    1b8e:	0f 92       	push	r0
    1b90:	af e5       	ldi	r26, 0x5F	; 95
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ef e5       	ldi	r30, 0x5F	; 95
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	8f 77       	andi	r24, 0x7F	; 127
    1b9c:	8c 93       	st	X, r24
    RTS_CORE_GetTcbFromTid(tid,&tcb);
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9e 01       	movw	r18, r28
    1ba2:	2f 5f       	subi	r18, 0xFF	; 255
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba6:	b9 01       	movw	r22, r18
    1ba8:	0e 94 81 0b 	call	0x1702	; 0x1702 <RTS_CORE_GetTcbFromTid>
    if(tcb->prio != dst_prio)
    1bac:	e9 81       	ldd	r30, Y+1	; 0x01
    1bae:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb0:	92 81       	ldd	r25, Z+2	; 0x02
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	98 17       	cp	r25, r24
    1bb6:	f9 f0       	breq	.+62     	; 0x1bf6 <RTS_ChangeTaskPrio+0x7c>
    {
        if(tcb->curr_status != RTS_TASK_STATUS_SYNC)
    1bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bba:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbc:	83 81       	ldd	r24, Z+3	; 0x03
    1bbe:	88 30       	cpi	r24, 0x08	; 8
    1bc0:	d1 f0       	breq	.+52     	; 0x1bf6 <RTS_ChangeTaskPrio+0x7c>
        {
            //如果当前的TCB是处于就绪状态，则需要将优先级更改后的TCB插入到新的位置
            if(tcb->curr_status == RTS_TASK_STATUS_READY)
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	83 81       	ldd	r24, Z+3	; 0x03
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	89 f4       	brne	.+34     	; 0x1bee <RTS_ChangeTaskPrio+0x74>
            {
                RTS_CORE_RemoveTcbFromRdyList(tcb);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	0e 94 32 09 	call	0x1264	; 0x1264 <RTS_CORE_RemoveTcbFromRdyList>
                tcb->prio = dst_prio;
    1bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	82 83       	std	Z+2, r24	; 0x02
                RTS_CORE_InsertTcbToRdyList(tcb);
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	0e 94 a7 08 	call	0x114e	; 0x114e <RTS_CORE_InsertTcbToRdyList>
                RTS_CORE_UpdateTaskHightPrio();
    1be4:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
                RTS_CORE_SwitchToHiprioTask();
    1be8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <RTS_CORE_SwitchToHiprioTask>
    1bec:	04 c0       	rjmp	.+8      	; 0x1bf6 <RTS_ChangeTaskPrio+0x7c>
            }
            else
            {
                tcb->prio = dst_prio;
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	82 83       	std	Z+2, r24	; 0x02
            }
        }
    }
    RTS_EXIT_CRITICAL
    1bf6:	0f 90       	pop	r0
    1bf8:	00 92 5f 00 	sts	0x005F, r0
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <__vector_14>:



/*< RTS系统滴答定时器的中断服务函数 */
RTS_SYSTICK_HANDLER
{
    1c0a:	1f 92       	push	r1
    1c0c:	0f 92       	push	r0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	0f 92       	push	r0
    1c12:	00 90 5b 00 	lds	r0, 0x005B
    1c16:	0f 92       	push	r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	2f 93       	push	r18
    1c1c:	3f 93       	push	r19
    1c1e:	4f 93       	push	r20
    1c20:	5f 93       	push	r21
    1c22:	6f 93       	push	r22
    1c24:	7f 93       	push	r23
    1c26:	8f 93       	push	r24
    1c28:	9f 93       	push	r25
    1c2a:	af 93       	push	r26
    1c2c:	bf 93       	push	r27
    1c2e:	ef 93       	push	r30
    1c30:	ff 93       	push	r31
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <__vector_14+0x2e>
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <__vector_14+0x30>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
   #if(RTS_CFG_DELAY_ENB > 0u)
   TCB_t *dly_tcb;
   TCB_t *dly_tcb_next;
   #endif
   ++rts_gb_systicks;
    1c3e:	80 91 5c 10 	lds	r24, 0x105C
    1c42:	90 91 5d 10 	lds	r25, 0x105D
    1c46:	a0 91 5e 10 	lds	r26, 0x105E
    1c4a:	b0 91 5f 10 	lds	r27, 0x105F
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	a1 1d       	adc	r26, r1
    1c52:	b1 1d       	adc	r27, r1
    1c54:	80 93 5c 10 	sts	0x105C, r24
    1c58:	90 93 5d 10 	sts	0x105D, r25
    1c5c:	a0 93 5e 10 	sts	0x105E, r26
    1c60:	b0 93 5f 10 	sts	0x105F, r27
   PORTC = ~PORTC;
    1c64:	a5 e3       	ldi	r26, 0x35	; 53
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e5 e3       	ldi	r30, 0x35	; 53
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 95       	com	r24
    1c70:	8c 93       	st	X, r24

   RTS_SYSTICK_HANDLER_ENTER_DO
   if(rts_gb_task_switch_on == 1)
    1c72:	80 91 b4 02 	lds	r24, 0x02B4
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <__vector_14+0x72>
    1c7a:	55 c0       	rjmp	.+170    	; 0x1d26 <__vector_14+0x11c>
   {
        RTS_CORE_SwitchToNextTask();
    1c7c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <RTS_CORE_SwitchToNextTask>
        #if(RTS_CFG_DELAY_ENB > 0u)
        RTS_CORE_GetDlyListHead(&dly_tcb);
    1c80:	ce 01       	movw	r24, r28
    1c82:	03 96       	adiw	r24, 0x03	; 3
    1c84:	0e 94 6d 0b 	call	0x16da	; 0x16da <RTS_CORE_GetDlyListHead>
        if(rts_gb_systicks == dly_tcb->dly_coun)  //如果延时时间到了，就恢复任务
    1c88:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8c:	26 81       	ldd	r18, Z+6	; 0x06
    1c8e:	37 81       	ldd	r19, Z+7	; 0x07
    1c90:	40 85       	ldd	r20, Z+8	; 0x08
    1c92:	51 85       	ldd	r21, Z+9	; 0x09
    1c94:	80 91 5c 10 	lds	r24, 0x105C
    1c98:	90 91 5d 10 	lds	r25, 0x105D
    1c9c:	a0 91 5e 10 	lds	r26, 0x105E
    1ca0:	b0 91 5f 10 	lds	r27, 0x105F
    1ca4:	28 17       	cp	r18, r24
    1ca6:	39 07       	cpc	r19, r25
    1ca8:	4a 07       	cpc	r20, r26
    1caa:	5b 07       	cpc	r21, r27
    1cac:	e1 f5       	brne	.+120    	; 0x1d26 <__vector_14+0x11c>
    1cae:	20 c0       	rjmp	.+64     	; 0x1cf0 <__vector_14+0xe6>
        {
            //恢复所有延时时间到达的任务
            while(dly_tcb->dly_coun == rts_gb_systicks)  
            {
                dly_tcb->dly_coun = 0;
    1cb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb4:	16 82       	std	Z+6, r1	; 0x06
    1cb6:	17 82       	std	Z+7, r1	; 0x07
    1cb8:	10 86       	std	Z+8, r1	; 0x08
    1cba:	11 86       	std	Z+9, r1	; 0x09
                dly_tcb_next = dly_tcb->next;
    1cbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc0:	84 85       	ldd	r24, Z+12	; 0x0c
    1cc2:	95 85       	ldd	r25, Z+13	; 0x0d
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
                RTS_CORE_RemoveTcbFromDlyList(dly_tcb);
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	0e 94 15 0b 	call	0x162a	; 0x162a <RTS_CORE_RemoveTcbFromDlyList>
                dly_tcb->curr_status = RTS_TASK_STATUS_READY;
    1cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	83 83       	std	Z+3, r24	; 0x03
                dly_tcb->prev_status = RTS_TASK_STATUS_DELAY;
    1cd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cda:	fc 81       	ldd	r31, Y+4	; 0x04
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	84 83       	std	Z+4, r24	; 0x04
                RTS_CORE_InsertTcbToRdyList(dly_tcb);
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	0e 94 a7 08 	call	0x114e	; 0x114e <RTS_CORE_InsertTcbToRdyList>
                dly_tcb = dly_tcb_next;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	9c 83       	std	Y+4, r25	; 0x04
    1cee:	8b 83       	std	Y+3, r24	; 0x03
        #if(RTS_CFG_DELAY_ENB > 0u)
        RTS_CORE_GetDlyListHead(&dly_tcb);
        if(rts_gb_systicks == dly_tcb->dly_coun)  //如果延时时间到了，就恢复任务
        {
            //恢复所有延时时间到达的任务
            while(dly_tcb->dly_coun == rts_gb_systicks)  
    1cf0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf4:	26 81       	ldd	r18, Z+6	; 0x06
    1cf6:	37 81       	ldd	r19, Z+7	; 0x07
    1cf8:	40 85       	ldd	r20, Z+8	; 0x08
    1cfa:	51 85       	ldd	r21, Z+9	; 0x09
    1cfc:	80 91 5c 10 	lds	r24, 0x105C
    1d00:	90 91 5d 10 	lds	r25, 0x105D
    1d04:	a0 91 5e 10 	lds	r26, 0x105E
    1d08:	b0 91 5f 10 	lds	r27, 0x105F
    1d0c:	28 17       	cp	r18, r24
    1d0e:	39 07       	cpc	r19, r25
    1d10:	4a 07       	cpc	r20, r26
    1d12:	5b 07       	cpc	r21, r27
    1d14:	69 f2       	breq	.-102    	; 0x1cb0 <__vector_14+0xa6>
                dly_tcb->prev_status = RTS_TASK_STATUS_DELAY;
                RTS_CORE_InsertTcbToRdyList(dly_tcb);
                dly_tcb = dly_tcb_next;
            }
            //转移延时链表上的控制块后，将延时链表指针指向下一个
            RTS_CORE_SetDlyListHead(dly_tcb);
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <RTS_CORE_SetDlyListHead>
            RTS_CORE_UpdateTaskHightPrio();
    1d1e:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
            RTS_CORE_SwitchToHiprioTask();
    1d22:	0e 94 bc 0b 	call	0x1778	; 0x1778 <RTS_CORE_SwitchToHiprioTask>
        }
        #endif
        
    }
    //统计CPU利用率
    if(rts_gb_curr_task_tcb->prio == RTS_CFG_MAX_MAX_PRIORITIES)
    1d26:	e0 91 62 10 	lds	r30, 0x1062
    1d2a:	f0 91 63 10 	lds	r31, 0x1063
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	86 30       	cpi	r24, 0x06	; 6
    1d32:	49 f4       	brne	.+18     	; 0x1d46 <__vector_14+0x13c>
    {  
       rts_gb_task_idle_coun ++;
    1d34:	80 91 b5 02 	lds	r24, 0x02B5
    1d38:	90 91 b6 02 	lds	r25, 0x02B6
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	90 93 b6 02 	sts	0x02B6, r25
    1d42:	80 93 b5 02 	sts	0x02B5, r24
    }
    rts_gb_task_coun ++;
    1d46:	80 91 b7 02 	lds	r24, 0x02B7
    1d4a:	90 91 b8 02 	lds	r25, 0x02B8
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	90 93 b8 02 	sts	0x02B8, r25
    1d54:	80 93 b7 02 	sts	0x02B7, r24
    if(rts_gb_task_coun >= RTS_CFG_GET_CPU_RATE_COUNT)
    1d58:	80 91 b7 02 	lds	r24, 0x02B7
    1d5c:	90 91 b8 02 	lds	r25, 0x02B8
    1d60:	88 3c       	cpi	r24, 0xC8	; 200
    1d62:	91 05       	cpc	r25, r1
    1d64:	60 f0       	brcs	.+24     	; 0x1d7e <__vector_14+0x174>
    {
        rts_gb_task_coun = 1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	90 93 b8 02 	sts	0x02B8, r25
    1d6e:	80 93 b7 02 	sts	0x02B7, r24
        rts_gb_task_idle_coun = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	90 93 b6 02 	sts	0x02B6, r25
    1d7a:	80 93 b5 02 	sts	0x02B5, r24
    }

    RTS_SYSTICK_HANDLER_EXIT_DO
    RTS_SYSTICK_CLEAN_INT_FLAG
    1d7e:	af e5       	ldi	r26, 0x5F	; 95
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ef e5       	ldi	r30, 0x5F	; 95
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8f 77       	andi	r24, 0x7F	; 127
    1d8a:	8c 93       	st	X, r24
    1d8c:	ec e4       	ldi	r30, 0x4C	; 76
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	9f ee       	ldi	r25, 0xEF	; 239
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	af e5       	ldi	r26, 0x5F	; 95
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ef e5       	ldi	r30, 0x5F	; 95
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 68       	ori	r24, 0x80	; 128
    1da4:	8c 93       	st	X, r24
    RTS_PORT_SwitchToNextTask();
    1da6:	0e 94 9b 1b 	call	0x3736	; 0x3736 <RTS_PORT_SwitchToNextTask>
   
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	0f 90       	pop	r0
    1dd0:	00 92 5b 00 	sts	0x005B, r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	0f 90       	pop	r0
    1dda:	1f 90       	pop	r1
    1ddc:	18 95       	reti

00001dde <RTS_GetCpuUtilizationRate>:


/*< 获取CPU利用率   */
float32_t RTS_GetCpuUtilizationRate(void)
{
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    return rts_gb_cpu_utilization_rate = 1.000001 - (float32_t)rts_gb_task_idle_coun/(float32_t)rts_gb_task_coun;
    1dee:	80 91 b5 02 	lds	r24, 0x02B5
    1df2:	90 91 b6 02 	lds	r25, 0x02B6
    1df6:	cc 01       	movw	r24, r24
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__floatunsisf>
    1e04:	7b 01       	movw	r14, r22
    1e06:	8c 01       	movw	r16, r24
    1e08:	80 91 b7 02 	lds	r24, 0x02B7
    1e0c:	90 91 b8 02 	lds	r25, 0x02B8
    1e10:	cc 01       	movw	r24, r24
    1e12:	a0 e0       	ldi	r26, 0x00	; 0
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__floatunsisf>
    1e1e:	9b 01       	movw	r18, r22
    1e20:	ac 01       	movw	r20, r24
    1e22:	c8 01       	movw	r24, r16
    1e24:	b7 01       	movw	r22, r14
    1e26:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <__divsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 01       	movw	r18, r24
    1e30:	ad 01       	movw	r20, r26
    1e32:	68 e0       	ldi	r22, 0x08	; 8
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	80 e8       	ldi	r24, 0x80	; 128
    1e38:	9f e3       	ldi	r25, 0x3F	; 63
    1e3a:	0e 94 07 1c 	call	0x380e	; 0x380e <__subsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	80 93 b9 02 	sts	0x02B9, r24
    1e46:	90 93 ba 02 	sts	0x02BA, r25
    1e4a:	a0 93 bb 02 	sts	0x02BB, r26
    1e4e:	b0 93 bc 02 	sts	0x02BC, r27
    1e52:	80 91 b9 02 	lds	r24, 0x02B9
    1e56:	90 91 ba 02 	lds	r25, 0x02BA
    1e5a:	a0 91 bb 02 	lds	r26, 0x02BB
    1e5e:	b0 91 bc 02 	lds	r27, 0x02BC
}
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	1f 91       	pop	r17
    1e6c:	0f 91       	pop	r16
    1e6e:	ff 90       	pop	r15
    1e70:	ef 90       	pop	r14
    1e72:	08 95       	ret

00001e74 <RTS_TurnOffSchdule>:


/*< 关闭任务调度器   */
void RTS_TurnOffSchdule(void)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    RTS_ENTER_CRITICAL
    1e7c:	00 90 5f 00 	lds	r0, 0x005F
    1e80:	0f 92       	push	r0
    1e82:	af e5       	ldi	r26, 0x5F	; 95
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	ef e5       	ldi	r30, 0x5F	; 95
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8f 77       	andi	r24, 0x7F	; 127
    1e8e:	8c 93       	st	X, r24
    rts_gb_task_switch_on = 0;
    1e90:	10 92 b4 02 	sts	0x02B4, r1
    RTS_EXIT_CRITICAL
    1e94:	0f 90       	pop	r0
    1e96:	00 92 5f 00 	sts	0x005F, r0
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <RTS_TurnOnSchdule>:

/*< 开启任务调度器   */
void RTS_TurnOnSchdule(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    RTS_ENTER_CRITICAL
    1ea8:	00 90 5f 00 	lds	r0, 0x005F
    1eac:	0f 92       	push	r0
    1eae:	af e5       	ldi	r26, 0x5F	; 95
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	ef e5       	ldi	r30, 0x5F	; 95
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	8f 77       	andi	r24, 0x7F	; 127
    1eba:	8c 93       	st	X, r24
    rts_gb_task_switch_on = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	80 93 b4 02 	sts	0x02B4, r24
    RTS_EXIT_CRITICAL
    1ec2:	0f 90       	pop	r0
    1ec4:	00 92 5f 00 	sts	0x005F, r0
}
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <RTS_OS_Init>:

#include "rts_os.h"

//RTS_OS初始化
void RTS_OS_Init(void (*idle_task_hook)(void *))
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <RTS_OS_Init+0x6>
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
    RTS_DISABLE_INTERRUPTS
    1edc:	af e5       	ldi	r26, 0x5F	; 95
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ef e5       	ldi	r30, 0x5F	; 95
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8f 77       	andi	r24, 0x7F	; 127
    1ee8:	8c 93       	st	X, r24
    MemAllocInit();
    1eea:	0e 94 8b 02 	call	0x516	; 0x516 <MemAllocInit>
    RTS_CORE_Init();
    1eee:	0e 94 f2 06 	call	0xde4	; 0xde4 <RTS_CORE_Init>
    RTS_TASK_IdleTaskInit(idle_task_hook);
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <RTS_TASK_IdleTaskInit>
    rts_gb_systicks = 0;
    1efa:	10 92 5c 10 	sts	0x105C, r1
    1efe:	10 92 5d 10 	sts	0x105D, r1
    1f02:	10 92 5e 10 	sts	0x105E, r1
    1f06:	10 92 5f 10 	sts	0x105F, r1
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <RTS_OS_Start>:


//RTS_OS启动
void RTS_OS_Start(void)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    RTS_CORE_UpdateTaskHightPrio();
    1f1c:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_GetHightPrioTcb((TCB_t **)(&rts_gb_curr_task_tcb));
    1f20:	82 e6       	ldi	r24, 0x62	; 98
    1f22:	90 e1       	ldi	r25, 0x10	; 16
    1f24:	0e 94 9e 0b 	call	0x173c	; 0x173c <RTS_CORE_GetHightPrioTcb>
    rts_gb_prev_task_tcb = rts_gb_curr_task_tcb;
    1f28:	80 91 62 10 	lds	r24, 0x1062
    1f2c:	90 91 63 10 	lds	r25, 0x1063
    1f30:	90 93 61 10 	sts	0x1061, r25
    1f34:	80 93 60 10 	sts	0x1060, r24
    if(RTS_CORE_GetHiprioTcbNum() > 1u)
        RTS_SYSTICK_ENABLE
    else
        RTS_SYSTICK_DISABLE
    #endif
    RTS_PORT_SystickInit();
    1f38:	0e 94 d5 04 	call	0x9aa	; 0x9aa <RTS_PORT_SystickInit>
    RTS_ENABLE_INTERRUPTS  //开启总中断
    1f3c:	af e5       	ldi	r26, 0x5F	; 95
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	ef e5       	ldi	r30, 0x5F	; 95
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	80 68       	ori	r24, 0x80	; 128
    1f48:	8c 93       	st	X, r24
    RTS_SYSTICK_ENABLE
    1f4a:	a7 e5       	ldi	r26, 0x57	; 87
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e7 e5       	ldi	r30, 0x57	; 87
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	84 60       	ori	r24, 0x04	; 4
    1f56:	8c 93       	st	X, r24
    RTS_PORT_SwitchToNextTask(); 
    1f58:	0e 94 9b 1b 	call	0x3736	; 0x3736 <RTS_PORT_SwitchToNextTask>
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <InsertTcbToSemaphoreList>:

#if (RTS_CFG_SEMAPHORE_ENB > 0u)

/*< 将TCB从尾部插入到信号量链表中   */
static void InsertTcbToSemaphoreList(TCB_t *tcb, semaphore_t *semaph)
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <InsertTcbToSemaphoreList+0x6>
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <InsertTcbToSemaphoreList+0x8>
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	7c 83       	std	Y+4, r23	; 0x04
    1f74:	6b 83       	std	Y+3, r22	; 0x03
   tcb->prev  = semaph->tcb.prev;
    1f76:	eb 81       	ldd	r30, Y+3	; 0x03
    1f78:	fc 81       	ldd	r31, Y+4	; 0x04
    1f7a:	86 85       	ldd	r24, Z+14	; 0x0e
    1f7c:	97 85       	ldd	r25, Z+15	; 0x0f
    1f7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f80:	fa 81       	ldd	r31, Y+2	; 0x02
    1f82:	97 87       	std	Z+15, r25	; 0x0f
    1f84:	86 87       	std	Z+14, r24	; 0x0e
   tcb->next  = &semaph->tcb;
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8e:	95 87       	std	Z+13, r25	; 0x0d
    1f90:	84 87       	std	Z+12, r24	; 0x0c
   semaph->tcb.prev->next = tcb;
    1f92:	eb 81       	ldd	r30, Y+3	; 0x03
    1f94:	fc 81       	ldd	r31, Y+4	; 0x04
    1f96:	06 84       	ldd	r0, Z+14	; 0x0e
    1f98:	f7 85       	ldd	r31, Z+15	; 0x0f
    1f9a:	e0 2d       	mov	r30, r0
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	95 87       	std	Z+13, r25	; 0x0d
    1fa2:	84 87       	std	Z+12, r24	; 0x0c
   semaph->tcb.prev = tcb;
    1fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	97 87       	std	Z+15, r25	; 0x0f
    1fae:	86 87       	std	Z+14, r24	; 0x0e
   semaph->tcb_num ++;
    1fb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fb4:	80 89       	ldd	r24, Z+16	; 0x10
    1fb6:	91 89       	ldd	r25, Z+17	; 0x11
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	eb 81       	ldd	r30, Y+3	; 0x03
    1fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fbe:	91 8b       	std	Z+17, r25	; 0x11
    1fc0:	80 8b       	std	Z+16, r24	; 0x10
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <RemoveTcbFromSmeaphoreList>:

/*< 将TCB从信号量链表头部删除   */
static void RemoveTcbFromSmeaphoreList(TCB_t **tcb,semaphore_t* semaph)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <RemoveTcbFromSmeaphoreList+0x6>
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <RemoveTcbFromSmeaphoreList+0x8>
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	7c 83       	std	Y+4, r23	; 0x04
    1fe2:	6b 83       	std	Y+3, r22	; 0x03
   if(semaph->tcb_num > 0u)
    1fe4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe8:	80 89       	ldd	r24, Z+16	; 0x10
    1fea:	91 89       	ldd	r25, Z+17	; 0x11
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	41 f1       	breq	.+80     	; 0x2040 <RemoveTcbFromSmeaphoreList+0x70>
   {
     (*tcb) = semaph->tcb.next;
    1ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff4:	84 85       	ldd	r24, Z+12	; 0x0c
    1ff6:	95 85       	ldd	r25, Z+13	; 0x0d
    1ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
     semaph->tcb.next->next->prev = &semaph->tcb;
    2000:	eb 81       	ldd	r30, Y+3	; 0x03
    2002:	fc 81       	ldd	r31, Y+4	; 0x04
    2004:	04 84       	ldd	r0, Z+12	; 0x0c
    2006:	f5 85       	ldd	r31, Z+13	; 0x0d
    2008:	e0 2d       	mov	r30, r0
    200a:	04 84       	ldd	r0, Z+12	; 0x0c
    200c:	f5 85       	ldd	r31, Z+13	; 0x0d
    200e:	e0 2d       	mov	r30, r0
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	97 87       	std	Z+15, r25	; 0x0f
    2016:	86 87       	std	Z+14, r24	; 0x0e
     semaph->tcb.next = semaph->tcb.next->next;
    2018:	eb 81       	ldd	r30, Y+3	; 0x03
    201a:	fc 81       	ldd	r31, Y+4	; 0x04
    201c:	04 84       	ldd	r0, Z+12	; 0x0c
    201e:	f5 85       	ldd	r31, Z+13	; 0x0d
    2020:	e0 2d       	mov	r30, r0
    2022:	84 85       	ldd	r24, Z+12	; 0x0c
    2024:	95 85       	ldd	r25, Z+13	; 0x0d
    2026:	eb 81       	ldd	r30, Y+3	; 0x03
    2028:	fc 81       	ldd	r31, Y+4	; 0x04
    202a:	95 87       	std	Z+13, r25	; 0x0d
    202c:	84 87       	std	Z+12, r24	; 0x0c
     semaph->tcb_num -- ;
    202e:	eb 81       	ldd	r30, Y+3	; 0x03
    2030:	fc 81       	ldd	r31, Y+4	; 0x04
    2032:	80 89       	ldd	r24, Z+16	; 0x10
    2034:	91 89       	ldd	r25, Z+17	; 0x11
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	eb 81       	ldd	r30, Y+3	; 0x03
    203a:	fc 81       	ldd	r31, Y+4	; 0x04
    203c:	91 8b       	std	Z+17, r25	; 0x11
    203e:	80 8b       	std	Z+16, r24	; 0x10
   }
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <RTS_CreateSemaphore>:

/*< 动态创建信号量   */
semaphore_t* RTS_CreateSemaphore(s16_t initVal)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <RTS_CreateSemaphore+0x6>
    2054:	00 d0       	rcall	.+0      	; 0x2056 <RTS_CreateSemaphore+0x8>
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
   semaphore_t *semaph = NULL;
    205e:	1a 82       	std	Y+2, r1	; 0x02
    2060:	19 82       	std	Y+1, r1	; 0x01
   RTS_ENTER_CRITICAL
    2062:	00 90 5f 00 	lds	r0, 0x005F
    2066:	0f 92       	push	r0
    2068:	af e5       	ldi	r26, 0x5F	; 95
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	ef e5       	ldi	r30, 0x5F	; 95
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8f 77       	andi	r24, 0x7F	; 127
    2074:	8c 93       	st	X, r24
   semaph = (semaphore_t*)MemAlloc(sizeof(semaphore_t));  /*< 申请信号量所需的内存  */
    2076:	84 e1       	ldi	r24, 0x14	; 20
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	0e 94 13 03 	call	0x626	; 0x626 <MemAlloc>
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
   if(semaph != NULL)
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	b1 f0       	breq	.+44     	; 0x20b6 <RTS_CreateSemaphore+0x68>
   {
     semaph->tcb.next = &semaph->tcb;
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	95 87       	std	Z+13, r25	; 0x0d
    2094:	84 87       	std	Z+12, r24	; 0x0c
     semaph->tcb.prev = &semaph->tcb;
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	e9 81       	ldd	r30, Y+1	; 0x01
    209c:	fa 81       	ldd	r31, Y+2	; 0x02
    209e:	97 87       	std	Z+15, r25	; 0x0f
    20a0:	86 87       	std	Z+14, r24	; 0x0e
     semaph->tcb_num   = 0u;
    20a2:	e9 81       	ldd	r30, Y+1	; 0x01
    20a4:	fa 81       	ldd	r31, Y+2	; 0x02
    20a6:	11 8a       	std	Z+17, r1	; 0x11
    20a8:	10 8a       	std	Z+16, r1	; 0x10
     semaph->value = initVal;
    20aa:	e9 81       	ldd	r30, Y+1	; 0x01
    20ac:	fa 81       	ldd	r31, Y+2	; 0x02
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	93 8b       	std	Z+19, r25	; 0x13
    20b4:	82 8b       	std	Z+18, r24	; 0x12
   }
   RTS_EXIT_CRITICAL
    20b6:	0f 90       	pop	r0
    20b8:	00 92 5f 00 	sts	0x005F, r0
   return semaph;
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <RTS_DestorySemaphore>:

/*< 动态销毁信号量   */
void RTS_DestorySemaphore(semaphore_t *semaph)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	00 d0       	rcall	.+0      	; 0x20d4 <RTS_DestorySemaphore+0x6>
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01
  RTS_ENTER_CRITICAL
    20dc:	00 90 5f 00 	lds	r0, 0x005F
    20e0:	0f 92       	push	r0
    20e2:	af e5       	ldi	r26, 0x5F	; 95
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ef e5       	ldi	r30, 0x5F	; 95
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	8f 77       	andi	r24, 0x7F	; 127
    20ee:	8c 93       	st	X, r24
   if(semaph != NULL)
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	21 f0       	breq	.+8      	; 0x2100 <RTS_DestorySemaphore+0x32>
   {
     MemFree(semaph);
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	0e 94 07 04 	call	0x80e	; 0x80e <MemFree>
   }
  RTS_EXIT_CRITICAL
    2100:	0f 90       	pop	r0
    2102:	00 92 5f 00 	sts	0x005F, r0
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <RTS_InitSemaphore>:

/*< 初始化信号量   */
void RTS_InitSemaphore(semaphore_t* semaph, s16_t initVal)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <RTS_InitSemaphore+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <RTS_InitSemaphore+0x8>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	7c 83       	std	Y+4, r23	; 0x04
    2122:	6b 83       	std	Y+3, r22	; 0x03
  RTS_ENTER_CRITICAL
    2124:	00 90 5f 00 	lds	r0, 0x005F
    2128:	0f 92       	push	r0
    212a:	af e5       	ldi	r26, 0x5F	; 95
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ef e5       	ldi	r30, 0x5F	; 95
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8f 77       	andi	r24, 0x7F	; 127
    2136:	8c 93       	st	X, r24
  semaph->value = initVal;
    2138:	e9 81       	ldd	r30, Y+1	; 0x01
    213a:	fa 81       	ldd	r31, Y+2	; 0x02
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	93 8b       	std	Z+19, r25	; 0x13
    2142:	82 8b       	std	Z+18, r24	; 0x12
  semaph->tcb.next  = &semaph->tcb;
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	e9 81       	ldd	r30, Y+1	; 0x01
    214a:	fa 81       	ldd	r31, Y+2	; 0x02
    214c:	95 87       	std	Z+13, r25	; 0x0d
    214e:	84 87       	std	Z+12, r24	; 0x0c
  semaph->tcb.prev  = &semaph->tcb;
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	e9 81       	ldd	r30, Y+1	; 0x01
    2156:	fa 81       	ldd	r31, Y+2	; 0x02
    2158:	97 87       	std	Z+15, r25	; 0x0f
    215a:	86 87       	std	Z+14, r24	; 0x0e
  semaph->tcb_num   = 0u;
    215c:	e9 81       	ldd	r30, Y+1	; 0x01
    215e:	fa 81       	ldd	r31, Y+2	; 0x02
    2160:	11 8a       	std	Z+17, r1	; 0x11
    2162:	10 8a       	std	Z+16, r1	; 0x10
  RTS_EXIT_CRITICAL
    2164:	0f 90       	pop	r0
    2166:	00 92 5f 00 	sts	0x005F, r0
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <RTS_WaitSemaphore>:


/*< 等待信号量   */
void RTS_WaitSemaphore(semaphore_t* semaph)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <RTS_WaitSemaphore+0x6>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01
  /*< 如果当前信号量小于0则将该任务移到该信号量链表中 */
  RTS_ENTER_CRITICAL
    2186:	00 90 5f 00 	lds	r0, 0x005F
    218a:	0f 92       	push	r0
    218c:	af e5       	ldi	r26, 0x5F	; 95
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	ef e5       	ldi	r30, 0x5F	; 95
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8f 77       	andi	r24, 0x7F	; 127
    2198:	8c 93       	st	X, r24
  rts_gb_curr_task_tcb->curr_status = RTS_TASK_STATUS_SYNC;
    219a:	e0 91 62 10 	lds	r30, 0x1062
    219e:	f0 91 63 10 	lds	r31, 0x1063
    21a2:	88 e0       	ldi	r24, 0x08	; 8
    21a4:	83 83       	std	Z+3, r24	; 0x03
  rts_gb_curr_task_tcb->prev_status = RTS_TASK_STATUS_READY;
    21a6:	e0 91 62 10 	lds	r30, 0x1062
    21aa:	f0 91 63 10 	lds	r31, 0x1063
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	84 83       	std	Z+4, r24	; 0x04
  --semaph->value;
    21b2:	e9 81       	ldd	r30, Y+1	; 0x01
    21b4:	fa 81       	ldd	r31, Y+2	; 0x02
    21b6:	82 89       	ldd	r24, Z+18	; 0x12
    21b8:	93 89       	ldd	r25, Z+19	; 0x13
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	e9 81       	ldd	r30, Y+1	; 0x01
    21be:	fa 81       	ldd	r31, Y+2	; 0x02
    21c0:	93 8b       	std	Z+19, r25	; 0x13
    21c2:	82 8b       	std	Z+18, r24	; 0x12
  if(semaph->value < 0)
    21c4:	e9 81       	ldd	r30, Y+1	; 0x01
    21c6:	fa 81       	ldd	r31, Y+2	; 0x02
    21c8:	82 89       	ldd	r24, Z+18	; 0x12
    21ca:	93 89       	ldd	r25, Z+19	; 0x13
    21cc:	99 23       	and	r25, r25
    21ce:	ac f4       	brge	.+42     	; 0x21fa <RTS_WaitSemaphore+0x82>
  {
    RTS_CORE_RemoveTcbFromRdyList((TCB_t *)rts_gb_curr_task_tcb);
    21d0:	80 91 62 10 	lds	r24, 0x1062
    21d4:	90 91 63 10 	lds	r25, 0x1063
    21d8:	0e 94 32 09 	call	0x1264	; 0x1264 <RTS_CORE_RemoveTcbFromRdyList>
    InsertTcbToSemaphoreList((TCB_t *)rts_gb_curr_task_tcb,semaph);
    21dc:	80 91 62 10 	lds	r24, 0x1062
    21e0:	90 91 63 10 	lds	r25, 0x1063
    21e4:	29 81       	ldd	r18, Y+1	; 0x01
    21e6:	3a 81       	ldd	r19, Y+2	; 0x02
    21e8:	b9 01       	movw	r22, r18
    21ea:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <InsertTcbToSemaphoreList>
    RTS_CORE_UpdateTaskHightPrio();
    21ee:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_SwitchToHiprioTask();
    21f2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <RTS_CORE_SwitchToHiprioTask>
    RTS_PORT_SwitchToNextTask();
    21f6:	0e 94 9b 1b 	call	0x3736	; 0x3736 <RTS_PORT_SwitchToNextTask>
  }
  RTS_EXIT_CRITICAL
    21fa:	0f 90       	pop	r0
    21fc:	00 92 5f 00 	sts	0x005F, r0
}
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <RTS_PostSemaphore>:


/*< 释放信号量   */
void RTS_PostSemaphore(semaphore_t* semaph)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <RTS_PostSemaphore+0x6>
    2210:	00 d0       	rcall	.+0      	; 0x2212 <RTS_PostSemaphore+0x8>
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	8b 83       	std	Y+3, r24	; 0x03
  TCB_t *tcb=NULL;
    221a:	1a 82       	std	Y+2, r1	; 0x02
    221c:	19 82       	std	Y+1, r1	; 0x01
  RTS_ENTER_CRITICAL
    221e:	00 90 5f 00 	lds	r0, 0x005F
    2222:	0f 92       	push	r0
    2224:	af e5       	ldi	r26, 0x5F	; 95
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	ef e5       	ldi	r30, 0x5F	; 95
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	8f 77       	andi	r24, 0x7F	; 127
    2230:	8c 93       	st	X, r24
  rts_gb_curr_task_tcb->curr_status = RTS_TASK_STATUS_READY;
    2232:	e0 91 62 10 	lds	r30, 0x1062
    2236:	f0 91 63 10 	lds	r31, 0x1063
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	83 83       	std	Z+3, r24	; 0x03
  rts_gb_curr_task_tcb->prev_status = RTS_TASK_STATUS_SYNC;
    223e:	e0 91 62 10 	lds	r30, 0x1062
    2242:	f0 91 63 10 	lds	r31, 0x1063
    2246:	88 e0       	ldi	r24, 0x08	; 8
    2248:	84 83       	std	Z+4, r24	; 0x04
  ++semaph->value;
    224a:	eb 81       	ldd	r30, Y+3	; 0x03
    224c:	fc 81       	ldd	r31, Y+4	; 0x04
    224e:	82 89       	ldd	r24, Z+18	; 0x12
    2250:	93 89       	ldd	r25, Z+19	; 0x13
    2252:	01 96       	adiw	r24, 0x01	; 1
    2254:	eb 81       	ldd	r30, Y+3	; 0x03
    2256:	fc 81       	ldd	r31, Y+4	; 0x04
    2258:	93 8b       	std	Z+19, r25	; 0x13
    225a:	82 8b       	std	Z+18, r24	; 0x12
  if(semaph->value <= 0)
    225c:	eb 81       	ldd	r30, Y+3	; 0x03
    225e:	fc 81       	ldd	r31, Y+4	; 0x04
    2260:	82 89       	ldd	r24, Z+18	; 0x12
    2262:	93 89       	ldd	r25, Z+19	; 0x13
    2264:	18 16       	cp	r1, r24
    2266:	19 06       	cpc	r1, r25
    2268:	8c f0       	brlt	.+34     	; 0x228c <RTS_PostSemaphore+0x82>
  {
    RemoveTcbFromSmeaphoreList(&tcb,semaph);
    226a:	2b 81       	ldd	r18, Y+3	; 0x03
    226c:	3c 81       	ldd	r19, Y+4	; 0x04
    226e:	ce 01       	movw	r24, r28
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	b9 01       	movw	r22, r18
    2274:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <RemoveTcbFromSmeaphoreList>
    RTS_CORE_InsertTcbToRdyList(tcb);
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	0e 94 a7 08 	call	0x114e	; 0x114e <RTS_CORE_InsertTcbToRdyList>
    RTS_CORE_UpdateTaskHightPrio();
    2280:	0e 94 01 07 	call	0xe02	; 0xe02 <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_SwitchToHiprioTask();
    2284:	0e 94 bc 0b 	call	0x1778	; 0x1778 <RTS_CORE_SwitchToHiprioTask>
    RTS_PORT_SwitchToNextTask();
    2288:	0e 94 9b 1b 	call	0x3736	; 0x3736 <RTS_PORT_SwitchToNextTask>
  }
  RTS_EXIT_CRITICAL
    228c:	0f 90       	pop	r0
    228e:	00 92 5f 00 	sts	0x005F, r0
}
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <_transmit_data>:
/**-------------------------------*/
};


static void _transmit_data(struct _usart *mythis,const u8_t data)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <_transmit_data+0x6>
    22a6:	0f 92       	push	r0
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	6b 83       	std	Y+3, r22	; 0x03

    while ( !( (*mythis->ux_cofg.reg_ucsra) & (1<<5)) )
    22b2:	e9 81       	ldd	r30, Y+1	; 0x01
    22b4:	fa 81       	ldd	r31, Y+2	; 0x02
    22b6:	01 84       	ldd	r0, Z+9	; 0x09
    22b8:	f2 85       	ldd	r31, Z+10	; 0x0a
    22ba:	e0 2d       	mov	r30, r0
    22bc:	80 81       	ld	r24, Z
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	80 72       	andi	r24, 0x20	; 32
    22c4:	90 70       	andi	r25, 0x00	; 0
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	a1 f3       	breq	.-24     	; 0x22b2 <_transmit_data+0x12>
    ;
    (*mythis->ux_cofg.reg_udr) = data;
    22ca:	e9 81       	ldd	r30, Y+1	; 0x01
    22cc:	fa 81       	ldd	r31, Y+2	; 0x02
    22ce:	07 80       	ldd	r0, Z+7	; 0x07
    22d0:	f0 85       	ldd	r31, Z+8	; 0x08
    22d2:	e0 2d       	mov	r30, r0
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	80 83       	st	Z, r24
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <_send_str>:


static void _send_str(struct _usart *mythis,s8_t *str)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <_send_str+0x6>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <_send_str+0x8>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	7c 83       	std	Y+4, r23	; 0x04
    22f6:	6b 83       	std	Y+3, r22	; 0x03
    22f8:	11 c0       	rjmp	.+34     	; 0x231c <_send_str+0x38>
    while(*str)
    {
        mythis->transmit_data(mythis,*(str++));
    22fa:	e9 81       	ldd	r30, Y+1	; 0x01
    22fc:	fa 81       	ldd	r31, Y+2	; 0x02
    22fe:	26 89       	ldd	r18, Z+22	; 0x16
    2300:	37 89       	ldd	r19, Z+23	; 0x17
    2302:	eb 81       	ldd	r30, Y+3	; 0x03
    2304:	fc 81       	ldd	r31, Y+4	; 0x04
    2306:	40 81       	ld	r20, Z
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	9c 83       	std	Y+4, r25	; 0x04
    2310:	8b 83       	std	Y+3, r24	; 0x03
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	9a 81       	ldd	r25, Y+2	; 0x02
    2316:	64 2f       	mov	r22, r20
    2318:	f9 01       	movw	r30, r18
    231a:	09 95       	icall
}


static void _send_str(struct _usart *mythis,s8_t *str)
{
    while(*str)
    231c:	eb 81       	ldd	r30, Y+3	; 0x03
    231e:	fc 81       	ldd	r31, Y+4	; 0x04
    2320:	80 81       	ld	r24, Z
    2322:	88 23       	and	r24, r24
    2324:	51 f7       	brne	.-44     	; 0x22fa <_send_str+0x16>
    {
        mythis->transmit_data(mythis,*(str++));
    }
}
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	08 95       	ret

00002334 <_receive_data>:


static u8_t _receive_data(struct _usart *mythis)
{
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	00 d0       	rcall	.+0      	; 0x233a <_receive_data+0x6>
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
    while ( !((*mythis->ux_cofg.reg_ucsra) & (1<<7)) )
    2342:	e9 81       	ldd	r30, Y+1	; 0x01
    2344:	fa 81       	ldd	r31, Y+2	; 0x02
    2346:	01 84       	ldd	r0, Z+9	; 0x09
    2348:	f2 85       	ldd	r31, Z+10	; 0x0a
    234a:	e0 2d       	mov	r30, r0
    234c:	80 81       	ld	r24, Z
    234e:	88 23       	and	r24, r24
    2350:	c4 f7       	brge	.-16     	; 0x2342 <_receive_data+0xe>
    ;
    return (*mythis->ux_cofg.reg_udr);
    2352:	e9 81       	ldd	r30, Y+1	; 0x01
    2354:	fa 81       	ldd	r31, Y+2	; 0x02
    2356:	07 80       	ldd	r0, Z+7	; 0x07
    2358:	f0 85       	ldd	r31, Z+8	; 0x08
    235a:	e0 2d       	mov	r30, r0
    235c:	80 81       	ld	r24, Z
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <__vector_30>:




USART1_RX_INTERRUPT_FUN_NAME
{
    2368:	1f 92       	push	r1
    236a:	0f 92       	push	r0
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	0f 92       	push	r0
    2370:	00 90 5b 00 	lds	r0, 0x005B
    2374:	0f 92       	push	r0
    2376:	11 24       	eor	r1, r1
    2378:	2f 93       	push	r18
    237a:	3f 93       	push	r19
    237c:	4f 93       	push	r20
    237e:	5f 93       	push	r21
    2380:	6f 93       	push	r22
    2382:	7f 93       	push	r23
    2384:	8f 93       	push	r24
    2386:	9f 93       	push	r25
    2388:	af 93       	push	r26
    238a:	bf 93       	push	r27
    238c:	ef 93       	push	r30
    238e:	ff 93       	push	r31
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	0f 92       	push	r0
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    u8_t rev_tmp = *global_this->ux_cofg.reg_udr;
    239a:	e0 91 be 06 	lds	r30, 0x06BE
    239e:	f0 91 bf 06 	lds	r31, 0x06BF
    23a2:	07 80       	ldd	r0, Z+7	; 0x07
    23a4:	f0 85       	ldd	r31, Z+8	; 0x08
    23a6:	e0 2d       	mov	r30, r0
    23a8:	80 81       	ld	r24, Z
    23aa:	89 83       	std	Y+1, r24	; 0x01
    if(rev_tmp == global_this->rev_ending_char)
    23ac:	e0 91 be 06 	lds	r30, 0x06BE
    23b0:	f0 91 bf 06 	lds	r31, 0x06BF
    23b4:	93 89       	ldd	r25, Z+19	; 0x13
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	98 17       	cp	r25, r24
    23ba:	69 f4       	brne	.+26     	; 0x23d6 <__vector_30+0x6e>
    {
        //如果遇到结束符，则调用回调函数
        global_this->rev_data_callback_fun((struct _usart *)global_this);
    23bc:	e0 91 be 06 	lds	r30, 0x06BE
    23c0:	f0 91 bf 06 	lds	r31, 0x06BF
    23c4:	04 8c       	ldd	r0, Z+28	; 0x1c
    23c6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    23c8:	e0 2d       	mov	r30, r0
    23ca:	80 91 be 06 	lds	r24, 0x06BE
    23ce:	90 91 bf 06 	lds	r25, 0x06BF
    23d2:	09 95       	icall
    23d4:	10 c0       	rjmp	.+32     	; 0x23f6 <__vector_30+0x8e>
    }
    else
    {
        *(global_this->rev_data_buff_ptr++) = rev_tmp;
    23d6:	a0 91 be 06 	lds	r26, 0x06BE
    23da:	b0 91 bf 06 	lds	r27, 0x06BF
    23de:	54 96       	adiw	r26, 0x14	; 20
    23e0:	ed 91       	ld	r30, X+
    23e2:	fc 91       	ld	r31, X
    23e4:	55 97       	sbiw	r26, 0x15	; 21
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	cf 01       	movw	r24, r30
    23ec:	01 96       	adiw	r24, 0x01	; 1
    23ee:	55 96       	adiw	r26, 0x15	; 21
    23f0:	9c 93       	st	X, r25
    23f2:	8e 93       	st	-X, r24
    23f4:	54 97       	sbiw	r26, 0x14	; 20
    }
}
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	ff 91       	pop	r31
    23fe:	ef 91       	pop	r30
    2400:	bf 91       	pop	r27
    2402:	af 91       	pop	r26
    2404:	9f 91       	pop	r25
    2406:	8f 91       	pop	r24
    2408:	7f 91       	pop	r23
    240a:	6f 91       	pop	r22
    240c:	5f 91       	pop	r21
    240e:	4f 91       	pop	r20
    2410:	3f 91       	pop	r19
    2412:	2f 91       	pop	r18
    2414:	0f 90       	pop	r0
    2416:	00 92 5b 00 	sts	0x005B, r0
    241a:	0f 90       	pop	r0
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	0f 90       	pop	r0
    2420:	1f 90       	pop	r1
    2422:	18 95       	reti

00002424 <__vector_18>:


USART0_RX_INTERRUPT_FUN_NAME
{
    2424:	1f 92       	push	r1
    2426:	0f 92       	push	r0
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	0f 92       	push	r0
    242c:	00 90 5b 00 	lds	r0, 0x005B
    2430:	0f 92       	push	r0
    2432:	11 24       	eor	r1, r1
    2434:	2f 93       	push	r18
    2436:	3f 93       	push	r19
    2438:	4f 93       	push	r20
    243a:	5f 93       	push	r21
    243c:	6f 93       	push	r22
    243e:	7f 93       	push	r23
    2440:	8f 93       	push	r24
    2442:	9f 93       	push	r25
    2444:	af 93       	push	r26
    2446:	bf 93       	push	r27
    2448:	ef 93       	push	r30
    244a:	ff 93       	push	r31
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	0f 92       	push	r0
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    u8_t rev_tmp = *global_this->ux_cofg.reg_udr;
    2456:	e0 91 be 06 	lds	r30, 0x06BE
    245a:	f0 91 bf 06 	lds	r31, 0x06BF
    245e:	07 80       	ldd	r0, Z+7	; 0x07
    2460:	f0 85       	ldd	r31, Z+8	; 0x08
    2462:	e0 2d       	mov	r30, r0
    2464:	80 81       	ld	r24, Z
    2466:	89 83       	std	Y+1, r24	; 0x01
    if(rev_tmp == global_this->rev_ending_char)
    2468:	e0 91 be 06 	lds	r30, 0x06BE
    246c:	f0 91 bf 06 	lds	r31, 0x06BF
    2470:	93 89       	ldd	r25, Z+19	; 0x13
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	98 17       	cp	r25, r24
    2476:	69 f4       	brne	.+26     	; 0x2492 <__vector_18+0x6e>
    {
        //如果遇到结束符，则调用回调函数
        global_this->rev_data_callback_fun((struct _usart *)global_this);
    2478:	e0 91 be 06 	lds	r30, 0x06BE
    247c:	f0 91 bf 06 	lds	r31, 0x06BF
    2480:	04 8c       	ldd	r0, Z+28	; 0x1c
    2482:	f5 8d       	ldd	r31, Z+29	; 0x1d
    2484:	e0 2d       	mov	r30, r0
    2486:	80 91 be 06 	lds	r24, 0x06BE
    248a:	90 91 bf 06 	lds	r25, 0x06BF
    248e:	09 95       	icall
    2490:	10 c0       	rjmp	.+32     	; 0x24b2 <__vector_18+0x8e>
    }
    else
    {
        *(global_this->rev_data_buff_ptr++) = rev_tmp;
    2492:	a0 91 be 06 	lds	r26, 0x06BE
    2496:	b0 91 bf 06 	lds	r27, 0x06BF
    249a:	54 96       	adiw	r26, 0x14	; 20
    249c:	ed 91       	ld	r30, X+
    249e:	fc 91       	ld	r31, X
    24a0:	55 97       	sbiw	r26, 0x15	; 21
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	80 83       	st	Z, r24
    24a6:	cf 01       	movw	r24, r30
    24a8:	01 96       	adiw	r24, 0x01	; 1
    24aa:	55 96       	adiw	r26, 0x15	; 21
    24ac:	9c 93       	st	X, r25
    24ae:	8e 93       	st	-X, r24
    24b0:	54 97       	sbiw	r26, 0x14	; 20
    }
}
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	ff 91       	pop	r31
    24ba:	ef 91       	pop	r30
    24bc:	bf 91       	pop	r27
    24be:	af 91       	pop	r26
    24c0:	9f 91       	pop	r25
    24c2:	8f 91       	pop	r24
    24c4:	7f 91       	pop	r23
    24c6:	6f 91       	pop	r22
    24c8:	5f 91       	pop	r21
    24ca:	4f 91       	pop	r20
    24cc:	3f 91       	pop	r19
    24ce:	2f 91       	pop	r18
    24d0:	0f 90       	pop	r0
    24d2:	00 92 5b 00 	sts	0x005B, r0
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	0f 90       	pop	r0
    24dc:	1f 90       	pop	r1
    24de:	18 95       	reti

000024e0 <_disp_unsigned_integer>:




static void _disp_unsigned_integer(struct _usart *mythis,u32_t number)
{
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	6c 97       	sbiw	r28, 0x1c	; 28
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	98 8f       	std	Y+24, r25	; 0x18
    24fa:	8f 8b       	std	Y+23, r24	; 0x17
    24fc:	49 8f       	std	Y+25, r20	; 0x19
    24fe:	5a 8f       	std	Y+26, r21	; 0x1a
    2500:	6b 8f       	std	Y+27, r22	; 0x1b
    2502:	7c 8f       	std	Y+28, r23	; 0x1c
    u32_t tmp = number/10;
    2504:	89 8d       	ldd	r24, Y+25	; 0x19
    2506:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2508:	ab 8d       	ldd	r26, Y+27	; 0x1b
    250a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    250c:	2a e0       	ldi	r18, 0x0A	; 10
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    251c:	da 01       	movw	r26, r20
    251e:	c9 01       	movw	r24, r18
    2520:	8a 83       	std	Y+2, r24	; 0x02
    2522:	9b 83       	std	Y+3, r25	; 0x03
    2524:	ac 83       	std	Y+4, r26	; 0x04
    2526:	bd 83       	std	Y+5, r27	; 0x05
    u8_t bits = 1;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	89 83       	std	Y+1, r24	; 0x01
    s8_t char_tmp[17]={0};
    252c:	81 e1       	ldi	r24, 0x11	; 17
    252e:	fe 01       	movw	r30, r28
    2530:	36 96       	adiw	r30, 0x06	; 6
    2532:	df 01       	movw	r26, r30
    2534:	98 2f       	mov	r25, r24
    2536:	1d 92       	st	X+, r1
    2538:	9a 95       	dec	r25
    253a:	e9 f7       	brne	.-6      	; 0x2536 <_disp_unsigned_integer+0x56>
    253c:	15 c0       	rjmp	.+42     	; 0x2568 <_disp_unsigned_integer+0x88>
    while(tmp)
    {
        tmp /= 10;
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	ac 81       	ldd	r26, Y+4	; 0x04
    2544:	bd 81       	ldd	r27, Y+5	; 0x05
    2546:	2a e0       	ldi	r18, 0x0A	; 10
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    2556:	da 01       	movw	r26, r20
    2558:	c9 01       	movw	r24, r18
    255a:	8a 83       	std	Y+2, r24	; 0x02
    255c:	9b 83       	std	Y+3, r25	; 0x03
    255e:	ac 83       	std	Y+4, r26	; 0x04
    2560:	bd 83       	std	Y+5, r27	; 0x05
        bits ++;
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	89 83       	std	Y+1, r24	; 0x01
static void _disp_unsigned_integer(struct _usart *mythis,u32_t number)
{
    u32_t tmp = number/10;
    u8_t bits = 1;
    s8_t char_tmp[17]={0};
    while(tmp)
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	9b 81       	ldd	r25, Y+3	; 0x03
    256c:	ac 81       	ldd	r26, Y+4	; 0x04
    256e:	bd 81       	ldd	r27, Y+5	; 0x05
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	a1 05       	cpc	r26, r1
    2574:	b1 05       	cpc	r27, r1
    2576:	19 f7       	brne	.-58     	; 0x253e <_disp_unsigned_integer+0x5e>
    2578:	31 c0       	rjmp	.+98     	; 0x25dc <_disp_unsigned_integer+0xfc>
        tmp /= 10;
        bits ++;
    }
    for(;bits>0;bits--)
    {
        char_tmp[bits-1] = number%10+'0';
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	8c 01       	movw	r16, r24
    2582:	01 50       	subi	r16, 0x01	; 1
    2584:	10 40       	sbci	r17, 0x00	; 0
    2586:	89 8d       	ldd	r24, Y+25	; 0x19
    2588:	9a 8d       	ldd	r25, Y+26	; 0x1a
    258a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    258c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    258e:	2a e0       	ldi	r18, 0x0A	; 10
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	28 2f       	mov	r18, r24
    25a4:	20 5d       	subi	r18, 0xD0	; 208
    25a6:	ce 01       	movw	r24, r28
    25a8:	06 96       	adiw	r24, 0x06	; 6
    25aa:	fc 01       	movw	r30, r24
    25ac:	e0 0f       	add	r30, r16
    25ae:	f1 1f       	adc	r31, r17
    25b0:	20 83       	st	Z, r18
        number /= 10;
    25b2:	89 8d       	ldd	r24, Y+25	; 0x19
    25b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25b6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    25b8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    25ba:	2a e0       	ldi	r18, 0x0A	; 10
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 76 1d 	call	0x3aec	; 0x3aec <__udivmodsi4>
    25ca:	da 01       	movw	r26, r20
    25cc:	c9 01       	movw	r24, r18
    25ce:	89 8f       	std	Y+25, r24	; 0x19
    25d0:	9a 8f       	std	Y+26, r25	; 0x1a
    25d2:	ab 8f       	std	Y+27, r26	; 0x1b
    25d4:	bc 8f       	std	Y+28, r27	; 0x1c
    while(tmp)
    {
        tmp /= 10;
        bits ++;
    }
    for(;bits>0;bits--)
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	81 50       	subi	r24, 0x01	; 1
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	88 23       	and	r24, r24
    25e0:	61 f6       	brne	.-104    	; 0x257a <_disp_unsigned_integer+0x9a>
    {
        char_tmp[bits-1] = number%10+'0';
        number /= 10;
    }
    mythis->send_str(mythis,char_tmp);
    25e2:	ef 89       	ldd	r30, Y+23	; 0x17
    25e4:	f8 8d       	ldd	r31, Y+24	; 0x18
    25e6:	00 8c       	ldd	r0, Z+24	; 0x18
    25e8:	f1 8d       	ldd	r31, Z+25	; 0x19
    25ea:	e0 2d       	mov	r30, r0
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	9e 01       	movw	r18, r28
    25f2:	2a 5f       	subi	r18, 0xFA	; 250
    25f4:	3f 4f       	sbci	r19, 0xFF	; 255
    25f6:	b9 01       	movw	r22, r18
    25f8:	09 95       	icall
}
    25fa:	6c 96       	adiw	r28, 0x1c	; 28
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	08 95       	ret

00002610 <_disp_pic>:


static void _disp_pic(struct _usart * const mythis,u8_t w,u8_t h,const u8_t* pic)
{
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	29 97       	sbiw	r28, 0x09	; 9
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	9d 83       	std	Y+5, r25	; 0x05
    2626:	8c 83       	std	Y+4, r24	; 0x04
    2628:	6e 83       	std	Y+6, r22	; 0x06
    262a:	4f 83       	std	Y+7, r20	; 0x07
    262c:	39 87       	std	Y+9, r19	; 0x09
    262e:	28 87       	std	Y+8, r18	; 0x08
    u16_t i=0;
    2630:	1b 82       	std	Y+3, r1	; 0x03
    2632:	1a 82       	std	Y+2, r1	; 0x02
    2634:	67 c0       	rjmp	.+206    	; 0x2704 <_disp_pic+0xf4>
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    2636:	19 82       	std	Y+1, r1	; 0x01
    2638:	5c c0       	rjmp	.+184    	; 0x26f2 <_disp_pic+0xe2>
        {
            if((*pic)&(1<<k))
    263a:	e8 85       	ldd	r30, Y+8	; 0x08
    263c:	f9 85       	ldd	r31, Y+9	; 0x09
    263e:	80 81       	ld	r24, Z
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a9 01       	movw	r20, r18
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <_disp_pic+0x42>
    264e:	55 95       	asr	r21
    2650:	47 95       	ror	r20
    2652:	8a 95       	dec	r24
    2654:	e2 f7       	brpl	.-8      	; 0x264e <_disp_pic+0x3e>
    2656:	ca 01       	movw	r24, r20
    2658:	81 70       	andi	r24, 0x01	; 1
    265a:	90 70       	andi	r25, 0x00	; 0
    265c:	88 23       	and	r24, r24
    265e:	99 f0       	breq	.+38     	; 0x2686 <_disp_pic+0x76>
            {
                mythis->transmit_data(mythis,'*');
    2660:	ec 81       	ldd	r30, Y+4	; 0x04
    2662:	fd 81       	ldd	r31, Y+5	; 0x05
    2664:	06 88       	ldd	r0, Z+22	; 0x16
    2666:	f7 89       	ldd	r31, Z+23	; 0x17
    2668:	e0 2d       	mov	r30, r0
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	9d 81       	ldd	r25, Y+5	; 0x05
    266e:	6a e2       	ldi	r22, 0x2A	; 42
    2670:	09 95       	icall
                mythis->transmit_data(mythis,'*');
    2672:	ec 81       	ldd	r30, Y+4	; 0x04
    2674:	fd 81       	ldd	r31, Y+5	; 0x05
    2676:	06 88       	ldd	r0, Z+22	; 0x16
    2678:	f7 89       	ldd	r31, Z+23	; 0x17
    267a:	e0 2d       	mov	r30, r0
    267c:	8c 81       	ldd	r24, Y+4	; 0x04
    267e:	9d 81       	ldd	r25, Y+5	; 0x05
    2680:	6a e2       	ldi	r22, 0x2A	; 42
    2682:	09 95       	icall
    2684:	12 c0       	rjmp	.+36     	; 0x26aa <_disp_pic+0x9a>
            }
            else
            {
                mythis->transmit_data(mythis,' ');
    2686:	ec 81       	ldd	r30, Y+4	; 0x04
    2688:	fd 81       	ldd	r31, Y+5	; 0x05
    268a:	06 88       	ldd	r0, Z+22	; 0x16
    268c:	f7 89       	ldd	r31, Z+23	; 0x17
    268e:	e0 2d       	mov	r30, r0
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	9d 81       	ldd	r25, Y+5	; 0x05
    2694:	60 e2       	ldi	r22, 0x20	; 32
    2696:	09 95       	icall
                mythis->transmit_data(mythis,' ');
    2698:	ec 81       	ldd	r30, Y+4	; 0x04
    269a:	fd 81       	ldd	r31, Y+5	; 0x05
    269c:	06 88       	ldd	r0, Z+22	; 0x16
    269e:	f7 89       	ldd	r31, Z+23	; 0x17
    26a0:	e0 2d       	mov	r30, r0
    26a2:	8c 81       	ldd	r24, Y+4	; 0x04
    26a4:	9d 81       	ldd	r25, Y+5	; 0x05
    26a6:	60 e2       	ldi	r22, 0x20	; 32
    26a8:	09 95       	icall
            }


            i++;
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	9b 83       	std	Y+3, r25	; 0x03
    26b2:	8a 83       	std	Y+2, r24	; 0x02
            if((i %w) == 0)
    26b4:	8e 81       	ldd	r24, Y+6	; 0x06
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	b9 01       	movw	r22, r18
    26c0:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	91 f4       	brne	.+36     	; 0x26ec <_disp_pic+0xdc>
            {
                mythis->transmit_data(mythis,'\r');
    26c8:	ec 81       	ldd	r30, Y+4	; 0x04
    26ca:	fd 81       	ldd	r31, Y+5	; 0x05
    26cc:	06 88       	ldd	r0, Z+22	; 0x16
    26ce:	f7 89       	ldd	r31, Z+23	; 0x17
    26d0:	e0 2d       	mov	r30, r0
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	6d e0       	ldi	r22, 0x0D	; 13
    26d8:	09 95       	icall
                mythis->transmit_data(mythis,'\n');
    26da:	ec 81       	ldd	r30, Y+4	; 0x04
    26dc:	fd 81       	ldd	r31, Y+5	; 0x05
    26de:	06 88       	ldd	r0, Z+22	; 0x16
    26e0:	f7 89       	ldd	r31, Z+23	; 0x17
    26e2:	e0 2d       	mov	r30, r0
    26e4:	8c 81       	ldd	r24, Y+4	; 0x04
    26e6:	9d 81       	ldd	r25, Y+5	; 0x05
    26e8:	6a e0       	ldi	r22, 0x0A	; 10
    26ea:	09 95       	icall
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	8f 5f       	subi	r24, 0xFF	; 255
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	88 30       	cpi	r24, 0x08	; 8
    26f6:	08 f4       	brcc	.+2      	; 0x26fa <_disp_pic+0xea>
    26f8:	a0 cf       	rjmp	.-192    	; 0x263a <_disp_pic+0x2a>
            {
                mythis->transmit_data(mythis,'\r');
                mythis->transmit_data(mythis,'\n');
            }
        }
        pic++;
    26fa:	88 85       	ldd	r24, Y+8	; 0x08
    26fc:	99 85       	ldd	r25, Y+9	; 0x09
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	99 87       	std	Y+9, r25	; 0x09
    2702:	88 87       	std	Y+8, r24	; 0x08

static void _disp_pic(struct _usart * const mythis,u8_t w,u8_t h,const u8_t* pic)
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    2704:	8e 81       	ldd	r24, Y+6	; 0x06
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	8f 81       	ldd	r24, Y+7	; 0x07
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	ac 01       	movw	r20, r24
    2712:	24 9f       	mul	r18, r20
    2714:	c0 01       	movw	r24, r0
    2716:	25 9f       	mul	r18, r21
    2718:	90 0d       	add	r25, r0
    271a:	34 9f       	mul	r19, r20
    271c:	90 0d       	add	r25, r0
    271e:	11 24       	eor	r1, r1
    2720:	9c 01       	movw	r18, r24
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	9b 81       	ldd	r25, Y+3	; 0x03
    2726:	82 17       	cp	r24, r18
    2728:	93 07       	cpc	r25, r19
    272a:	08 f4       	brcc	.+2      	; 0x272e <_disp_pic+0x11e>
    272c:	84 cf       	rjmp	.-248    	; 0x2636 <_disp_pic+0x26>
                mythis->transmit_data(mythis,'\n');
            }
        }
        pic++;
    }
}
    272e:	29 96       	adiw	r28, 0x09	; 9
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <usart_init>:


void usart_init(usart * const usartn)
{
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <usart_init+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <usart_init+0x8>
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	89 83       	std	Y+1, r24	; 0x01
    global_this = usartn;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	90 93 bf 06 	sts	0x06BF, r25
    2758:	80 93 be 06 	sts	0x06BE, r24
    switch(usartn->ux_cofg.number)
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	80 81       	ld	r24, Z
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	3c 83       	std	Y+4, r19	; 0x04
    2768:	2b 83       	std	Y+3, r18	; 0x03
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	31 f0       	breq	.+12     	; 0x277e <usart_init+0x3e>
    2772:	2b 81       	ldd	r18, Y+3	; 0x03
    2774:	3c 81       	ldd	r19, Y+4	; 0x04
    2776:	21 30       	cpi	r18, 0x01	; 1
    2778:	31 05       	cpc	r19, r1
    277a:	31 f1       	breq	.+76     	; 0x27c8 <usart_init+0x88>
    277c:	4a c0       	rjmp	.+148    	; 0x2812 <usart_init+0xd2>
    {
        case 0:
          usartn->ux_cofg.reg_udr = (volatile u8_t *)0x2c;
    277e:	e9 81       	ldd	r30, Y+1	; 0x01
    2780:	fa 81       	ldd	r31, Y+2	; 0x02
    2782:	8c e2       	ldi	r24, 0x2C	; 44
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	90 87       	std	Z+8, r25	; 0x08
    2788:	87 83       	std	Z+7, r24	; 0x07
          usartn->ux_cofg.reg_ucsra = (volatile u8_t *)0x2b;
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	8b e2       	ldi	r24, 0x2B	; 43
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	92 87       	std	Z+10, r25	; 0x0a
    2794:	81 87       	std	Z+9, r24	; 0x09
          usartn->ux_cofg.reg_ucsrb = (volatile u8_t *)0x2a;
    2796:	e9 81       	ldd	r30, Y+1	; 0x01
    2798:	fa 81       	ldd	r31, Y+2	; 0x02
    279a:	8a e2       	ldi	r24, 0x2A	; 42
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	94 87       	std	Z+12, r25	; 0x0c
    27a0:	83 87       	std	Z+11, r24	; 0x0b
          usartn->ux_cofg.reg_ucsrc = (volatile u8_t *)0x95;
    27a2:	e9 81       	ldd	r30, Y+1	; 0x01
    27a4:	fa 81       	ldd	r31, Y+2	; 0x02
    27a6:	85 e9       	ldi	r24, 0x95	; 149
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	96 87       	std	Z+14, r25	; 0x0e
    27ac:	85 87       	std	Z+13, r24	; 0x0d
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0x29;
    27ae:	e9 81       	ldd	r30, Y+1	; 0x01
    27b0:	fa 81       	ldd	r31, Y+2	; 0x02
    27b2:	89 e2       	ldi	r24, 0x29	; 41
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	90 8b       	std	Z+16, r25	; 0x10
    27b8:	87 87       	std	Z+15, r24	; 0x0f
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0x90;
    27ba:	e9 81       	ldd	r30, Y+1	; 0x01
    27bc:	fa 81       	ldd	r31, Y+2	; 0x02
    27be:	80 e9       	ldi	r24, 0x90	; 144
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	92 8b       	std	Z+18, r25	; 0x12
    27c4:	81 8b       	std	Z+17, r24	; 0x11
    27c6:	49 c0       	rjmp	.+146    	; 0x285a <usart_init+0x11a>
          break;

        case 1:
          usartn->ux_cofg.reg_udr = (volatile u8_t *)0x9c;
    27c8:	e9 81       	ldd	r30, Y+1	; 0x01
    27ca:	fa 81       	ldd	r31, Y+2	; 0x02
    27cc:	8c e9       	ldi	r24, 0x9C	; 156
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	90 87       	std	Z+8, r25	; 0x08
    27d2:	87 83       	std	Z+7, r24	; 0x07
          usartn->ux_cofg.reg_ucsra = (volatile u8_t *)0x9b;
    27d4:	e9 81       	ldd	r30, Y+1	; 0x01
    27d6:	fa 81       	ldd	r31, Y+2	; 0x02
    27d8:	8b e9       	ldi	r24, 0x9B	; 155
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	92 87       	std	Z+10, r25	; 0x0a
    27de:	81 87       	std	Z+9, r24	; 0x09
          usartn->ux_cofg.reg_ucsrb = (volatile u8_t *)0x9a;
    27e0:	e9 81       	ldd	r30, Y+1	; 0x01
    27e2:	fa 81       	ldd	r31, Y+2	; 0x02
    27e4:	8a e9       	ldi	r24, 0x9A	; 154
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	94 87       	std	Z+12, r25	; 0x0c
    27ea:	83 87       	std	Z+11, r24	; 0x0b
          usartn->ux_cofg.reg_ucsrc = (volatile u8_t *)0x9d;
    27ec:	e9 81       	ldd	r30, Y+1	; 0x01
    27ee:	fa 81       	ldd	r31, Y+2	; 0x02
    27f0:	8d e9       	ldi	r24, 0x9D	; 157
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	96 87       	std	Z+14, r25	; 0x0e
    27f6:	85 87       	std	Z+13, r24	; 0x0d
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0x99;
    27f8:	e9 81       	ldd	r30, Y+1	; 0x01
    27fa:	fa 81       	ldd	r31, Y+2	; 0x02
    27fc:	89 e9       	ldi	r24, 0x99	; 153
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	90 8b       	std	Z+16, r25	; 0x10
    2802:	87 87       	std	Z+15, r24	; 0x0f
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0x98;
    2804:	e9 81       	ldd	r30, Y+1	; 0x01
    2806:	fa 81       	ldd	r31, Y+2	; 0x02
    2808:	88 e9       	ldi	r24, 0x98	; 152
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	92 8b       	std	Z+18, r25	; 0x12
    280e:	81 8b       	std	Z+17, r24	; 0x11
    2810:	24 c0       	rjmp	.+72     	; 0x285a <usart_init+0x11a>
          break;

        default:
          usartn->ux_cofg.reg_udr = (volatile u8_t *)0x97;   //保留，操作这些寄存器不会有任何效果
    2812:	e9 81       	ldd	r30, Y+1	; 0x01
    2814:	fa 81       	ldd	r31, Y+2	; 0x02
    2816:	87 e9       	ldi	r24, 0x97	; 151
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	90 87       	std	Z+8, r25	; 0x08
    281c:	87 83       	std	Z+7, r24	; 0x07
          usartn->ux_cofg.reg_ucsra = (volatile u8_t *)0x97;
    281e:	e9 81       	ldd	r30, Y+1	; 0x01
    2820:	fa 81       	ldd	r31, Y+2	; 0x02
    2822:	87 e9       	ldi	r24, 0x97	; 151
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	92 87       	std	Z+10, r25	; 0x0a
    2828:	81 87       	std	Z+9, r24	; 0x09
          usartn->ux_cofg.reg_ucsrb = (volatile u8_t *)0x97;
    282a:	e9 81       	ldd	r30, Y+1	; 0x01
    282c:	fa 81       	ldd	r31, Y+2	; 0x02
    282e:	87 e9       	ldi	r24, 0x97	; 151
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	94 87       	std	Z+12, r25	; 0x0c
    2834:	83 87       	std	Z+11, r24	; 0x0b
          usartn->ux_cofg.reg_ucsrc = (volatile u8_t *)0x97;
    2836:	e9 81       	ldd	r30, Y+1	; 0x01
    2838:	fa 81       	ldd	r31, Y+2	; 0x02
    283a:	87 e9       	ldi	r24, 0x97	; 151
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	96 87       	std	Z+14, r25	; 0x0e
    2840:	85 87       	std	Z+13, r24	; 0x0d
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0x97;
    2842:	e9 81       	ldd	r30, Y+1	; 0x01
    2844:	fa 81       	ldd	r31, Y+2	; 0x02
    2846:	87 e9       	ldi	r24, 0x97	; 151
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	90 8b       	std	Z+16, r25	; 0x10
    284c:	87 87       	std	Z+15, r24	; 0x0f
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0x97;
    284e:	e9 81       	ldd	r30, Y+1	; 0x01
    2850:	fa 81       	ldd	r31, Y+2	; 0x02
    2852:	87 e9       	ldi	r24, 0x97	; 151
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	92 8b       	std	Z+18, r25	; 0x12
    2858:	81 8b       	std	Z+17, r24	; 0x11
          break;
    }

    //设置波特率和数据格式
    (*usartn->ux_cofg.reg_ubrrh) = ubrr_tbl[usartn->ux_cofg.osc_hz][usartn->ux_cofg.ubrr]>>8;
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	a1 89       	ldd	r26, Z+17	; 0x11
    2860:	b2 89       	ldd	r27, Z+18	; 0x12
    2862:	e9 81       	ldd	r30, Y+1	; 0x01
    2864:	fa 81       	ldd	r31, Y+2	; 0x02
    2866:	81 81       	ldd	r24, Z+1	; 0x01
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	e9 81       	ldd	r30, Y+1	; 0x01
    286e:	fa 81       	ldd	r31, Y+2	; 0x02
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	48 2f       	mov	r20, r24
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	c9 01       	movw	r24, r18
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	9c 01       	movw	r18, r24
    287e:	22 0f       	add	r18, r18
    2880:	33 1f       	adc	r19, r19
    2882:	22 0f       	add	r18, r18
    2884:	33 1f       	adc	r19, r19
    2886:	82 0f       	add	r24, r18
    2888:	93 1f       	adc	r25, r19
    288a:	84 0f       	add	r24, r20
    288c:	95 1f       	adc	r25, r21
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	fc 01       	movw	r30, r24
    2894:	e3 54       	subi	r30, 0x43	; 67
    2896:	fd 4f       	sbci	r31, 0xFD	; 253
    2898:	80 81       	ld	r24, Z
    289a:	91 81       	ldd	r25, Z+1	; 0x01
    289c:	89 2f       	mov	r24, r25
    289e:	99 27       	eor	r25, r25
    28a0:	8c 93       	st	X, r24
    (*usartn->ux_cofg.reg_ubrrl) = ubrr_tbl[usartn->ux_cofg.osc_hz][usartn->ux_cofg.ubrr];
    28a2:	e9 81       	ldd	r30, Y+1	; 0x01
    28a4:	fa 81       	ldd	r31, Y+2	; 0x02
    28a6:	a7 85       	ldd	r26, Z+15	; 0x0f
    28a8:	b0 89       	ldd	r27, Z+16	; 0x10
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	81 81       	ldd	r24, Z+1	; 0x01
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	e9 81       	ldd	r30, Y+1	; 0x01
    28b6:	fa 81       	ldd	r31, Y+2	; 0x02
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	48 2f       	mov	r20, r24
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	c9 01       	movw	r24, r18
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	9c 01       	movw	r18, r24
    28c6:	22 0f       	add	r18, r18
    28c8:	33 1f       	adc	r19, r19
    28ca:	22 0f       	add	r18, r18
    28cc:	33 1f       	adc	r19, r19
    28ce:	82 0f       	add	r24, r18
    28d0:	93 1f       	adc	r25, r19
    28d2:	84 0f       	add	r24, r20
    28d4:	95 1f       	adc	r25, r21
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	fc 01       	movw	r30, r24
    28dc:	e3 54       	subi	r30, 0x43	; 67
    28de:	fd 4f       	sbci	r31, 0xFD	; 253
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	8c 93       	st	X, r24

    (*usartn->ux_cofg.reg_ucsrb) = ((1<<4)|(1<<3));
    28e6:	e9 81       	ldd	r30, Y+1	; 0x01
    28e8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ea:	03 84       	ldd	r0, Z+11	; 0x0b
    28ec:	f4 85       	ldd	r31, Z+12	; 0x0c
    28ee:	e0 2d       	mov	r30, r0
    28f0:	88 e1       	ldi	r24, 0x18	; 24
    28f2:	80 83       	st	Z, r24
    if(usartn->ux_cofg.wait_or_interrupt)
    28f4:	e9 81       	ldd	r30, Y+1	; 0x01
    28f6:	fa 81       	ldd	r31, Y+2	; 0x02
    28f8:	86 81       	ldd	r24, Z+6	; 0x06
    28fa:	88 23       	and	r24, r24
    28fc:	41 f0       	breq	.+16     	; 0x290e <usart_init+0x1ce>
        (*usartn->ux_cofg.reg_ucsrb) |= (0x01<<7);
    28fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2900:	fa 81       	ldd	r31, Y+2	; 0x02
    2902:	03 84       	ldd	r0, Z+11	; 0x0b
    2904:	f4 85       	ldd	r31, Z+12	; 0x0c
    2906:	e0 2d       	mov	r30, r0
    2908:	80 81       	ld	r24, Z
    290a:	80 68       	ori	r24, 0x80	; 128
    290c:	80 83       	st	Z, r24
    (*usartn->ux_cofg.reg_ucsrc) = ((usartn->ux_cofg.crc_type<<4)|(usartn->ux_cofg.stop_bits_num<<3)|(usartn->ux_cofg.data_bits_num<<1));
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	a5 85       	ldd	r26, Z+13	; 0x0d
    2914:	b6 85       	ldd	r27, Z+14	; 0x0e
    2916:	e9 81       	ldd	r30, Y+1	; 0x01
    2918:	fa 81       	ldd	r31, Y+2	; 0x02
    291a:	83 81       	ldd	r24, Z+3	; 0x03
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	82 95       	swap	r24
    2922:	92 95       	swap	r25
    2924:	90 7f       	andi	r25, 0xF0	; 240
    2926:	98 27       	eor	r25, r24
    2928:	80 7f       	andi	r24, 0xF0	; 240
    292a:	98 27       	eor	r25, r24
    292c:	28 2f       	mov	r18, r24
    292e:	e9 81       	ldd	r30, Y+1	; 0x01
    2930:	fa 81       	ldd	r31, Y+2	; 0x02
    2932:	85 81       	ldd	r24, Z+5	; 0x05
    2934:	88 2f       	mov	r24, r24
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	28 2b       	or	r18, r24
    2946:	e9 81       	ldd	r30, Y+1	; 0x01
    2948:	fa 81       	ldd	r31, Y+2	; 0x02
    294a:	84 81       	ldd	r24, Z+4	; 0x04
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	82 2b       	or	r24, r18
    2956:	8c 93       	st	X, r24
    (*usartn->ux_cofg.reg_udr) = 0; //清除发送和接收寄存器
    2958:	e9 81       	ldd	r30, Y+1	; 0x01
    295a:	fa 81       	ldd	r31, Y+2	; 0x02
    295c:	07 80       	ldd	r0, Z+7	; 0x07
    295e:	f0 85       	ldd	r31, Z+8	; 0x08
    2960:	e0 2d       	mov	r30, r0
    2962:	10 82       	st	Z, r1


    //注册驱动
    usartn->transmit_data = _transmit_data;
    2964:	e9 81       	ldd	r30, Y+1	; 0x01
    2966:	fa 81       	ldd	r31, Y+2	; 0x02
    2968:	80 e5       	ldi	r24, 0x50	; 80
    296a:	91 e1       	ldi	r25, 0x11	; 17
    296c:	97 8b       	std	Z+23, r25	; 0x17
    296e:	86 8b       	std	Z+22, r24	; 0x16
    usartn->receive_data  = _receive_data;
    2970:	e9 81       	ldd	r30, Y+1	; 0x01
    2972:	fa 81       	ldd	r31, Y+2	; 0x02
    2974:	8a e9       	ldi	r24, 0x9A	; 154
    2976:	91 e1       	ldi	r25, 0x11	; 17
    2978:	93 8f       	std	Z+27, r25	; 0x1b
    297a:	82 8f       	std	Z+26, r24	; 0x1a
    usartn->send_str = _send_str;
    297c:	e9 81       	ldd	r30, Y+1	; 0x01
    297e:	fa 81       	ldd	r31, Y+2	; 0x02
    2980:	82 e7       	ldi	r24, 0x72	; 114
    2982:	91 e1       	ldi	r25, 0x11	; 17
    2984:	91 8f       	std	Z+25, r25	; 0x19
    2986:	80 8f       	std	Z+24, r24	; 0x18
    usartn->disp_pic = _disp_pic;
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	fa 81       	ldd	r31, Y+2	; 0x02
    298c:	88 e0       	ldi	r24, 0x08	; 8
    298e:	93 e1       	ldi	r25, 0x13	; 19
    2990:	97 8f       	std	Z+31, r25	; 0x1f
    2992:	86 8f       	std	Z+30, r24	; 0x1e
    usartn->disp_unsigned_integer = _disp_unsigned_integer;
    2994:	e9 81       	ldd	r30, Y+1	; 0x01
    2996:	fa 81       	ldd	r31, Y+2	; 0x02
    2998:	80 e7       	ldi	r24, 0x70	; 112
    299a:	92 e1       	ldi	r25, 0x12	; 18
    299c:	91 a3       	std	Z+33, r25	; 0x21
    299e:	80 a3       	std	Z+32, r24	; 0x20


}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <_set_data>:
#include "gpio.h"


static void _set_data(struct _gpio *mythis,u8_t data)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <_set_data+0x6>
    29b4:	0f 92       	push	r0
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	6b 83       	std	Y+3, r22	; 0x03
    (*mythis->px_cofg.reg_out_data) = data;
    29c0:	e9 81       	ldd	r30, Y+1	; 0x01
    29c2:	fa 81       	ldd	r31, Y+2	; 0x02
    29c4:	03 80       	ldd	r0, Z+3	; 0x03
    29c6:	f4 81       	ldd	r31, Z+4	; 0x04
    29c8:	e0 2d       	mov	r30, r0
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	80 83       	st	Z, r24
}
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <_and_self_data>:

static void _and_self_data(struct _gpio *mythis,u8_t data)
{
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <_and_self_data+0x6>
    29e0:	0f 92       	push	r0
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	6b 83       	std	Y+3, r22	; 0x03
    (*mythis->px_cofg.reg_out_data) &= data;
    29ec:	e9 81       	ldd	r30, Y+1	; 0x01
    29ee:	fa 81       	ldd	r31, Y+2	; 0x02
    29f0:	03 80       	ldd	r0, Z+3	; 0x03
    29f2:	f4 81       	ldd	r31, Z+4	; 0x04
    29f4:	e0 2d       	mov	r30, r0
    29f6:	90 81       	ld	r25, Z
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	89 23       	and	r24, r25
    29fc:	80 83       	st	Z, r24
}
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <_nor_self_data>:

static void _nor_self_data(struct _gpio *mythis,u8_t data)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <_nor_self_data+0x6>
    2a10:	0f 92       	push	r0
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	6b 83       	std	Y+3, r22	; 0x03
    (*mythis->px_cofg.reg_out_data) |= data;
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	03 80       	ldd	r0, Z+3	; 0x03
    2a22:	f4 81       	ldd	r31, Z+4	; 0x04
    2a24:	e0 2d       	mov	r30, r0
    2a26:	90 81       	ld	r25, Z
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	89 2b       	or	r24, r25
    2a2c:	80 83       	st	Z, r24
}
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <_get_data>:

static u8_t _get_data(struct _gpio *mythis)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <_get_data+0x6>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
    return (*mythis->px_cofg.reg_in_data);
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	05 80       	ldd	r0, Z+5	; 0x05
    2a4e:	f6 81       	ldd	r31, Z+6	; 0x06
    2a50:	e0 2d       	mov	r30, r0
    2a52:	80 81       	ld	r24, Z
}
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <gpio_init>:


void gpio_init(gpio *gpiox)
{
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <gpio_init+0x6>
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <gpio_init+0x8>
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    //获取寄存器的地址
    switch(gpiox->px_cofg.px)
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	80 81       	ld	r24, Z
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	3c 83       	std	Y+4, r19	; 0x04
    2a7a:	2b 83       	std	Y+3, r18	; 0x03
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	83 34       	cpi	r24, 0x43	; 67
    2a82:	91 05       	cpc	r25, r1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <gpio_init+0x2a>
    2a86:	49 c0       	rjmp	.+146    	; 0x2b1a <gpio_init+0xbc>
    2a88:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8c:	24 34       	cpi	r18, 0x44	; 68
    2a8e:	31 05       	cpc	r19, r1
    2a90:	5c f4       	brge	.+22     	; 0x2aa8 <gpio_init+0x4a>
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	81 34       	cpi	r24, 0x41	; 65
    2a98:	91 05       	cpc	r25, r1
    2a9a:	c9 f0       	breq	.+50     	; 0x2ace <gpio_init+0x70>
    2a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa0:	22 34       	cpi	r18, 0x42	; 66
    2aa2:	31 05       	cpc	r19, r1
    2aa4:	39 f1       	breq	.+78     	; 0x2af4 <gpio_init+0x96>
    2aa6:	85 c0       	rjmp	.+266    	; 0x2bb2 <gpio_init+0x154>
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	85 34       	cpi	r24, 0x45	; 69
    2aae:	91 05       	cpc	r25, r1
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <gpio_init+0x56>
    2ab2:	59 c0       	rjmp	.+178    	; 0x2b66 <gpio_init+0x108>
    2ab4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab8:	25 34       	cpi	r18, 0x45	; 69
    2aba:	31 05       	cpc	r19, r1
    2abc:	0c f4       	brge	.+2      	; 0x2ac0 <gpio_init+0x62>
    2abe:	40 c0       	rjmp	.+128    	; 0x2b40 <gpio_init+0xe2>
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	86 34       	cpi	r24, 0x46	; 70
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <gpio_init+0x6e>
    2aca:	60 c0       	rjmp	.+192    	; 0x2b8c <gpio_init+0x12e>
    2acc:	72 c0       	rjmp	.+228    	; 0x2bb2 <gpio_init+0x154>
    {
        case 'A':
            gpiox->px_cofg.reg_in_data  = (volatile u8_t *)0x39;
    2ace:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad2:	89 e3       	ldi	r24, 0x39	; 57
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	96 83       	std	Z+6, r25	; 0x06
    2ad8:	85 83       	std	Z+5, r24	; 0x05
            gpiox->px_cofg.reg_dir      = (volatile u8_t *)0x3A;
    2ada:	e9 81       	ldd	r30, Y+1	; 0x01
    2adc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ade:	8a e3       	ldi	r24, 0x3A	; 58
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	92 83       	std	Z+2, r25	; 0x02
    2ae4:	81 83       	std	Z+1, r24	; 0x01
            gpiox->px_cofg.reg_out_data = (volatile u8_t *)0x3B;
    2ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aea:	8b e3       	ldi	r24, 0x3B	; 59
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	94 83       	std	Z+4, r25	; 0x04
    2af0:	83 83       	std	Z+3, r24	; 0x03
    2af2:	71 c0       	rjmp	.+226    	; 0x2bd6 <gpio_init+0x178>
            break;

        case 'B':
            gpiox->px_cofg.reg_in_data  = (volatile u8_t *)0x36;
    2af4:	e9 81       	ldd	r30, Y+1	; 0x01
    2af6:	fa 81       	ldd	r31, Y+2	; 0x02
    2af8:	86 e3       	ldi	r24, 0x36	; 54
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	96 83       	std	Z+6, r25	; 0x06
    2afe:	85 83       	std	Z+5, r24	; 0x05
            gpiox->px_cofg.reg_dir      = (volatile u8_t *)0x37;
    2b00:	e9 81       	ldd	r30, Y+1	; 0x01
    2b02:	fa 81       	ldd	r31, Y+2	; 0x02
    2b04:	87 e3       	ldi	r24, 0x37	; 55
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	92 83       	std	Z+2, r25	; 0x02
    2b0a:	81 83       	std	Z+1, r24	; 0x01
            gpiox->px_cofg.reg_out_data = (volatile u8_t *)0x38;
    2b0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b10:	88 e3       	ldi	r24, 0x38	; 56
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	94 83       	std	Z+4, r25	; 0x04
    2b16:	83 83       	std	Z+3, r24	; 0x03
    2b18:	5e c0       	rjmp	.+188    	; 0x2bd6 <gpio_init+0x178>
            break;

        case 'C':
            gpiox->px_cofg.reg_in_data  = (volatile u8_t *)0x33;
    2b1a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1e:	83 e3       	ldi	r24, 0x33	; 51
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	96 83       	std	Z+6, r25	; 0x06
    2b24:	85 83       	std	Z+5, r24	; 0x05
            gpiox->px_cofg.reg_dir      = (volatile u8_t *)0x34;
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	84 e3       	ldi	r24, 0x34	; 52
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	92 83       	std	Z+2, r25	; 0x02
    2b30:	81 83       	std	Z+1, r24	; 0x01
            gpiox->px_cofg.reg_out_data = (volatile u8_t *)0x35;
    2b32:	e9 81       	ldd	r30, Y+1	; 0x01
    2b34:	fa 81       	ldd	r31, Y+2	; 0x02
    2b36:	85 e3       	ldi	r24, 0x35	; 53
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	94 83       	std	Z+4, r25	; 0x04
    2b3c:	83 83       	std	Z+3, r24	; 0x03
    2b3e:	4b c0       	rjmp	.+150    	; 0x2bd6 <gpio_init+0x178>
            break;

        case 'D':
            gpiox->px_cofg.reg_in_data  = (volatile u8_t *)0x30;
    2b40:	e9 81       	ldd	r30, Y+1	; 0x01
    2b42:	fa 81       	ldd	r31, Y+2	; 0x02
    2b44:	80 e3       	ldi	r24, 0x30	; 48
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	96 83       	std	Z+6, r25	; 0x06
    2b4a:	85 83       	std	Z+5, r24	; 0x05
            gpiox->px_cofg.reg_dir      = (volatile u8_t *)0x31;
    2b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b50:	81 e3       	ldi	r24, 0x31	; 49
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	92 83       	std	Z+2, r25	; 0x02
    2b56:	81 83       	std	Z+1, r24	; 0x01
            gpiox->px_cofg.reg_out_data = (volatile u8_t *)0x32;
    2b58:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5c:	82 e3       	ldi	r24, 0x32	; 50
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	94 83       	std	Z+4, r25	; 0x04
    2b62:	83 83       	std	Z+3, r24	; 0x03
    2b64:	38 c0       	rjmp	.+112    	; 0x2bd6 <gpio_init+0x178>
            break;

        case 'E':
            gpiox->px_cofg.reg_in_data  = (volatile u8_t *)0x21;
    2b66:	e9 81       	ldd	r30, Y+1	; 0x01
    2b68:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6a:	81 e2       	ldi	r24, 0x21	; 33
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	96 83       	std	Z+6, r25	; 0x06
    2b70:	85 83       	std	Z+5, r24	; 0x05
            gpiox->px_cofg.reg_dir      = (volatile u8_t *)0x22;
    2b72:	e9 81       	ldd	r30, Y+1	; 0x01
    2b74:	fa 81       	ldd	r31, Y+2	; 0x02
    2b76:	82 e2       	ldi	r24, 0x22	; 34
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	92 83       	std	Z+2, r25	; 0x02
    2b7c:	81 83       	std	Z+1, r24	; 0x01
            gpiox->px_cofg.reg_out_data = (volatile u8_t *)0x23;
    2b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b80:	fa 81       	ldd	r31, Y+2	; 0x02
    2b82:	83 e2       	ldi	r24, 0x23	; 35
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	94 83       	std	Z+4, r25	; 0x04
    2b88:	83 83       	std	Z+3, r24	; 0x03
    2b8a:	25 c0       	rjmp	.+74     	; 0x2bd6 <gpio_init+0x178>
            break;

        case 'F':
            gpiox->px_cofg.reg_in_data  = (volatile u8_t *)0x20;
    2b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b90:	80 e2       	ldi	r24, 0x20	; 32
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	96 83       	std	Z+6, r25	; 0x06
    2b96:	85 83       	std	Z+5, r24	; 0x05
            gpiox->px_cofg.reg_dir      = (volatile u8_t *)0x61;
    2b98:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9c:	81 e6       	ldi	r24, 0x61	; 97
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	92 83       	std	Z+2, r25	; 0x02
    2ba2:	81 83       	std	Z+1, r24	; 0x01
            gpiox->px_cofg.reg_out_data = (volatile u8_t *)0x62;
    2ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba8:	82 e6       	ldi	r24, 0x62	; 98
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	94 83       	std	Z+4, r25	; 0x04
    2bae:	83 83       	std	Z+3, r24	; 0x03
    2bb0:	12 c0       	rjmp	.+36     	; 0x2bd6 <gpio_init+0x178>
            break;

        default :
            gpiox->px_cofg.reg_dir      = (volatile u8_t *)0x66; //该寄存器保留，赋值将不会有任何效果
    2bb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb6:	86 e6       	ldi	r24, 0x66	; 102
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	92 83       	std	Z+2, r25	; 0x02
    2bbc:	81 83       	std	Z+1, r24	; 0x01
            gpiox->px_cofg.reg_in_data  = (volatile u8_t *)0x66;
    2bbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc2:	86 e6       	ldi	r24, 0x66	; 102
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	96 83       	std	Z+6, r25	; 0x06
    2bc8:	85 83       	std	Z+5, r24	; 0x05
            gpiox->px_cofg.reg_out_data = (volatile u8_t *)0x66;
    2bca:	e9 81       	ldd	r30, Y+1	; 0x01
    2bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bce:	86 e6       	ldi	r24, 0x66	; 102
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	94 83       	std	Z+4, r25	; 0x04
    2bd4:	83 83       	std	Z+3, r24	; 0x03
    }
    //设置IO口的方向同时设置端口为上拉模式
    (*gpiox->px_cofg.reg_dir) = 0xff;//gpiox->px_cofg.dir_mask;
    2bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bda:	01 80       	ldd	r0, Z+1	; 0x01
    2bdc:	f2 81       	ldd	r31, Z+2	; 0x02
    2bde:	e0 2d       	mov	r30, r0
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	80 83       	st	Z, r24
    (*gpiox->px_cofg.reg_out_data) = 0xff;
    2be4:	e9 81       	ldd	r30, Y+1	; 0x01
    2be6:	fa 81       	ldd	r31, Y+2	; 0x02
    2be8:	03 80       	ldd	r0, Z+3	; 0x03
    2bea:	f4 81       	ldd	r31, Z+4	; 0x04
    2bec:	e0 2d       	mov	r30, r0
    2bee:	8f ef       	ldi	r24, 0xFF	; 255
    2bf0:	80 83       	st	Z, r24

    //注册驱动函数
    gpiox->get_data = _get_data;
    2bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf6:	8d e1       	ldi	r24, 0x1D	; 29
    2bf8:	95 e1       	ldi	r25, 0x15	; 21
    2bfa:	94 87       	std	Z+12, r25	; 0x0c
    2bfc:	83 87       	std	Z+11, r24	; 0x0b
    gpiox->set_data = _set_data;
    2bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    2c00:	fa 81       	ldd	r31, Y+2	; 0x02
    2c02:	87 ed       	ldi	r24, 0xD7	; 215
    2c04:	94 e1       	ldi	r25, 0x14	; 20
    2c06:	92 87       	std	Z+10, r25	; 0x0a
    2c08:	81 87       	std	Z+9, r24	; 0x09
    gpiox->and_self_data = _and_self_data;
    2c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0e:	8d ee       	ldi	r24, 0xED	; 237
    2c10:	94 e1       	ldi	r25, 0x14	; 20
    2c12:	96 87       	std	Z+14, r25	; 0x0e
    2c14:	85 87       	std	Z+13, r24	; 0x0d
    gpiox->nor_self_data = _nor_self_data;
    2c16:	e9 81       	ldd	r30, Y+1	; 0x01
    2c18:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1a:	85 e0       	ldi	r24, 0x05	; 5
    2c1c:	95 e1       	ldi	r25, 0x15	; 21
    2c1e:	90 8b       	std	Z+16, r25	; 0x10
    2c20:	87 87       	std	Z+15, r24	; 0x0f
}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <delay_ms>:


/***==================================== 底层接口 ========================================**/

static void delay_ms(u16_t ms)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	00 d0       	rcall	.+0      	; 0x2c36 <delay_ms+0x6>
    2c36:	0f 92       	push	r0
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	9b 83       	std	Y+3, r25	; 0x03
    2c3e:	8a 83       	std	Y+2, r24	; 0x02
    u8_t i;
    for(i=0;i<ms;i++);
    2c40:	19 82       	std	Y+1, r1	; 0x01
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <delay_ms+0x1a>
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	8f 5f       	subi	r24, 0xFF	; 255
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	28 17       	cp	r18, r24
    2c56:	39 07       	cpc	r19, r25
    2c58:	a8 f3       	brcs	.-22     	; 0x2c44 <delay_ms+0x14>
}
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <_init_pins>:
       .dir_mask = 0xff
    }
};

static void _init_pins(void)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    gpio_init(&gpio_spi);
    2c6e:	85 ed       	ldi	r24, 0xD5	; 213
    2c70:	95 e0       	ldi	r25, 0x05	; 5
    2c72:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <gpio_init>
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <_rst_module>:

static void _rst_module(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    delay_ms(10);
    2c84:	8a e0       	ldi	r24, 0x0A	; 10
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 18 16 	call	0x2c30	; 0x2c30 <delay_ms>
    gpio_init(&gpio_spi);
    2c8c:	85 ed       	ldi	r24, 0xD5	; 213
    2c8e:	95 e0       	ldi	r25, 0x05	; 5
    2c90:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <gpio_init>
	SPI_CS_0
    2c94:	e0 91 e2 05 	lds	r30, 0x05E2
    2c98:	f0 91 e3 05 	lds	r31, 0x05E3
    2c9c:	85 ed       	ldi	r24, 0xD5	; 213
    2c9e:	95 e0       	ldi	r25, 0x05	; 5
    2ca0:	6f eb       	ldi	r22, 0xBF	; 191
    2ca2:	09 95       	icall
	SPI_RST_1
    2ca4:	e0 91 e4 05 	lds	r30, 0x05E4
    2ca8:	f0 91 e5 05 	lds	r31, 0x05E5
    2cac:	85 ed       	ldi	r24, 0xD5	; 213
    2cae:	95 e0       	ldi	r25, 0x05	; 5
    2cb0:	60 e1       	ldi	r22, 0x10	; 16
    2cb2:	09 95       	icall
    delay_ms(10);
    2cb4:	8a e0       	ldi	r24, 0x0A	; 10
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <delay_ms>
    SPI_RST_0
    2cbc:	e0 91 e2 05 	lds	r30, 0x05E2
    2cc0:	f0 91 e3 05 	lds	r31, 0x05E3
    2cc4:	85 ed       	ldi	r24, 0xD5	; 213
    2cc6:	95 e0       	ldi	r25, 0x05	; 5
    2cc8:	6f ee       	ldi	r22, 0xEF	; 239
    2cca:	09 95       	icall
    delay_ms(10);
    2ccc:	8a e0       	ldi	r24, 0x0A	; 10
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 18 16 	call	0x2c30	; 0x2c30 <delay_ms>
    SPI_RST_1
    2cd4:	e0 91 e4 05 	lds	r30, 0x05E4
    2cd8:	f0 91 e5 05 	lds	r31, 0x05E5
    2cdc:	85 ed       	ldi	r24, 0xD5	; 213
    2cde:	95 e0       	ldi	r25, 0x05	; 5
    2ce0:	60 e1       	ldi	r22, 0x10	; 16
    2ce2:	09 95       	icall
}
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <_write_data>:

static void _write_data(u8_t data)
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <_write_data+0x6>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	8a 83       	std	Y+2, r24	; 0x02
  u8_t i;
  SPI_DC_1
    2cf6:	e0 91 e4 05 	lds	r30, 0x05E4
    2cfa:	f0 91 e5 05 	lds	r31, 0x05E5
    2cfe:	85 ed       	ldi	r24, 0xD5	; 213
    2d00:	95 e0       	ldi	r25, 0x05	; 5
    2d02:	60 e2       	ldi	r22, 0x20	; 32
    2d04:	09 95       	icall
  for(i=0;i<8;i++) //发送一个八位数据
    2d06:	19 82       	std	Y+1, r1	; 0x01
    2d08:	2a c0       	rjmp	.+84     	; 0x2d5e <_write_data+0x74>
  {
    if(data&0x80)
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	88 23       	and	r24, r24
    2d0e:	4c f4       	brge	.+18     	; 0x2d22 <_write_data+0x38>
    {
      SPI_MOSI_1
    2d10:	e0 91 e4 05 	lds	r30, 0x05E4
    2d14:	f0 91 e5 05 	lds	r31, 0x05E5
    2d18:	85 ed       	ldi	r24, 0xD5	; 213
    2d1a:	95 e0       	ldi	r25, 0x05	; 5
    2d1c:	64 e0       	ldi	r22, 0x04	; 4
    2d1e:	09 95       	icall
    2d20:	08 c0       	rjmp	.+16     	; 0x2d32 <_write_data+0x48>
    }
    else
    {
      SPI_MOSI_0
    2d22:	e0 91 e2 05 	lds	r30, 0x05E2
    2d26:	f0 91 e3 05 	lds	r31, 0x05E3
    2d2a:	85 ed       	ldi	r24, 0xD5	; 213
    2d2c:	95 e0       	ldi	r25, 0x05	; 5
    2d2e:	6b ef       	ldi	r22, 0xFB	; 251
    2d30:	09 95       	icall
    }
    SPI_CLK_0
    2d32:	e0 91 e2 05 	lds	r30, 0x05E2
    2d36:	f0 91 e3 05 	lds	r31, 0x05E3
    2d3a:	85 ed       	ldi	r24, 0xD5	; 213
    2d3c:	95 e0       	ldi	r25, 0x05	; 5
    2d3e:	6d ef       	ldi	r22, 0xFD	; 253
    2d40:	09 95       	icall
    SPI_CLK_1
    2d42:	e0 91 e4 05 	lds	r30, 0x05E4
    2d46:	f0 91 e5 05 	lds	r31, 0x05E5
    2d4a:	85 ed       	ldi	r24, 0xD5	; 213
    2d4c:	95 e0       	ldi	r25, 0x05	; 5
    2d4e:	62 e0       	ldi	r22, 0x02	; 2
    2d50:	09 95       	icall
    data<<=1;
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	88 0f       	add	r24, r24
    2d56:	8a 83       	std	Y+2, r24	; 0x02

static void _write_data(u8_t data)
{
  u8_t i;
  SPI_DC_1
  for(i=0;i<8;i++) //发送一个八位数据
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	88 30       	cpi	r24, 0x08	; 8
    2d62:	98 f2       	brcs	.-90     	; 0x2d0a <_write_data+0x20>
    }
    SPI_CLK_0
    SPI_CLK_1
    data<<=1;
  }
}
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <_write_cmd>:


static void _write_cmd(u8_t cmd)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <_write_cmd+0x6>
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	8a 83       	std	Y+2, r24	; 0x02
  u8_t  i;
  SPI_DC_0
    2d7a:	e0 91 e2 05 	lds	r30, 0x05E2
    2d7e:	f0 91 e3 05 	lds	r31, 0x05E3
    2d82:	85 ed       	ldi	r24, 0xD5	; 213
    2d84:	95 e0       	ldi	r25, 0x05	; 5
    2d86:	6f ed       	ldi	r22, 0xDF	; 223
    2d88:	09 95       	icall
  for(i=0;i<8;i++) //发送一个八位数据
    2d8a:	19 82       	std	Y+1, r1	; 0x01
    2d8c:	2a c0       	rjmp	.+84     	; 0x2de2 <_write_cmd+0x74>
  {
    if(cmd&0x80)
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	88 23       	and	r24, r24
    2d92:	4c f4       	brge	.+18     	; 0x2da6 <_write_cmd+0x38>
    {
      SPI_MOSI_1
    2d94:	e0 91 e4 05 	lds	r30, 0x05E4
    2d98:	f0 91 e5 05 	lds	r31, 0x05E5
    2d9c:	85 ed       	ldi	r24, 0xD5	; 213
    2d9e:	95 e0       	ldi	r25, 0x05	; 5
    2da0:	64 e0       	ldi	r22, 0x04	; 4
    2da2:	09 95       	icall
    2da4:	08 c0       	rjmp	.+16     	; 0x2db6 <_write_cmd+0x48>
    }
    else
    {
      SPI_MOSI_0
    2da6:	e0 91 e2 05 	lds	r30, 0x05E2
    2daa:	f0 91 e3 05 	lds	r31, 0x05E3
    2dae:	85 ed       	ldi	r24, 0xD5	; 213
    2db0:	95 e0       	ldi	r25, 0x05	; 5
    2db2:	6b ef       	ldi	r22, 0xFB	; 251
    2db4:	09 95       	icall
    }
    SPI_CLK_0
    2db6:	e0 91 e2 05 	lds	r30, 0x05E2
    2dba:	f0 91 e3 05 	lds	r31, 0x05E3
    2dbe:	85 ed       	ldi	r24, 0xD5	; 213
    2dc0:	95 e0       	ldi	r25, 0x05	; 5
    2dc2:	6d ef       	ldi	r22, 0xFD	; 253
    2dc4:	09 95       	icall
    SPI_CLK_1
    2dc6:	e0 91 e4 05 	lds	r30, 0x05E4
    2dca:	f0 91 e5 05 	lds	r31, 0x05E5
    2dce:	85 ed       	ldi	r24, 0xD5	; 213
    2dd0:	95 e0       	ldi	r25, 0x05	; 5
    2dd2:	62 e0       	ldi	r22, 0x02	; 2
    2dd4:	09 95       	icall
    cmd<<=1;
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	88 0f       	add	r24, r24
    2dda:	8a 83       	std	Y+2, r24	; 0x02

static void _write_cmd(u8_t cmd)
{
  u8_t  i;
  SPI_DC_0
  for(i=0;i<8;i++) //发送一个八位数据
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	88 30       	cpi	r24, 0x08	; 8
    2de6:	98 f2       	brcs	.-90     	; 0x2d8e <_write_cmd+0x20>
    }
    SPI_CLK_0
    SPI_CLK_1
    cmd<<=1;
  }
}
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <_fill_8bits_screen>:


/***==================================== oled128x64 API ========================================**/

static void _fill_8bits_screen(struct _oled128x64 *const mythis,u8_t screen)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <_fill_8bits_screen+0x6>
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <_fill_8bits_screen+0x8>
    2dfa:	0f 92       	push	r0
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
    2e04:	6d 83       	std	Y+5, r22	; 0x05
    u8_t i,j;
    for(i=0;i<8;i++)
    2e06:	1a 82       	std	Y+2, r1	; 0x02
    2e08:	21 c0       	rjmp	.+66     	; 0x2e4c <_fill_8bits_screen+0x5a>
      for(j=0;j<128;j++)
    2e0a:	19 82       	std	Y+1, r1	; 0x01
    2e0c:	19 c0       	rjmp	.+50     	; 0x2e40 <_fill_8bits_screen+0x4e>
      {
        mythis->GRAM[i][j] = screen;
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	48 2f       	mov	r20, r24
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	68 2f       	mov	r22, r24
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1e:	ca 01       	movw	r24, r20
    2e20:	96 95       	lsr	r25
    2e22:	98 2f       	mov	r25, r24
    2e24:	88 27       	eor	r24, r24
    2e26:	97 95       	ror	r25
    2e28:	87 95       	ror	r24
    2e2a:	82 0f       	add	r24, r18
    2e2c:	93 1f       	adc	r25, r19
    2e2e:	86 0f       	add	r24, r22
    2e30:	97 1f       	adc	r25, r23
    2e32:	fc 01       	movw	r30, r24
    2e34:	3a 96       	adiw	r30, 0x0a	; 10
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	80 83       	st	Z, r24

static void _fill_8bits_screen(struct _oled128x64 *const mythis,u8_t screen)
{
    u8_t i,j;
    for(i=0;i<8;i++)
      for(j=0;j<128;j++)
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	8f 5f       	subi	r24, 0xFF	; 255
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	88 23       	and	r24, r24
    2e44:	24 f7       	brge	.-56     	; 0x2e0e <_fill_8bits_screen+0x1c>
/***==================================== oled128x64 API ========================================**/

static void _fill_8bits_screen(struct _oled128x64 *const mythis,u8_t screen)
{
    u8_t i,j;
    for(i=0;i<8;i++)
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	8a 83       	std	Y+2, r24	; 0x02
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	88 30       	cpi	r24, 0x08	; 8
    2e50:	e0 f2       	brcs	.-72     	; 0x2e0a <_fill_8bits_screen+0x18>
      for(j=0;j<128;j++)
      {
        mythis->GRAM[i][j] = screen;
      }
}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <_refresh_screen>:


static void _refresh_screen(struct _oled128x64 *const mythis)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <_refresh_screen+0x6>
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <_refresh_screen+0x8>
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	9c 83       	std	Y+4, r25	; 0x04
    2e70:	8b 83       	std	Y+3, r24	; 0x03
    u8_t y,x;
    for(y=0;y<8;y++)
    2e72:	1a 82       	std	Y+2, r1	; 0x02
    2e74:	3c c0       	rjmp	.+120    	; 0x2eee <_refresh_screen+0x8c>
    {
        mythis->write_cmd(0xb0+y);
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	06 80       	ldd	r0, Z+6	; 0x06
    2e7c:	f7 81       	ldd	r31, Z+7	; 0x07
    2e7e:	e0 2d       	mov	r30, r0
    2e80:	8a 81       	ldd	r24, Y+2	; 0x02
    2e82:	80 55       	subi	r24, 0x50	; 80
    2e84:	09 95       	icall
        mythis->write_cmd(0x01);
    2e86:	eb 81       	ldd	r30, Y+3	; 0x03
    2e88:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8a:	06 80       	ldd	r0, Z+6	; 0x06
    2e8c:	f7 81       	ldd	r31, Z+7	; 0x07
    2e8e:	e0 2d       	mov	r30, r0
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	09 95       	icall
        mythis->write_cmd(0x10);
    2e94:	eb 81       	ldd	r30, Y+3	; 0x03
    2e96:	fc 81       	ldd	r31, Y+4	; 0x04
    2e98:	06 80       	ldd	r0, Z+6	; 0x06
    2e9a:	f7 81       	ldd	r31, Z+7	; 0x07
    2e9c:	e0 2d       	mov	r30, r0
    2e9e:	80 e1       	ldi	r24, 0x10	; 16
    2ea0:	09 95       	icall
        for(x=0;x<128;x++)
    2ea2:	19 82       	std	Y+1, r1	; 0x01
    2ea4:	1e c0       	rjmp	.+60     	; 0x2ee2 <_refresh_screen+0x80>
           mythis->write_data(mythis->GRAM[y][x]);
    2ea6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eaa:	a4 81       	ldd	r26, Z+4	; 0x04
    2eac:	b5 81       	ldd	r27, Z+5	; 0x05
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	48 2f       	mov	r20, r24
    2eb2:	50 e0       	ldi	r21, 0x00	; 0
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	68 2f       	mov	r22, r24
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebe:	ca 01       	movw	r24, r20
    2ec0:	96 95       	lsr	r25
    2ec2:	98 2f       	mov	r25, r24
    2ec4:	88 27       	eor	r24, r24
    2ec6:	97 95       	ror	r25
    2ec8:	87 95       	ror	r24
    2eca:	82 0f       	add	r24, r18
    2ecc:	93 1f       	adc	r25, r19
    2ece:	86 0f       	add	r24, r22
    2ed0:	97 1f       	adc	r25, r23
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	3a 96       	adiw	r30, 0x0a	; 10
    2ed6:	80 81       	ld	r24, Z
    2ed8:	fd 01       	movw	r30, r26
    2eda:	09 95       	icall
    for(y=0;y<8;y++)
    {
        mythis->write_cmd(0xb0+y);
        mythis->write_cmd(0x01);
        mythis->write_cmd(0x10);
        for(x=0;x<128;x++)
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	8f 5f       	subi	r24, 0xFF	; 255
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	88 23       	and	r24, r24
    2ee6:	fc f6       	brge	.-66     	; 0x2ea6 <_refresh_screen+0x44>


static void _refresh_screen(struct _oled128x64 *const mythis)
{
    u8_t y,x;
    for(y=0;y<8;y++)
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	8f 5f       	subi	r24, 0xFF	; 255
    2eec:	8a 83       	std	Y+2, r24	; 0x02
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	88 30       	cpi	r24, 0x08	; 8
    2ef2:	08 f2       	brcs	.-126    	; 0x2e76 <_refresh_screen+0x14>
        mythis->write_cmd(0x01);
        mythis->write_cmd(0x10);
        for(x=0;x<128;x++)
           mythis->write_data(mythis->GRAM[y][x]);
    }
}
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <_disp_point>:

static void _disp_point(struct _oled128x64 *const mythis,const u8_t x,const u8_t y)
{
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <_disp_point+0xa>
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <_disp_point+0xc>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	9a 83       	std	Y+2, r25	; 0x02
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	6b 83       	std	Y+3, r22	; 0x03
    2f18:	4c 83       	std	Y+4, r20	; 0x04
    mythis->GRAM[y/8][x] |= (1<<(y%8));
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1c:	86 95       	lsr	r24
    2f1e:	86 95       	lsr	r24
    2f20:	86 95       	lsr	r24
    2f22:	a8 2f       	mov	r26, r24
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	08 2f       	mov	r16, r24
    2f2a:	10 e0       	ldi	r17, 0x00	; 0
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	86 95       	lsr	r24
    2f30:	86 95       	lsr	r24
    2f32:	86 95       	lsr	r24
    2f34:	48 2f       	mov	r20, r24
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	68 2f       	mov	r22, r24
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	29 81       	ldd	r18, Y+1	; 0x01
    2f40:	3a 81       	ldd	r19, Y+2	; 0x02
    2f42:	ca 01       	movw	r24, r20
    2f44:	96 95       	lsr	r25
    2f46:	98 2f       	mov	r25, r24
    2f48:	88 27       	eor	r24, r24
    2f4a:	97 95       	ror	r25
    2f4c:	87 95       	ror	r24
    2f4e:	82 0f       	add	r24, r18
    2f50:	93 1f       	adc	r25, r19
    2f52:	86 0f       	add	r24, r22
    2f54:	97 1f       	adc	r25, r23
    2f56:	fc 01       	movw	r30, r24
    2f58:	3a 96       	adiw	r30, 0x0a	; 10
    2f5a:	80 81       	ld	r24, Z
    2f5c:	48 2f       	mov	r20, r24
    2f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9c 01       	movw	r18, r24
    2f66:	27 70       	andi	r18, 0x07	; 7
    2f68:	30 70       	andi	r19, 0x00	; 0
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	02 c0       	rjmp	.+4      	; 0x2f74 <_disp_point+0x72>
    2f70:	88 0f       	add	r24, r24
    2f72:	99 1f       	adc	r25, r25
    2f74:	2a 95       	dec	r18
    2f76:	e2 f7       	brpl	.-8      	; 0x2f70 <_disp_point+0x6e>
    2f78:	84 2b       	or	r24, r20
    2f7a:	48 2f       	mov	r20, r24
    2f7c:	29 81       	ldd	r18, Y+1	; 0x01
    2f7e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f80:	cd 01       	movw	r24, r26
    2f82:	96 95       	lsr	r25
    2f84:	98 2f       	mov	r25, r24
    2f86:	88 27       	eor	r24, r24
    2f88:	97 95       	ror	r25
    2f8a:	87 95       	ror	r24
    2f8c:	82 0f       	add	r24, r18
    2f8e:	93 1f       	adc	r25, r19
    2f90:	80 0f       	add	r24, r16
    2f92:	91 1f       	adc	r25, r17
    2f94:	fc 01       	movw	r30, r24
    2f96:	3a 96       	adiw	r30, 0x0a	; 10
    2f98:	40 83       	st	Z, r20
}
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	08 95       	ret

00002fac <_erase_point>:

static void _erase_point(struct _oled128x64 *const mythis,u8_t x,u8_t y)
{
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <_erase_point+0xa>
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <_erase_point+0xc>
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	6b 83       	std	Y+3, r22	; 0x03
    2fc2:	4c 83       	std	Y+4, r20	; 0x04
    mythis->GRAM[y/8][x] &= (~(1<<(y%8)));
    2fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc6:	98 2f       	mov	r25, r24
    2fc8:	96 95       	lsr	r25
    2fca:	96 95       	lsr	r25
    2fcc:	96 95       	lsr	r25
    2fce:	a9 2f       	mov	r26, r25
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	08 2f       	mov	r16, r24
    2fd6:	10 e0       	ldi	r17, 0x00	; 0
    2fd8:	49 2f       	mov	r20, r25
    2fda:	50 e0       	ldi	r21, 0x00	; 0
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	68 2f       	mov	r22, r24
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	29 81       	ldd	r18, Y+1	; 0x01
    2fe4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fe6:	ca 01       	movw	r24, r20
    2fe8:	96 95       	lsr	r25
    2fea:	98 2f       	mov	r25, r24
    2fec:	88 27       	eor	r24, r24
    2fee:	97 95       	ror	r25
    2ff0:	87 95       	ror	r24
    2ff2:	82 0f       	add	r24, r18
    2ff4:	93 1f       	adc	r25, r19
    2ff6:	86 0f       	add	r24, r22
    2ff8:	97 1f       	adc	r25, r23
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	3a 96       	adiw	r30, 0x0a	; 10
    2ffe:	80 81       	ld	r24, Z
    3000:	48 2f       	mov	r20, r24
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	88 2f       	mov	r24, r24
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	9c 01       	movw	r18, r24
    300a:	27 70       	andi	r18, 0x07	; 7
    300c:	30 70       	andi	r19, 0x00	; 0
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <_erase_point+0x6c>
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	2a 95       	dec	r18
    301a:	e2 f7       	brpl	.-8      	; 0x3014 <_erase_point+0x68>
    301c:	80 95       	com	r24
    301e:	84 23       	and	r24, r20
    3020:	48 2f       	mov	r20, r24
    3022:	29 81       	ldd	r18, Y+1	; 0x01
    3024:	3a 81       	ldd	r19, Y+2	; 0x02
    3026:	cd 01       	movw	r24, r26
    3028:	96 95       	lsr	r25
    302a:	98 2f       	mov	r25, r24
    302c:	88 27       	eor	r24, r24
    302e:	97 95       	ror	r25
    3030:	87 95       	ror	r24
    3032:	82 0f       	add	r24, r18
    3034:	93 1f       	adc	r25, r19
    3036:	80 0f       	add	r24, r16
    3038:	91 1f       	adc	r25, r17
    303a:	fc 01       	movw	r30, r24
    303c:	3a 96       	adiw	r30, 0x0a	; 10
    303e:	40 83       	st	Z, r20
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	08 95       	ret

00003052 <_disp_char6x8>:

static void _disp_char6x8(struct _oled128x64 *const mythis,u8_t x,u8_t y,s8_t ch)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	28 97       	sbiw	r28, 0x08	; 8
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	9d 83       	std	Y+5, r25	; 0x05
    3068:	8c 83       	std	Y+4, r24	; 0x04
    306a:	6e 83       	std	Y+6, r22	; 0x06
    306c:	4f 83       	std	Y+7, r20	; 0x07
    306e:	28 87       	std	Y+8, r18	; 0x08
    u8_t i,j;
    u8_t ch_index = (u8_t)(ch - ' ');
    3070:	88 85       	ldd	r24, Y+8	; 0x08
    3072:	80 52       	subi	r24, 0x20	; 32
    3074:	89 83       	std	Y+1, r24	; 0x01
    for(i=0;i<6;i++)
    3076:	1b 82       	std	Y+3, r1	; 0x03
    3078:	5f c0       	rjmp	.+190    	; 0x3138 <_disp_char6x8+0xe6>
    {
        for(j=0;j<8;j++)
    307a:	1a 82       	std	Y+2, r1	; 0x02
    307c:	56 c0       	rjmp	.+172    	; 0x312a <_disp_char6x8+0xd8>
        {
            if((mythis->chars6x8)[ch_index][i]&(1<<j))
    307e:	ec 81       	ldd	r30, Y+4	; 0x04
    3080:	fd 81       	ldd	r31, Y+5	; 0x05
    3082:	40 85       	ldd	r20, Z+8	; 0x08
    3084:	51 85       	ldd	r21, Z+9	; 0x09
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	c9 01       	movw	r24, r18
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	9a 01       	movw	r18, r20
    309c:	28 0f       	add	r18, r24
    309e:	39 1f       	adc	r19, r25
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	88 2f       	mov	r24, r24
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	f9 01       	movw	r30, r18
    30a8:	e8 0f       	add	r30, r24
    30aa:	f9 1f       	adc	r31, r25
    30ac:	80 81       	ld	r24, Z
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	88 2f       	mov	r24, r24
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a9 01       	movw	r20, r18
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <_disp_char6x8+0x6e>
    30bc:	55 95       	asr	r21
    30be:	47 95       	ror	r20
    30c0:	8a 95       	dec	r24
    30c2:	e2 f7       	brpl	.-8      	; 0x30bc <_disp_char6x8+0x6a>
    30c4:	ca 01       	movw	r24, r20
    30c6:	81 70       	andi	r24, 0x01	; 1
    30c8:	90 70       	andi	r25, 0x00	; 0
    30ca:	88 23       	and	r24, r24
    30cc:	b1 f0       	breq	.+44     	; 0x30fa <_disp_char6x8+0xa8>
                mythis->disp_point(mythis,x+i,y+j);
    30ce:	8c 81       	ldd	r24, Y+4	; 0x04
    30d0:	9d 81       	ldd	r25, Y+5	; 0x05
    30d2:	fc 01       	movw	r30, r24
    30d4:	e4 5f       	subi	r30, 0xF4	; 244
    30d6:	fb 4f       	sbci	r31, 0xFB	; 251
    30d8:	01 90       	ld	r0, Z+
    30da:	f0 81       	ld	r31, Z
    30dc:	e0 2d       	mov	r30, r0
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	39 2f       	mov	r19, r25
    30e4:	38 0f       	add	r19, r24
    30e6:	9f 81       	ldd	r25, Y+7	; 0x07
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	29 2f       	mov	r18, r25
    30ec:	28 0f       	add	r18, r24
    30ee:	8c 81       	ldd	r24, Y+4	; 0x04
    30f0:	9d 81       	ldd	r25, Y+5	; 0x05
    30f2:	63 2f       	mov	r22, r19
    30f4:	42 2f       	mov	r20, r18
    30f6:	09 95       	icall
    30f8:	15 c0       	rjmp	.+42     	; 0x3124 <_disp_char6x8+0xd2>
            else
                mythis->erase_point(mythis,x+i,y+j);
    30fa:	8c 81       	ldd	r24, Y+4	; 0x04
    30fc:	9d 81       	ldd	r25, Y+5	; 0x05
    30fe:	fc 01       	movw	r30, r24
    3100:	e2 5f       	subi	r30, 0xF2	; 242
    3102:	fb 4f       	sbci	r31, 0xFB	; 251
    3104:	01 90       	ld	r0, Z+
    3106:	f0 81       	ld	r31, Z
    3108:	e0 2d       	mov	r30, r0
    310a:	9e 81       	ldd	r25, Y+6	; 0x06
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	39 2f       	mov	r19, r25
    3110:	38 0f       	add	r19, r24
    3112:	9f 81       	ldd	r25, Y+7	; 0x07
    3114:	8a 81       	ldd	r24, Y+2	; 0x02
    3116:	29 2f       	mov	r18, r25
    3118:	28 0f       	add	r18, r24
    311a:	8c 81       	ldd	r24, Y+4	; 0x04
    311c:	9d 81       	ldd	r25, Y+5	; 0x05
    311e:	63 2f       	mov	r22, r19
    3120:	42 2f       	mov	r20, r18
    3122:	09 95       	icall
{
    u8_t i,j;
    u8_t ch_index = (u8_t)(ch - ' ');
    for(i=0;i<6;i++)
    {
        for(j=0;j<8;j++)
    3124:	8a 81       	ldd	r24, Y+2	; 0x02
    3126:	8f 5f       	subi	r24, 0xFF	; 255
    3128:	8a 83       	std	Y+2, r24	; 0x02
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	88 30       	cpi	r24, 0x08	; 8
    312e:	08 f4       	brcc	.+2      	; 0x3132 <_disp_char6x8+0xe0>
    3130:	a6 cf       	rjmp	.-180    	; 0x307e <_disp_char6x8+0x2c>

static void _disp_char6x8(struct _oled128x64 *const mythis,u8_t x,u8_t y,s8_t ch)
{
    u8_t i,j;
    u8_t ch_index = (u8_t)(ch - ' ');
    for(i=0;i<6;i++)
    3132:	8b 81       	ldd	r24, Y+3	; 0x03
    3134:	8f 5f       	subi	r24, 0xFF	; 255
    3136:	8b 83       	std	Y+3, r24	; 0x03
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	86 30       	cpi	r24, 0x06	; 6
    313c:	08 f4       	brcc	.+2      	; 0x3140 <_disp_char6x8+0xee>
    313e:	9d cf       	rjmp	.-198    	; 0x307a <_disp_char6x8+0x28>
                mythis->disp_point(mythis,x+i,y+j);
            else
                mythis->erase_point(mythis,x+i,y+j);
        }
    }
}
    3140:	28 96       	adiw	r28, 0x08	; 8
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <_init_oled>:


static void _init_oled(oled128x64 *const oled)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	00 d0       	rcall	.+0      	; 0x3158 <_init_oled+0x6>
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
    oled->init_pins();
    3160:	e9 81       	ldd	r30, Y+1	; 0x01
    3162:	fa 81       	ldd	r31, Y+2	; 0x02
    3164:	01 90       	ld	r0, Z+
    3166:	f0 81       	ld	r31, Z
    3168:	e0 2d       	mov	r30, r0
    316a:	09 95       	icall
    oled->rst_module();
    316c:	e9 81       	ldd	r30, Y+1	; 0x01
    316e:	fa 81       	ldd	r31, Y+2	; 0x02
    3170:	02 80       	ldd	r0, Z+2	; 0x02
    3172:	f3 81       	ldd	r31, Z+3	; 0x03
    3174:	e0 2d       	mov	r30, r0
    3176:	09 95       	icall
	oled->write_cmd(0xae);//--turn off oled panel
    3178:	e9 81       	ldd	r30, Y+1	; 0x01
    317a:	fa 81       	ldd	r31, Y+2	; 0x02
    317c:	06 80       	ldd	r0, Z+6	; 0x06
    317e:	f7 81       	ldd	r31, Z+7	; 0x07
    3180:	e0 2d       	mov	r30, r0
    3182:	8e ea       	ldi	r24, 0xAE	; 174
    3184:	09 95       	icall
	oled->write_cmd(0x00);//---set low column address
    3186:	e9 81       	ldd	r30, Y+1	; 0x01
    3188:	fa 81       	ldd	r31, Y+2	; 0x02
    318a:	06 80       	ldd	r0, Z+6	; 0x06
    318c:	f7 81       	ldd	r31, Z+7	; 0x07
    318e:	e0 2d       	mov	r30, r0
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	09 95       	icall
	oled->write_cmd(0x10);//---set high column address
    3194:	e9 81       	ldd	r30, Y+1	; 0x01
    3196:	fa 81       	ldd	r31, Y+2	; 0x02
    3198:	06 80       	ldd	r0, Z+6	; 0x06
    319a:	f7 81       	ldd	r31, Z+7	; 0x07
    319c:	e0 2d       	mov	r30, r0
    319e:	80 e1       	ldi	r24, 0x10	; 16
    31a0:	09 95       	icall
	oled->write_cmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
    31a2:	e9 81       	ldd	r30, Y+1	; 0x01
    31a4:	fa 81       	ldd	r31, Y+2	; 0x02
    31a6:	06 80       	ldd	r0, Z+6	; 0x06
    31a8:	f7 81       	ldd	r31, Z+7	; 0x07
    31aa:	e0 2d       	mov	r30, r0
    31ac:	80 e4       	ldi	r24, 0x40	; 64
    31ae:	09 95       	icall
	oled->write_cmd(0x81);//--set contrast control register
    31b0:	e9 81       	ldd	r30, Y+1	; 0x01
    31b2:	fa 81       	ldd	r31, Y+2	; 0x02
    31b4:	06 80       	ldd	r0, Z+6	; 0x06
    31b6:	f7 81       	ldd	r31, Z+7	; 0x07
    31b8:	e0 2d       	mov	r30, r0
    31ba:	81 e8       	ldi	r24, 0x81	; 129
    31bc:	09 95       	icall
	oled->write_cmd(0xcf); // Set SEG Output Current Brightness
    31be:	e9 81       	ldd	r30, Y+1	; 0x01
    31c0:	fa 81       	ldd	r31, Y+2	; 0x02
    31c2:	06 80       	ldd	r0, Z+6	; 0x06
    31c4:	f7 81       	ldd	r31, Z+7	; 0x07
    31c6:	e0 2d       	mov	r30, r0
    31c8:	8f ec       	ldi	r24, 0xCF	; 207
    31ca:	09 95       	icall
	oled->write_cmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
    31cc:	e9 81       	ldd	r30, Y+1	; 0x01
    31ce:	fa 81       	ldd	r31, Y+2	; 0x02
    31d0:	06 80       	ldd	r0, Z+6	; 0x06
    31d2:	f7 81       	ldd	r31, Z+7	; 0x07
    31d4:	e0 2d       	mov	r30, r0
    31d6:	81 ea       	ldi	r24, 0xA1	; 161
    31d8:	09 95       	icall
	oled->write_cmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
    31da:	e9 81       	ldd	r30, Y+1	; 0x01
    31dc:	fa 81       	ldd	r31, Y+2	; 0x02
    31de:	06 80       	ldd	r0, Z+6	; 0x06
    31e0:	f7 81       	ldd	r31, Z+7	; 0x07
    31e2:	e0 2d       	mov	r30, r0
    31e4:	88 ec       	ldi	r24, 0xC8	; 200
    31e6:	09 95       	icall
	oled->write_cmd(0xa6);//--set normal display
    31e8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ea:	fa 81       	ldd	r31, Y+2	; 0x02
    31ec:	06 80       	ldd	r0, Z+6	; 0x06
    31ee:	f7 81       	ldd	r31, Z+7	; 0x07
    31f0:	e0 2d       	mov	r30, r0
    31f2:	86 ea       	ldi	r24, 0xA6	; 166
    31f4:	09 95       	icall
	oled->write_cmd(0xa8);//--set multiplex ratio(1 to 64)
    31f6:	e9 81       	ldd	r30, Y+1	; 0x01
    31f8:	fa 81       	ldd	r31, Y+2	; 0x02
    31fa:	06 80       	ldd	r0, Z+6	; 0x06
    31fc:	f7 81       	ldd	r31, Z+7	; 0x07
    31fe:	e0 2d       	mov	r30, r0
    3200:	88 ea       	ldi	r24, 0xA8	; 168
    3202:	09 95       	icall
	oled->write_cmd(0x3f);//--1/64 duty
    3204:	e9 81       	ldd	r30, Y+1	; 0x01
    3206:	fa 81       	ldd	r31, Y+2	; 0x02
    3208:	06 80       	ldd	r0, Z+6	; 0x06
    320a:	f7 81       	ldd	r31, Z+7	; 0x07
    320c:	e0 2d       	mov	r30, r0
    320e:	8f e3       	ldi	r24, 0x3F	; 63
    3210:	09 95       	icall
	oled->write_cmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
    3212:	e9 81       	ldd	r30, Y+1	; 0x01
    3214:	fa 81       	ldd	r31, Y+2	; 0x02
    3216:	06 80       	ldd	r0, Z+6	; 0x06
    3218:	f7 81       	ldd	r31, Z+7	; 0x07
    321a:	e0 2d       	mov	r30, r0
    321c:	83 ed       	ldi	r24, 0xD3	; 211
    321e:	09 95       	icall
	oled->write_cmd(0x00);//-not offset
    3220:	e9 81       	ldd	r30, Y+1	; 0x01
    3222:	fa 81       	ldd	r31, Y+2	; 0x02
    3224:	06 80       	ldd	r0, Z+6	; 0x06
    3226:	f7 81       	ldd	r31, Z+7	; 0x07
    3228:	e0 2d       	mov	r30, r0
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	09 95       	icall
	oled->write_cmd(0xd5);//--set display clock divide ratio/oscillator frequency
    322e:	e9 81       	ldd	r30, Y+1	; 0x01
    3230:	fa 81       	ldd	r31, Y+2	; 0x02
    3232:	06 80       	ldd	r0, Z+6	; 0x06
    3234:	f7 81       	ldd	r31, Z+7	; 0x07
    3236:	e0 2d       	mov	r30, r0
    3238:	85 ed       	ldi	r24, 0xD5	; 213
    323a:	09 95       	icall
	oled->write_cmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
    323c:	e9 81       	ldd	r30, Y+1	; 0x01
    323e:	fa 81       	ldd	r31, Y+2	; 0x02
    3240:	06 80       	ldd	r0, Z+6	; 0x06
    3242:	f7 81       	ldd	r31, Z+7	; 0x07
    3244:	e0 2d       	mov	r30, r0
    3246:	80 e8       	ldi	r24, 0x80	; 128
    3248:	09 95       	icall
	oled->write_cmd(0xd9);//--set pre-charge period
    324a:	e9 81       	ldd	r30, Y+1	; 0x01
    324c:	fa 81       	ldd	r31, Y+2	; 0x02
    324e:	06 80       	ldd	r0, Z+6	; 0x06
    3250:	f7 81       	ldd	r31, Z+7	; 0x07
    3252:	e0 2d       	mov	r30, r0
    3254:	89 ed       	ldi	r24, 0xD9	; 217
    3256:	09 95       	icall
	oled->write_cmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
    3258:	e9 81       	ldd	r30, Y+1	; 0x01
    325a:	fa 81       	ldd	r31, Y+2	; 0x02
    325c:	06 80       	ldd	r0, Z+6	; 0x06
    325e:	f7 81       	ldd	r31, Z+7	; 0x07
    3260:	e0 2d       	mov	r30, r0
    3262:	81 ef       	ldi	r24, 0xF1	; 241
    3264:	09 95       	icall
	oled->write_cmd(0xda);//--set com pins hardware configuration
    3266:	e9 81       	ldd	r30, Y+1	; 0x01
    3268:	fa 81       	ldd	r31, Y+2	; 0x02
    326a:	06 80       	ldd	r0, Z+6	; 0x06
    326c:	f7 81       	ldd	r31, Z+7	; 0x07
    326e:	e0 2d       	mov	r30, r0
    3270:	8a ed       	ldi	r24, 0xDA	; 218
    3272:	09 95       	icall
	oled->write_cmd(0x12);
    3274:	e9 81       	ldd	r30, Y+1	; 0x01
    3276:	fa 81       	ldd	r31, Y+2	; 0x02
    3278:	06 80       	ldd	r0, Z+6	; 0x06
    327a:	f7 81       	ldd	r31, Z+7	; 0x07
    327c:	e0 2d       	mov	r30, r0
    327e:	82 e1       	ldi	r24, 0x12	; 18
    3280:	09 95       	icall
	oled->write_cmd(0xdb);//--set vcomh
    3282:	e9 81       	ldd	r30, Y+1	; 0x01
    3284:	fa 81       	ldd	r31, Y+2	; 0x02
    3286:	06 80       	ldd	r0, Z+6	; 0x06
    3288:	f7 81       	ldd	r31, Z+7	; 0x07
    328a:	e0 2d       	mov	r30, r0
    328c:	8b ed       	ldi	r24, 0xDB	; 219
    328e:	09 95       	icall
	oled->write_cmd(0x40);//Set VCOM Deselect Level
    3290:	e9 81       	ldd	r30, Y+1	; 0x01
    3292:	fa 81       	ldd	r31, Y+2	; 0x02
    3294:	06 80       	ldd	r0, Z+6	; 0x06
    3296:	f7 81       	ldd	r31, Z+7	; 0x07
    3298:	e0 2d       	mov	r30, r0
    329a:	80 e4       	ldi	r24, 0x40	; 64
    329c:	09 95       	icall
	oled->write_cmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
    329e:	e9 81       	ldd	r30, Y+1	; 0x01
    32a0:	fa 81       	ldd	r31, Y+2	; 0x02
    32a2:	06 80       	ldd	r0, Z+6	; 0x06
    32a4:	f7 81       	ldd	r31, Z+7	; 0x07
    32a6:	e0 2d       	mov	r30, r0
    32a8:	80 e2       	ldi	r24, 0x20	; 32
    32aa:	09 95       	icall
	oled->write_cmd(0x02);//
    32ac:	e9 81       	ldd	r30, Y+1	; 0x01
    32ae:	fa 81       	ldd	r31, Y+2	; 0x02
    32b0:	06 80       	ldd	r0, Z+6	; 0x06
    32b2:	f7 81       	ldd	r31, Z+7	; 0x07
    32b4:	e0 2d       	mov	r30, r0
    32b6:	82 e0       	ldi	r24, 0x02	; 2
    32b8:	09 95       	icall
	oled->write_cmd(0x8d);//--set Charge Pump enable/disable
    32ba:	e9 81       	ldd	r30, Y+1	; 0x01
    32bc:	fa 81       	ldd	r31, Y+2	; 0x02
    32be:	06 80       	ldd	r0, Z+6	; 0x06
    32c0:	f7 81       	ldd	r31, Z+7	; 0x07
    32c2:	e0 2d       	mov	r30, r0
    32c4:	8d e8       	ldi	r24, 0x8D	; 141
    32c6:	09 95       	icall
	oled->write_cmd(0x14);//--set(0x10) disable
    32c8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ca:	fa 81       	ldd	r31, Y+2	; 0x02
    32cc:	06 80       	ldd	r0, Z+6	; 0x06
    32ce:	f7 81       	ldd	r31, Z+7	; 0x07
    32d0:	e0 2d       	mov	r30, r0
    32d2:	84 e1       	ldi	r24, 0x14	; 20
    32d4:	09 95       	icall
	oled->write_cmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
    32d6:	e9 81       	ldd	r30, Y+1	; 0x01
    32d8:	fa 81       	ldd	r31, Y+2	; 0x02
    32da:	06 80       	ldd	r0, Z+6	; 0x06
    32dc:	f7 81       	ldd	r31, Z+7	; 0x07
    32de:	e0 2d       	mov	r30, r0
    32e0:	84 ea       	ldi	r24, 0xA4	; 164
    32e2:	09 95       	icall
	oled->write_cmd(0xa6);// Disable Inverse Display On (0xa6/a7)
    32e4:	e9 81       	ldd	r30, Y+1	; 0x01
    32e6:	fa 81       	ldd	r31, Y+2	; 0x02
    32e8:	06 80       	ldd	r0, Z+6	; 0x06
    32ea:	f7 81       	ldd	r31, Z+7	; 0x07
    32ec:	e0 2d       	mov	r30, r0
    32ee:	86 ea       	ldi	r24, 0xA6	; 166
    32f0:	09 95       	icall
	oled->write_cmd(0xaf);//--turn on oled panel
    32f2:	e9 81       	ldd	r30, Y+1	; 0x01
    32f4:	fa 81       	ldd	r31, Y+2	; 0x02
    32f6:	06 80       	ldd	r0, Z+6	; 0x06
    32f8:	f7 81       	ldd	r31, Z+7	; 0x07
    32fa:	e0 2d       	mov	r30, r0
    32fc:	8f ea       	ldi	r24, 0xAF	; 175
    32fe:	09 95       	icall
}
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <_disp_str6x8>:

static void _disp_str6x8(struct _oled128x64 *const mythis,u8_t x,u8_t y,const s8_t *str)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	00 d0       	rcall	.+0      	; 0x3310 <_disp_str6x8+0x6>
    3310:	00 d0       	rcall	.+0      	; 0x3312 <_disp_str6x8+0x8>
    3312:	00 d0       	rcall	.+0      	; 0x3314 <_disp_str6x8+0xa>
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	9a 83       	std	Y+2, r25	; 0x02
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	6b 83       	std	Y+3, r22	; 0x03
    331e:	4c 83       	std	Y+4, r20	; 0x04
    3320:	3e 83       	std	Y+6, r19	; 0x06
    3322:	2d 83       	std	Y+5, r18	; 0x05
    3324:	1f c0       	rjmp	.+62     	; 0x3364 <_disp_str6x8+0x5a>
    while(*str)
    {
        mythis->disp_char6x8(mythis,x,y,*str);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	fc 01       	movw	r30, r24
    332c:	ee 5e       	subi	r30, 0xEE	; 238
    332e:	fb 4f       	sbci	r31, 0xFB	; 251
    3330:	a0 81       	ld	r26, Z
    3332:	b1 81       	ldd	r27, Z+1	; 0x01
    3334:	ed 81       	ldd	r30, Y+5	; 0x05
    3336:	fe 81       	ldd	r31, Y+6	; 0x06
    3338:	20 81       	ld	r18, Z
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	6b 81       	ldd	r22, Y+3	; 0x03
    3340:	4c 81       	ldd	r20, Y+4	; 0x04
    3342:	fd 01       	movw	r30, r26
    3344:	09 95       	icall
        x += 6;
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	8a 5f       	subi	r24, 0xFA	; 250
    334a:	8b 83       	std	Y+3, r24	; 0x03
        if(x>=128)
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	88 23       	and	r24, r24
    3350:	24 f4       	brge	.+8      	; 0x335a <_disp_str6x8+0x50>
        {
            x = 0;
    3352:	1b 82       	std	Y+3, r1	; 0x03
            y += 8;
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	88 5f       	subi	r24, 0xF8	; 248
    3358:	8c 83       	std	Y+4, r24	; 0x04
        }
        ++str;
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	8d 83       	std	Y+5, r24	; 0x05
	oled->write_cmd(0xaf);//--turn on oled panel
}

static void _disp_str6x8(struct _oled128x64 *const mythis,u8_t x,u8_t y,const s8_t *str)
{
    while(*str)
    3364:	ed 81       	ldd	r30, Y+5	; 0x05
    3366:	fe 81       	ldd	r31, Y+6	; 0x06
    3368:	80 81       	ld	r24, Z
    336a:	88 23       	and	r24, r24
    336c:	e1 f6       	brne	.-72     	; 0x3326 <_disp_str6x8+0x1c>
            x = 0;
            y += 8;
        }
        ++str;
    }
}
    336e:	26 96       	adiw	r28, 0x06	; 6
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	cf 91       	pop	r28
    337c:	df 91       	pop	r29
    337e:	08 95       	ret

00003380 <_disp_bin_pic_hle>:


static void _disp_bin_pic_hle(struct _oled128x64 *const mythis,u8_t x,u8_t y,u8_t w,u8_t h,const u8_t *pic)
{
    3380:	ef 92       	push	r14
    3382:	ff 92       	push	r15
    3384:	0f 93       	push	r16
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	2b 97       	sbiw	r28, 0x0b	; 11
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	9d 83       	std	Y+5, r25	; 0x05
    339c:	8c 83       	std	Y+4, r24	; 0x04
    339e:	6e 83       	std	Y+6, r22	; 0x06
    33a0:	4f 83       	std	Y+7, r20	; 0x07
    33a2:	28 87       	std	Y+8, r18	; 0x08
    33a4:	09 87       	std	Y+9, r16	; 0x09
    33a6:	fb 86       	std	Y+11, r15	; 0x0b
    33a8:	ea 86       	std	Y+10, r14	; 0x0a
    u16_t i=0;
    33aa:	1b 82       	std	Y+3, r1	; 0x03
    33ac:	1a 82       	std	Y+2, r1	; 0x02
    33ae:	73 c0       	rjmp	.+230    	; 0x3496 <_disp_bin_pic_hle+0x116>
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    33b0:	19 82       	std	Y+1, r1	; 0x01
    33b2:	68 c0       	rjmp	.+208    	; 0x3484 <_disp_bin_pic_hle+0x104>
        {
            if((*pic)&(1<<k))
    33b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    33b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    33b8:	80 81       	ld	r24, Z
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	88 2f       	mov	r24, r24
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	a9 01       	movw	r20, r18
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <_disp_bin_pic_hle+0x4c>
    33c8:	55 95       	asr	r21
    33ca:	47 95       	ror	r20
    33cc:	8a 95       	dec	r24
    33ce:	e2 f7       	brpl	.-8      	; 0x33c8 <_disp_bin_pic_hle+0x48>
    33d0:	ca 01       	movw	r24, r20
    33d2:	81 70       	andi	r24, 0x01	; 1
    33d4:	90 70       	andi	r25, 0x00	; 0
    33d6:	88 23       	and	r24, r24
    33d8:	39 f1       	breq	.+78     	; 0x3428 <_disp_bin_pic_hle+0xa8>
                mythis->disp_point(mythis,x+(i%w),y+i/w);
    33da:	8c 81       	ldd	r24, Y+4	; 0x04
    33dc:	9d 81       	ldd	r25, Y+5	; 0x05
    33de:	fc 01       	movw	r30, r24
    33e0:	e4 5f       	subi	r30, 0xF4	; 244
    33e2:	fb 4f       	sbci	r31, 0xFB	; 251
    33e4:	01 90       	ld	r0, Z+
    33e6:	f0 81       	ld	r31, Z
    33e8:	e0 2d       	mov	r30, r0
    33ea:	88 85       	ldd	r24, Y+8	; 0x08
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	9b 81       	ldd	r25, Y+3	; 0x03
    33f4:	b9 01       	movw	r22, r18
    33f6:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    33fa:	98 2f       	mov	r25, r24
    33fc:	8e 81       	ldd	r24, Y+6	; 0x06
    33fe:	49 2f       	mov	r20, r25
    3400:	48 0f       	add	r20, r24
    3402:	88 85       	ldd	r24, Y+8	; 0x08
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	8a 81       	ldd	r24, Y+2	; 0x02
    340a:	9b 81       	ldd	r25, Y+3	; 0x03
    340c:	b9 01       	movw	r22, r18
    340e:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    3412:	cb 01       	movw	r24, r22
    3414:	98 2f       	mov	r25, r24
    3416:	8f 81       	ldd	r24, Y+7	; 0x07
    3418:	29 2f       	mov	r18, r25
    341a:	28 0f       	add	r18, r24
    341c:	8c 81       	ldd	r24, Y+4	; 0x04
    341e:	9d 81       	ldd	r25, Y+5	; 0x05
    3420:	64 2f       	mov	r22, r20
    3422:	42 2f       	mov	r20, r18
    3424:	09 95       	icall
    3426:	26 c0       	rjmp	.+76     	; 0x3474 <_disp_bin_pic_hle+0xf4>
            else
                mythis->erase_point(mythis,x+(i%w),y+i/w);
    3428:	8c 81       	ldd	r24, Y+4	; 0x04
    342a:	9d 81       	ldd	r25, Y+5	; 0x05
    342c:	fc 01       	movw	r30, r24
    342e:	e2 5f       	subi	r30, 0xF2	; 242
    3430:	fb 4f       	sbci	r31, 0xFB	; 251
    3432:	01 90       	ld	r0, Z+
    3434:	f0 81       	ld	r31, Z
    3436:	e0 2d       	mov	r30, r0
    3438:	88 85       	ldd	r24, Y+8	; 0x08
    343a:	28 2f       	mov	r18, r24
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	b9 01       	movw	r22, r18
    3444:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    3448:	98 2f       	mov	r25, r24
    344a:	8e 81       	ldd	r24, Y+6	; 0x06
    344c:	49 2f       	mov	r20, r25
    344e:	48 0f       	add	r20, r24
    3450:	88 85       	ldd	r24, Y+8	; 0x08
    3452:	28 2f       	mov	r18, r24
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	9b 81       	ldd	r25, Y+3	; 0x03
    345a:	b9 01       	movw	r22, r18
    345c:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    3460:	cb 01       	movw	r24, r22
    3462:	98 2f       	mov	r25, r24
    3464:	8f 81       	ldd	r24, Y+7	; 0x07
    3466:	29 2f       	mov	r18, r25
    3468:	28 0f       	add	r18, r24
    346a:	8c 81       	ldd	r24, Y+4	; 0x04
    346c:	9d 81       	ldd	r25, Y+5	; 0x05
    346e:	64 2f       	mov	r22, r20
    3470:	42 2f       	mov	r20, r18
    3472:	09 95       	icall
            i++;
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	9b 81       	ldd	r25, Y+3	; 0x03
    3478:	01 96       	adiw	r24, 0x01	; 1
    347a:	9b 83       	std	Y+3, r25	; 0x03
    347c:	8a 83       	std	Y+2, r24	; 0x02
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	8f 5f       	subi	r24, 0xFF	; 255
    3482:	89 83       	std	Y+1, r24	; 0x01
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	88 30       	cpi	r24, 0x08	; 8
    3488:	08 f4       	brcc	.+2      	; 0x348c <_disp_bin_pic_hle+0x10c>
    348a:	94 cf       	rjmp	.-216    	; 0x33b4 <_disp_bin_pic_hle+0x34>
                mythis->disp_point(mythis,x+(i%w),y+i/w);
            else
                mythis->erase_point(mythis,x+(i%w),y+i/w);
            i++;
        }
        pic++;
    348c:	8a 85       	ldd	r24, Y+10	; 0x0a
    348e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	9b 87       	std	Y+11, r25	; 0x0b
    3494:	8a 87       	std	Y+10, r24	; 0x0a

static void _disp_bin_pic_hle(struct _oled128x64 *const mythis,u8_t x,u8_t y,u8_t w,u8_t h,const u8_t *pic)
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    3496:	88 85       	ldd	r24, Y+8	; 0x08
    3498:	28 2f       	mov	r18, r24
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	89 85       	ldd	r24, Y+9	; 0x09
    349e:	88 2f       	mov	r24, r24
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	ac 01       	movw	r20, r24
    34a4:	24 9f       	mul	r18, r20
    34a6:	c0 01       	movw	r24, r0
    34a8:	25 9f       	mul	r18, r21
    34aa:	90 0d       	add	r25, r0
    34ac:	34 9f       	mul	r19, r20
    34ae:	90 0d       	add	r25, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	9c 01       	movw	r18, r24
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	9b 81       	ldd	r25, Y+3	; 0x03
    34b8:	82 17       	cp	r24, r18
    34ba:	93 07       	cpc	r25, r19
    34bc:	08 f4       	brcc	.+2      	; 0x34c0 <_disp_bin_pic_hle+0x140>
    34be:	78 cf       	rjmp	.-272    	; 0x33b0 <_disp_bin_pic_hle+0x30>
                mythis->erase_point(mythis,x+(i%w),y+i/w);
            i++;
        }
        pic++;
    }
}
    34c0:	2b 96       	adiw	r28, 0x0b	; 11
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	cf 91       	pop	r28
    34ce:	df 91       	pop	r29
    34d0:	0f 91       	pop	r16
    34d2:	ff 90       	pop	r15
    34d4:	ef 90       	pop	r14
    34d6:	08 95       	ret

000034d8 <_disp_bin_pic_hbe>:

static void _disp_bin_pic_hbe(struct _oled128x64 *const mythis,u8_t x,u8_t y,u8_t w,u8_t h,const u8_t *pic)
{
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	2b 97       	sbiw	r28, 0x0b	; 11
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	9d 83       	std	Y+5, r25	; 0x05
    34f4:	8c 83       	std	Y+4, r24	; 0x04
    34f6:	6e 83       	std	Y+6, r22	; 0x06
    34f8:	4f 83       	std	Y+7, r20	; 0x07
    34fa:	28 87       	std	Y+8, r18	; 0x08
    34fc:	09 87       	std	Y+9, r16	; 0x09
    34fe:	fb 86       	std	Y+11, r15	; 0x0b
    3500:	ea 86       	std	Y+10, r14	; 0x0a
    u16_t i=0;
    3502:	1b 82       	std	Y+3, r1	; 0x03
    3504:	1a 82       	std	Y+2, r1	; 0x02
    3506:	74 c0       	rjmp	.+232    	; 0x35f0 <_disp_bin_pic_hbe+0x118>
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    3508:	19 82       	std	Y+1, r1	; 0x01
    350a:	69 c0       	rjmp	.+210    	; 0x35de <_disp_bin_pic_hbe+0x106>
        {
            if((*pic)&(0x80>>k))
    350c:	ea 85       	ldd	r30, Y+10	; 0x0a
    350e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3510:	80 81       	ld	r24, Z
    3512:	48 2f       	mov	r20, r24
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	28 2f       	mov	r18, r24
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	80 e8       	ldi	r24, 0x80	; 128
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	02 2e       	mov	r0, r18
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <_disp_bin_pic_hbe+0x50>
    3524:	95 95       	asr	r25
    3526:	87 95       	ror	r24
    3528:	0a 94       	dec	r0
    352a:	e2 f7       	brpl	.-8      	; 0x3524 <_disp_bin_pic_hbe+0x4c>
    352c:	84 23       	and	r24, r20
    352e:	95 23       	and	r25, r21
    3530:	00 97       	sbiw	r24, 0x00	; 0
    3532:	39 f1       	breq	.+78     	; 0x3582 <_disp_bin_pic_hbe+0xaa>
                mythis->disp_point(mythis,x+(i%w),y+i/w);
    3534:	8c 81       	ldd	r24, Y+4	; 0x04
    3536:	9d 81       	ldd	r25, Y+5	; 0x05
    3538:	fc 01       	movw	r30, r24
    353a:	e4 5f       	subi	r30, 0xF4	; 244
    353c:	fb 4f       	sbci	r31, 0xFB	; 251
    353e:	01 90       	ld	r0, Z+
    3540:	f0 81       	ld	r31, Z
    3542:	e0 2d       	mov	r30, r0
    3544:	88 85       	ldd	r24, Y+8	; 0x08
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	9b 81       	ldd	r25, Y+3	; 0x03
    354e:	b9 01       	movw	r22, r18
    3550:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    3554:	98 2f       	mov	r25, r24
    3556:	8e 81       	ldd	r24, Y+6	; 0x06
    3558:	49 2f       	mov	r20, r25
    355a:	48 0f       	add	r20, r24
    355c:	88 85       	ldd	r24, Y+8	; 0x08
    355e:	28 2f       	mov	r18, r24
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	b9 01       	movw	r22, r18
    3568:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    356c:	cb 01       	movw	r24, r22
    356e:	98 2f       	mov	r25, r24
    3570:	8f 81       	ldd	r24, Y+7	; 0x07
    3572:	29 2f       	mov	r18, r25
    3574:	28 0f       	add	r18, r24
    3576:	8c 81       	ldd	r24, Y+4	; 0x04
    3578:	9d 81       	ldd	r25, Y+5	; 0x05
    357a:	64 2f       	mov	r22, r20
    357c:	42 2f       	mov	r20, r18
    357e:	09 95       	icall
    3580:	26 c0       	rjmp	.+76     	; 0x35ce <_disp_bin_pic_hbe+0xf6>
            else
                mythis->erase_point(mythis,x+(i%w),y+i/w);
    3582:	8c 81       	ldd	r24, Y+4	; 0x04
    3584:	9d 81       	ldd	r25, Y+5	; 0x05
    3586:	fc 01       	movw	r30, r24
    3588:	e2 5f       	subi	r30, 0xF2	; 242
    358a:	fb 4f       	sbci	r31, 0xFB	; 251
    358c:	01 90       	ld	r0, Z+
    358e:	f0 81       	ld	r31, Z
    3590:	e0 2d       	mov	r30, r0
    3592:	88 85       	ldd	r24, Y+8	; 0x08
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	8a 81       	ldd	r24, Y+2	; 0x02
    359a:	9b 81       	ldd	r25, Y+3	; 0x03
    359c:	b9 01       	movw	r22, r18
    359e:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    35a2:	98 2f       	mov	r25, r24
    35a4:	8e 81       	ldd	r24, Y+6	; 0x06
    35a6:	49 2f       	mov	r20, r25
    35a8:	48 0f       	add	r20, r24
    35aa:	88 85       	ldd	r24, Y+8	; 0x08
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	9b 81       	ldd	r25, Y+3	; 0x03
    35b4:	b9 01       	movw	r22, r18
    35b6:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__udivmodhi4>
    35ba:	cb 01       	movw	r24, r22
    35bc:	98 2f       	mov	r25, r24
    35be:	8f 81       	ldd	r24, Y+7	; 0x07
    35c0:	29 2f       	mov	r18, r25
    35c2:	28 0f       	add	r18, r24
    35c4:	8c 81       	ldd	r24, Y+4	; 0x04
    35c6:	9d 81       	ldd	r25, Y+5	; 0x05
    35c8:	64 2f       	mov	r22, r20
    35ca:	42 2f       	mov	r20, r18
    35cc:	09 95       	icall
            i++;
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	9b 81       	ldd	r25, Y+3	; 0x03
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	9b 83       	std	Y+3, r25	; 0x03
    35d6:	8a 83       	std	Y+2, r24	; 0x02
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    35d8:	89 81       	ldd	r24, Y+1	; 0x01
    35da:	8f 5f       	subi	r24, 0xFF	; 255
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	88 30       	cpi	r24, 0x08	; 8
    35e2:	08 f4       	brcc	.+2      	; 0x35e6 <_disp_bin_pic_hbe+0x10e>
    35e4:	93 cf       	rjmp	.-218    	; 0x350c <_disp_bin_pic_hbe+0x34>
                mythis->disp_point(mythis,x+(i%w),y+i/w);
            else
                mythis->erase_point(mythis,x+(i%w),y+i/w);
            i++;
        }
        pic++;
    35e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    35e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	9b 87       	std	Y+11, r25	; 0x0b
    35ee:	8a 87       	std	Y+10, r24	; 0x0a

static void _disp_bin_pic_hbe(struct _oled128x64 *const mythis,u8_t x,u8_t y,u8_t w,u8_t h,const u8_t *pic)
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    35f0:	88 85       	ldd	r24, Y+8	; 0x08
    35f2:	28 2f       	mov	r18, r24
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	89 85       	ldd	r24, Y+9	; 0x09
    35f8:	88 2f       	mov	r24, r24
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	ac 01       	movw	r20, r24
    35fe:	24 9f       	mul	r18, r20
    3600:	c0 01       	movw	r24, r0
    3602:	25 9f       	mul	r18, r21
    3604:	90 0d       	add	r25, r0
    3606:	34 9f       	mul	r19, r20
    3608:	90 0d       	add	r25, r0
    360a:	11 24       	eor	r1, r1
    360c:	9c 01       	movw	r18, r24
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	82 17       	cp	r24, r18
    3614:	93 07       	cpc	r25, r19
    3616:	08 f4       	brcc	.+2      	; 0x361a <_disp_bin_pic_hbe+0x142>
    3618:	77 cf       	rjmp	.-274    	; 0x3508 <_disp_bin_pic_hbe+0x30>
                mythis->erase_point(mythis,x+(i%w),y+i/w);
            i++;
        }
        pic++;
    }
}
    361a:	2b 96       	adiw	r28, 0x0b	; 11
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	08 95       	ret

00003632 <oled128x64_init>:


void oled128x64_init(oled128x64 *const oled)
{
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	00 d0       	rcall	.+0      	; 0x3638 <oled128x64_init+0x6>
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	9a 83       	std	Y+2, r25	; 0x02
    363e:	89 83       	std	Y+1, r24	; 0x01
    //注册接口
    oled->chars6x8 = _ASCLL6X8;
    3640:	e9 81       	ldd	r30, Y+1	; 0x01
    3642:	fa 81       	ldd	r31, Y+2	; 0x02
    3644:	8d ea       	ldi	r24, 0xAD	; 173
    3646:	93 e0       	ldi	r25, 0x03	; 3
    3648:	91 87       	std	Z+9, r25	; 0x09
    364a:	80 87       	std	Z+8, r24	; 0x08
    oled->init_pins = _init_pins;
    364c:	e9 81       	ldd	r30, Y+1	; 0x01
    364e:	fa 81       	ldd	r31, Y+2	; 0x02
    3650:	83 e3       	ldi	r24, 0x33	; 51
    3652:	96 e1       	ldi	r25, 0x16	; 22
    3654:	91 83       	std	Z+1, r25	; 0x01
    3656:	80 83       	st	Z, r24
    oled->rst_module = _rst_module;
    3658:	e9 81       	ldd	r30, Y+1	; 0x01
    365a:	fa 81       	ldd	r31, Y+2	; 0x02
    365c:	8e e3       	ldi	r24, 0x3E	; 62
    365e:	96 e1       	ldi	r25, 0x16	; 22
    3660:	93 83       	std	Z+3, r25	; 0x03
    3662:	82 83       	std	Z+2, r24	; 0x02
    oled->write_data = _write_data;
    3664:	e9 81       	ldd	r30, Y+1	; 0x01
    3666:	fa 81       	ldd	r31, Y+2	; 0x02
    3668:	85 e7       	ldi	r24, 0x75	; 117
    366a:	96 e1       	ldi	r25, 0x16	; 22
    366c:	95 83       	std	Z+5, r25	; 0x05
    366e:	84 83       	std	Z+4, r24	; 0x04
    oled->write_cmd  = _write_cmd;
    3670:	e9 81       	ldd	r30, Y+1	; 0x01
    3672:	fa 81       	ldd	r31, Y+2	; 0x02
    3674:	87 eb       	ldi	r24, 0xB7	; 183
    3676:	96 e1       	ldi	r25, 0x16	; 22
    3678:	97 83       	std	Z+7, r25	; 0x07
    367a:	86 83       	std	Z+6, r24	; 0x06

    //注册驱动
    oled->fill_8bits_screen = _fill_8bits_screen;
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	9a 81       	ldd	r25, Y+2	; 0x02
    3680:	fc 01       	movw	r30, r24
    3682:	e6 5f       	subi	r30, 0xF6	; 246
    3684:	fb 4f       	sbci	r31, 0xFB	; 251
    3686:	89 ef       	ldi	r24, 0xF9	; 249
    3688:	96 e1       	ldi	r25, 0x16	; 22
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	80 83       	st	Z, r24
    oled->disp_point  = _disp_point;
    368e:	21 e8       	ldi	r18, 0x81	; 129
    3690:	37 e1       	ldi	r19, 0x17	; 23
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	fc 01       	movw	r30, r24
    3698:	e4 5f       	subi	r30, 0xF4	; 244
    369a:	fb 4f       	sbci	r31, 0xFB	; 251
    369c:	31 83       	std	Z+1, r19	; 0x01
    369e:	20 83       	st	Z, r18
    oled->erase_point = _erase_point;
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	fc 01       	movw	r30, r24
    36a6:	e2 5f       	subi	r30, 0xF2	; 242
    36a8:	fb 4f       	sbci	r31, 0xFB	; 251
    36aa:	86 ed       	ldi	r24, 0xD6	; 214
    36ac:	97 e1       	ldi	r25, 0x17	; 23
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
    oled->refresh_screen = _refresh_screen;
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	9a 81       	ldd	r25, Y+2	; 0x02
    36b6:	fc 01       	movw	r30, r24
    36b8:	e0 5f       	subi	r30, 0xF0	; 240
    36ba:	fb 4f       	sbci	r31, 0xFB	; 251
    36bc:	81 e3       	ldi	r24, 0x31	; 49
    36be:	97 e1       	ldi	r25, 0x17	; 23
    36c0:	91 83       	std	Z+1, r25	; 0x01
    36c2:	80 83       	st	Z, r24
    oled->disp_char6x8 = _disp_char6x8;
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	fc 01       	movw	r30, r24
    36ca:	ee 5e       	subi	r30, 0xEE	; 238
    36cc:	fb 4f       	sbci	r31, 0xFB	; 251
    36ce:	89 e2       	ldi	r24, 0x29	; 41
    36d0:	98 e1       	ldi	r25, 0x18	; 24
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    oled->disp_str6x8 = _disp_str6x8;
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	fc 01       	movw	r30, r24
    36dc:	ec 5e       	subi	r30, 0xEC	; 236
    36de:	fb 4f       	sbci	r31, 0xFB	; 251
    36e0:	85 e8       	ldi	r24, 0x85	; 133
    36e2:	99 e1       	ldi	r25, 0x19	; 25
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    oled->disp_bin_pic_hle = _disp_bin_pic_hle;
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	9a 81       	ldd	r25, Y+2	; 0x02
    36ec:	fc 01       	movw	r30, r24
    36ee:	ea 5e       	subi	r30, 0xEA	; 234
    36f0:	fb 4f       	sbci	r31, 0xFB	; 251
    36f2:	80 ec       	ldi	r24, 0xC0	; 192
    36f4:	99 e1       	ldi	r25, 0x19	; 25
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	80 83       	st	Z, r24
    oled->disp_bin_pic_hbe = _disp_bin_pic_hbe;
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	fc 01       	movw	r30, r24
    3700:	e8 5e       	subi	r30, 0xE8	; 232
    3702:	fb 4f       	sbci	r31, 0xFB	; 251
    3704:	8c e6       	ldi	r24, 0x6C	; 108
    3706:	9a e1       	ldi	r25, 0x1A	; 26
    3708:	91 83       	std	Z+1, r25	; 0x01
    370a:	80 83       	st	Z, r24

    //初始化oled128x64
    oled->init_pins();
    370c:	e9 81       	ldd	r30, Y+1	; 0x01
    370e:	fa 81       	ldd	r31, Y+2	; 0x02
    3710:	01 90       	ld	r0, Z+
    3712:	f0 81       	ld	r31, Z
    3714:	e0 2d       	mov	r30, r0
    3716:	09 95       	icall
    oled->rst_module();
    3718:	e9 81       	ldd	r30, Y+1	; 0x01
    371a:	fa 81       	ldd	r31, Y+2	; 0x02
    371c:	02 80       	ldd	r0, Z+2	; 0x02
    371e:	f3 81       	ldd	r31, Z+3	; 0x03
    3720:	e0 2d       	mov	r30, r0
    3722:	09 95       	icall
    _init_oled(oled);
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	9a 81       	ldd	r25, Y+2	; 0x02
    3728:	0e 94 a9 18 	call	0x3152	; 0x3152 <_init_oled>

}
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	cf 91       	pop	r28
    3732:	df 91       	pop	r29
    3734:	08 95       	ret

00003736 <RTS_PORT_SwitchToNextTask>:
  .section .text  
  .align 1

RTS_PORT_SwitchToNextTask:
  /* 任务切换上半部分  */
  push  r29       /*< R29入栈   */
    3736:	df 93       	push	r29
  push  r28       /*< R28入栈   */
    3738:	cf 93       	push	r28
  push	r31
    373a:	ff 93       	push	r31
  push	r30
    373c:	ef 93       	push	r30
  push	r0        /*< R0入栈    */
    373e:	0f 92       	push	r0
  lds	  r0, 0x5f  /*< SREG入栈  */
    3740:	00 90 5f 00 	lds	r0, 0x005F
  push	r0
    3744:	0f 92       	push	r0
  lds	  r0, 0x5B  /*< RAMPZ入栈 */
    3746:	00 90 5b 00 	lds	r0, 0x005B
  push	r0
    374a:	0f 92       	push	r0
  push  r16       /*< R16入栈   */
    374c:	0f 93       	push	r16
  push	r17       /*< R17入栈   */
    374e:	1f 93       	push	r17
  push  r18       /*< ...入栈   */
    3750:	2f 93       	push	r18
  push	r19
    3752:	3f 93       	push	r19
  push  r20
    3754:	4f 93       	push	r20
  push	r21
    3756:	5f 93       	push	r21
  push  r22
    3758:	6f 93       	push	r22
  push	r23
    375a:	7f 93       	push	r23
  push	r24
    375c:	8f 93       	push	r24
  push  r25
    375e:	9f 93       	push	r25
  push	r26
    3760:	af 93       	push	r26
  push	r27
    3762:	bf 93       	push	r27
  push  r1        /* 可以不push，r1===0  */
    3764:	1f 92       	push	r1
  push  r2
    3766:	2f 92       	push	r2
  push	r3
    3768:	3f 92       	push	r3
  push  r4
    376a:	4f 92       	push	r4
  push	r5
    376c:	5f 92       	push	r5
  push  r6
    376e:	6f 92       	push	r6
  push	r7
    3770:	7f 92       	push	r7
  push  r8
    3772:	8f 92       	push	r8
  push	r9
    3774:	9f 92       	push	r9
  push  r10
    3776:	af 92       	push	r10
  push	r11
    3778:	bf 92       	push	r11
  push  r12
    377a:	cf 92       	push	r12
  push	r13
    377c:	df 92       	push	r13
  push  r14
    377e:	ef 92       	push	r14
  push	r15
    3780:	ff 92       	push	r15
  
  /* 判断是否为初次任务，如果是，则跳转到set_rtsgbonceentry_to_1 */
  lds   r30, once_entry
    3782:	e0 91 e6 05 	lds	r30, 0x05E6
  cpi   r30, 0
    3786:	e0 30       	cpi	r30, 0x00	; 0
  breq  set_onceentry_to_1
    3788:	81 f0       	breq	.+32     	; 0x37aa <set_onceentry_to_1>


  /*< 将SP保存到上一任务的SP  */
  lds   r30, rts_gb_prev_task_tcb
    378a:	e0 91 60 10 	lds	r30, 0x1060
  lds   r31, rts_gb_prev_task_tcb+1
    378e:	f0 91 61 10 	lds	r31, 0x1061
  in    r24, 0x3d
    3792:	8d b7       	in	r24, 0x3d	; 61
  in    r25, 0x3e
    3794:	9e b7       	in	r25, 0x3e	; 62
  std   Z+1, r25
    3796:	91 83       	std	Z+1, r25	; 0x01
  st    Z,   r24
    3798:	80 83       	st	Z, r24

  /* rts_gb_prev_task_tcb = rts_gb_curr_task_tcb  */
  lds   r26, rts_gb_curr_task_tcb
    379a:	a0 91 62 10 	lds	r26, 0x1062
  lds   r27, rts_gb_curr_task_tcb+1
    379e:	b0 91 63 10 	lds	r27, 0x1063
  sts   rts_gb_prev_task_tcb,  r26
    37a2:	a0 93 60 10 	sts	0x1060, r26
  sts   rts_gb_prev_task_tcb+1,r27
    37a6:	b0 93 61 10 	sts	0x1061, r27

000037aa <set_onceentry_to_1>:

set_onceentry_to_1:
  ldi   r30, 1
    37aa:	e1 e0       	ldi	r30, 0x01	; 1
  sts   once_entry,  r30
    37ac:	e0 93 e6 05 	sts	0x05E6, r30

000037b0 <switch_bottom>:

switch_bottom:
  /* 任务切换下半部分  */
  /*< 将SP指向下一个要运行的任务SP   */
  lds  r30,rts_gb_curr_task_tcb
    37b0:	e0 91 62 10 	lds	r30, 0x1062
  lds  r31,rts_gb_curr_task_tcb+1
    37b4:	f0 91 63 10 	lds	r31, 0x1063
  ldd  r25, Z+1
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
  ld   r24, Z
    37ba:	80 81       	ld	r24, Z
  out  0x3d,r24
    37bc:	8d bf       	out	0x3d, r24	; 61
  out  0x3e,r25
    37be:	9e bf       	out	0x3e, r25	; 62
  
  pop	  r15     /*< 各寄存器出栈，恢复任务环境   */
    37c0:	ff 90       	pop	r15
  pop   r14
    37c2:	ef 90       	pop	r14
  pop	  r13
    37c4:	df 90       	pop	r13
  pop   r12
    37c6:	cf 90       	pop	r12
  pop	  r11
    37c8:	bf 90       	pop	r11
  pop   r10
    37ca:	af 90       	pop	r10
  pop	  r9
    37cc:	9f 90       	pop	r9
  pop   r8
    37ce:	8f 90       	pop	r8
  pop	  r7
    37d0:	7f 90       	pop	r7
  pop   r6
    37d2:	6f 90       	pop	r6
  pop	  r5
    37d4:	5f 90       	pop	r5
  pop   r4
    37d6:	4f 90       	pop	r4
  pop	  r3
    37d8:	3f 90       	pop	r3
  pop   r2
    37da:	2f 90       	pop	r2
  pop   r1
    37dc:	1f 90       	pop	r1
  pop	  r27
    37de:	bf 91       	pop	r27
  pop	  r26
    37e0:	af 91       	pop	r26
  pop   r25
    37e2:	9f 91       	pop	r25
  pop	  r24
    37e4:	8f 91       	pop	r24
  pop	  r23
    37e6:	7f 91       	pop	r23
  pop   r22
    37e8:	6f 91       	pop	r22
  pop	  r21
    37ea:	5f 91       	pop	r21
  pop   r20
    37ec:	4f 91       	pop	r20
  pop	  r19
    37ee:	3f 91       	pop	r19
  pop   r18
    37f0:	2f 91       	pop	r18
  pop	  r17
    37f2:	1f 91       	pop	r17
  pop   r16
    37f4:	0f 91       	pop	r16
  pop	  r0
    37f6:	0f 90       	pop	r0
  sts	  0x5B, r0   /*< RAMPZ出栈    */
    37f8:	00 92 5b 00 	sts	0x005B, r0
  pop   r0         /*< SREG出栈     */
    37fc:	0f 90       	pop	r0
  sts   0x5f, r0
    37fe:	00 92 5f 00 	sts	0x005F, r0
  pop	  r0
    3802:	0f 90       	pop	r0
  pop	  r30
    3804:	ef 91       	pop	r30
  pop	  r31
    3806:	ff 91       	pop	r31
  pop	  r28
    3808:	cf 91       	pop	r28
  pop	  r29
    380a:	df 91       	pop	r29
  ret
    380c:	08 95       	ret

0000380e <__subsf3>:
    380e:	50 58       	subi	r21, 0x80	; 128

00003810 <__addsf3>:
    3810:	bb 27       	eor	r27, r27
    3812:	aa 27       	eor	r26, r26
    3814:	0e d0       	rcall	.+28     	; 0x3832 <__addsf3x>
    3816:	1c c1       	rjmp	.+568    	; 0x3a50 <__fp_round>
    3818:	0d d1       	rcall	.+538    	; 0x3a34 <__fp_pscA>
    381a:	30 f0       	brcs	.+12     	; 0x3828 <__addsf3+0x18>
    381c:	12 d1       	rcall	.+548    	; 0x3a42 <__fp_pscB>
    381e:	20 f0       	brcs	.+8      	; 0x3828 <__addsf3+0x18>
    3820:	31 f4       	brne	.+12     	; 0x382e <__addsf3+0x1e>
    3822:	9f 3f       	cpi	r25, 0xFF	; 255
    3824:	11 f4       	brne	.+4      	; 0x382a <__addsf3+0x1a>
    3826:	1e f4       	brtc	.+6      	; 0x382e <__addsf3+0x1e>
    3828:	02 c1       	rjmp	.+516    	; 0x3a2e <__fp_nan>
    382a:	0e f4       	brtc	.+2      	; 0x382e <__addsf3+0x1e>
    382c:	e0 95       	com	r30
    382e:	e7 fb       	bst	r30, 7
    3830:	f8 c0       	rjmp	.+496    	; 0x3a22 <__fp_inf>

00003832 <__addsf3x>:
    3832:	e9 2f       	mov	r30, r25
    3834:	1e d1       	rcall	.+572    	; 0x3a72 <__fp_split3>
    3836:	80 f3       	brcs	.-32     	; 0x3818 <__addsf3+0x8>
    3838:	ba 17       	cp	r27, r26
    383a:	62 07       	cpc	r22, r18
    383c:	73 07       	cpc	r23, r19
    383e:	84 07       	cpc	r24, r20
    3840:	95 07       	cpc	r25, r21
    3842:	18 f0       	brcs	.+6      	; 0x384a <__addsf3x+0x18>
    3844:	71 f4       	brne	.+28     	; 0x3862 <__addsf3x+0x30>
    3846:	9e f5       	brtc	.+102    	; 0x38ae <__addsf3x+0x7c>
    3848:	36 c1       	rjmp	.+620    	; 0x3ab6 <__fp_zero>
    384a:	0e f4       	brtc	.+2      	; 0x384e <__addsf3x+0x1c>
    384c:	e0 95       	com	r30
    384e:	0b 2e       	mov	r0, r27
    3850:	ba 2f       	mov	r27, r26
    3852:	a0 2d       	mov	r26, r0
    3854:	0b 01       	movw	r0, r22
    3856:	b9 01       	movw	r22, r18
    3858:	90 01       	movw	r18, r0
    385a:	0c 01       	movw	r0, r24
    385c:	ca 01       	movw	r24, r20
    385e:	a0 01       	movw	r20, r0
    3860:	11 24       	eor	r1, r1
    3862:	ff 27       	eor	r31, r31
    3864:	59 1b       	sub	r21, r25
    3866:	99 f0       	breq	.+38     	; 0x388e <__addsf3x+0x5c>
    3868:	59 3f       	cpi	r21, 0xF9	; 249
    386a:	50 f4       	brcc	.+20     	; 0x3880 <__addsf3x+0x4e>
    386c:	50 3e       	cpi	r21, 0xE0	; 224
    386e:	68 f1       	brcs	.+90     	; 0x38ca <__addsf3x+0x98>
    3870:	1a 16       	cp	r1, r26
    3872:	f0 40       	sbci	r31, 0x00	; 0
    3874:	a2 2f       	mov	r26, r18
    3876:	23 2f       	mov	r18, r19
    3878:	34 2f       	mov	r19, r20
    387a:	44 27       	eor	r20, r20
    387c:	58 5f       	subi	r21, 0xF8	; 248
    387e:	f3 cf       	rjmp	.-26     	; 0x3866 <__addsf3x+0x34>
    3880:	46 95       	lsr	r20
    3882:	37 95       	ror	r19
    3884:	27 95       	ror	r18
    3886:	a7 95       	ror	r26
    3888:	f0 40       	sbci	r31, 0x00	; 0
    388a:	53 95       	inc	r21
    388c:	c9 f7       	brne	.-14     	; 0x3880 <__addsf3x+0x4e>
    388e:	7e f4       	brtc	.+30     	; 0x38ae <__addsf3x+0x7c>
    3890:	1f 16       	cp	r1, r31
    3892:	ba 0b       	sbc	r27, r26
    3894:	62 0b       	sbc	r22, r18
    3896:	73 0b       	sbc	r23, r19
    3898:	84 0b       	sbc	r24, r20
    389a:	ba f0       	brmi	.+46     	; 0x38ca <__addsf3x+0x98>
    389c:	91 50       	subi	r25, 0x01	; 1
    389e:	a1 f0       	breq	.+40     	; 0x38c8 <__addsf3x+0x96>
    38a0:	ff 0f       	add	r31, r31
    38a2:	bb 1f       	adc	r27, r27
    38a4:	66 1f       	adc	r22, r22
    38a6:	77 1f       	adc	r23, r23
    38a8:	88 1f       	adc	r24, r24
    38aa:	c2 f7       	brpl	.-16     	; 0x389c <__addsf3x+0x6a>
    38ac:	0e c0       	rjmp	.+28     	; 0x38ca <__addsf3x+0x98>
    38ae:	ba 0f       	add	r27, r26
    38b0:	62 1f       	adc	r22, r18
    38b2:	73 1f       	adc	r23, r19
    38b4:	84 1f       	adc	r24, r20
    38b6:	48 f4       	brcc	.+18     	; 0x38ca <__addsf3x+0x98>
    38b8:	87 95       	ror	r24
    38ba:	77 95       	ror	r23
    38bc:	67 95       	ror	r22
    38be:	b7 95       	ror	r27
    38c0:	f7 95       	ror	r31
    38c2:	9e 3f       	cpi	r25, 0xFE	; 254
    38c4:	08 f0       	brcs	.+2      	; 0x38c8 <__addsf3x+0x96>
    38c6:	b3 cf       	rjmp	.-154    	; 0x382e <__addsf3+0x1e>
    38c8:	93 95       	inc	r25
    38ca:	88 0f       	add	r24, r24
    38cc:	08 f0       	brcs	.+2      	; 0x38d0 <__addsf3x+0x9e>
    38ce:	99 27       	eor	r25, r25
    38d0:	ee 0f       	add	r30, r30
    38d2:	97 95       	ror	r25
    38d4:	87 95       	ror	r24
    38d6:	08 95       	ret

000038d8 <__divsf3>:
    38d8:	0c d0       	rcall	.+24     	; 0x38f2 <__divsf3x>
    38da:	ba c0       	rjmp	.+372    	; 0x3a50 <__fp_round>
    38dc:	b2 d0       	rcall	.+356    	; 0x3a42 <__fp_pscB>
    38de:	40 f0       	brcs	.+16     	; 0x38f0 <__divsf3+0x18>
    38e0:	a9 d0       	rcall	.+338    	; 0x3a34 <__fp_pscA>
    38e2:	30 f0       	brcs	.+12     	; 0x38f0 <__divsf3+0x18>
    38e4:	21 f4       	brne	.+8      	; 0x38ee <__divsf3+0x16>
    38e6:	5f 3f       	cpi	r21, 0xFF	; 255
    38e8:	19 f0       	breq	.+6      	; 0x38f0 <__divsf3+0x18>
    38ea:	9b c0       	rjmp	.+310    	; 0x3a22 <__fp_inf>
    38ec:	51 11       	cpse	r21, r1
    38ee:	e4 c0       	rjmp	.+456    	; 0x3ab8 <__fp_szero>
    38f0:	9e c0       	rjmp	.+316    	; 0x3a2e <__fp_nan>

000038f2 <__divsf3x>:
    38f2:	bf d0       	rcall	.+382    	; 0x3a72 <__fp_split3>
    38f4:	98 f3       	brcs	.-26     	; 0x38dc <__divsf3+0x4>

000038f6 <__divsf3_pse>:
    38f6:	99 23       	and	r25, r25
    38f8:	c9 f3       	breq	.-14     	; 0x38ec <__divsf3+0x14>
    38fa:	55 23       	and	r21, r21
    38fc:	b1 f3       	breq	.-20     	; 0x38ea <__divsf3+0x12>
    38fe:	95 1b       	sub	r25, r21
    3900:	55 0b       	sbc	r21, r21
    3902:	bb 27       	eor	r27, r27
    3904:	aa 27       	eor	r26, r26
    3906:	62 17       	cp	r22, r18
    3908:	73 07       	cpc	r23, r19
    390a:	84 07       	cpc	r24, r20
    390c:	38 f0       	brcs	.+14     	; 0x391c <__divsf3_pse+0x26>
    390e:	9f 5f       	subi	r25, 0xFF	; 255
    3910:	5f 4f       	sbci	r21, 0xFF	; 255
    3912:	22 0f       	add	r18, r18
    3914:	33 1f       	adc	r19, r19
    3916:	44 1f       	adc	r20, r20
    3918:	aa 1f       	adc	r26, r26
    391a:	a9 f3       	breq	.-22     	; 0x3906 <__divsf3_pse+0x10>
    391c:	33 d0       	rcall	.+102    	; 0x3984 <__divsf3_pse+0x8e>
    391e:	0e 2e       	mov	r0, r30
    3920:	3a f0       	brmi	.+14     	; 0x3930 <__divsf3_pse+0x3a>
    3922:	e0 e8       	ldi	r30, 0x80	; 128
    3924:	30 d0       	rcall	.+96     	; 0x3986 <__divsf3_pse+0x90>
    3926:	91 50       	subi	r25, 0x01	; 1
    3928:	50 40       	sbci	r21, 0x00	; 0
    392a:	e6 95       	lsr	r30
    392c:	00 1c       	adc	r0, r0
    392e:	ca f7       	brpl	.-14     	; 0x3922 <__divsf3_pse+0x2c>
    3930:	29 d0       	rcall	.+82     	; 0x3984 <__divsf3_pse+0x8e>
    3932:	fe 2f       	mov	r31, r30
    3934:	27 d0       	rcall	.+78     	; 0x3984 <__divsf3_pse+0x8e>
    3936:	66 0f       	add	r22, r22
    3938:	77 1f       	adc	r23, r23
    393a:	88 1f       	adc	r24, r24
    393c:	bb 1f       	adc	r27, r27
    393e:	26 17       	cp	r18, r22
    3940:	37 07       	cpc	r19, r23
    3942:	48 07       	cpc	r20, r24
    3944:	ab 07       	cpc	r26, r27
    3946:	b0 e8       	ldi	r27, 0x80	; 128
    3948:	09 f0       	breq	.+2      	; 0x394c <__divsf3_pse+0x56>
    394a:	bb 0b       	sbc	r27, r27
    394c:	80 2d       	mov	r24, r0
    394e:	bf 01       	movw	r22, r30
    3950:	ff 27       	eor	r31, r31
    3952:	93 58       	subi	r25, 0x83	; 131
    3954:	5f 4f       	sbci	r21, 0xFF	; 255
    3956:	2a f0       	brmi	.+10     	; 0x3962 <__divsf3_pse+0x6c>
    3958:	9e 3f       	cpi	r25, 0xFE	; 254
    395a:	51 05       	cpc	r21, r1
    395c:	68 f0       	brcs	.+26     	; 0x3978 <__divsf3_pse+0x82>
    395e:	61 c0       	rjmp	.+194    	; 0x3a22 <__fp_inf>
    3960:	ab c0       	rjmp	.+342    	; 0x3ab8 <__fp_szero>
    3962:	5f 3f       	cpi	r21, 0xFF	; 255
    3964:	ec f3       	brlt	.-6      	; 0x3960 <__divsf3_pse+0x6a>
    3966:	98 3e       	cpi	r25, 0xE8	; 232
    3968:	dc f3       	brlt	.-10     	; 0x3960 <__divsf3_pse+0x6a>
    396a:	86 95       	lsr	r24
    396c:	77 95       	ror	r23
    396e:	67 95       	ror	r22
    3970:	b7 95       	ror	r27
    3972:	f7 95       	ror	r31
    3974:	9f 5f       	subi	r25, 0xFF	; 255
    3976:	c9 f7       	brne	.-14     	; 0x396a <__divsf3_pse+0x74>
    3978:	88 0f       	add	r24, r24
    397a:	91 1d       	adc	r25, r1
    397c:	96 95       	lsr	r25
    397e:	87 95       	ror	r24
    3980:	97 f9       	bld	r25, 7
    3982:	08 95       	ret
    3984:	e1 e0       	ldi	r30, 0x01	; 1
    3986:	66 0f       	add	r22, r22
    3988:	77 1f       	adc	r23, r23
    398a:	88 1f       	adc	r24, r24
    398c:	bb 1f       	adc	r27, r27
    398e:	62 17       	cp	r22, r18
    3990:	73 07       	cpc	r23, r19
    3992:	84 07       	cpc	r24, r20
    3994:	ba 07       	cpc	r27, r26
    3996:	20 f0       	brcs	.+8      	; 0x39a0 <__divsf3_pse+0xaa>
    3998:	62 1b       	sub	r22, r18
    399a:	73 0b       	sbc	r23, r19
    399c:	84 0b       	sbc	r24, r20
    399e:	ba 0b       	sbc	r27, r26
    39a0:	ee 1f       	adc	r30, r30
    39a2:	88 f7       	brcc	.-30     	; 0x3986 <__divsf3_pse+0x90>
    39a4:	e0 95       	com	r30
    39a6:	08 95       	ret

000039a8 <__floatunsisf>:
    39a8:	e8 94       	clt
    39aa:	09 c0       	rjmp	.+18     	; 0x39be <__floatsisf+0x12>

000039ac <__floatsisf>:
    39ac:	97 fb       	bst	r25, 7
    39ae:	3e f4       	brtc	.+14     	; 0x39be <__floatsisf+0x12>
    39b0:	90 95       	com	r25
    39b2:	80 95       	com	r24
    39b4:	70 95       	com	r23
    39b6:	61 95       	neg	r22
    39b8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ba:	8f 4f       	sbci	r24, 0xFF	; 255
    39bc:	9f 4f       	sbci	r25, 0xFF	; 255
    39be:	99 23       	and	r25, r25
    39c0:	a9 f0       	breq	.+42     	; 0x39ec <__floatsisf+0x40>
    39c2:	f9 2f       	mov	r31, r25
    39c4:	96 e9       	ldi	r25, 0x96	; 150
    39c6:	bb 27       	eor	r27, r27
    39c8:	93 95       	inc	r25
    39ca:	f6 95       	lsr	r31
    39cc:	87 95       	ror	r24
    39ce:	77 95       	ror	r23
    39d0:	67 95       	ror	r22
    39d2:	b7 95       	ror	r27
    39d4:	f1 11       	cpse	r31, r1
    39d6:	f8 cf       	rjmp	.-16     	; 0x39c8 <__floatsisf+0x1c>
    39d8:	fa f4       	brpl	.+62     	; 0x3a18 <__floatsisf+0x6c>
    39da:	bb 0f       	add	r27, r27
    39dc:	11 f4       	brne	.+4      	; 0x39e2 <__floatsisf+0x36>
    39de:	60 ff       	sbrs	r22, 0
    39e0:	1b c0       	rjmp	.+54     	; 0x3a18 <__floatsisf+0x6c>
    39e2:	6f 5f       	subi	r22, 0xFF	; 255
    39e4:	7f 4f       	sbci	r23, 0xFF	; 255
    39e6:	8f 4f       	sbci	r24, 0xFF	; 255
    39e8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ea:	16 c0       	rjmp	.+44     	; 0x3a18 <__floatsisf+0x6c>
    39ec:	88 23       	and	r24, r24
    39ee:	11 f0       	breq	.+4      	; 0x39f4 <__floatsisf+0x48>
    39f0:	96 e9       	ldi	r25, 0x96	; 150
    39f2:	11 c0       	rjmp	.+34     	; 0x3a16 <__floatsisf+0x6a>
    39f4:	77 23       	and	r23, r23
    39f6:	21 f0       	breq	.+8      	; 0x3a00 <__floatsisf+0x54>
    39f8:	9e e8       	ldi	r25, 0x8E	; 142
    39fa:	87 2f       	mov	r24, r23
    39fc:	76 2f       	mov	r23, r22
    39fe:	05 c0       	rjmp	.+10     	; 0x3a0a <__floatsisf+0x5e>
    3a00:	66 23       	and	r22, r22
    3a02:	71 f0       	breq	.+28     	; 0x3a20 <__floatsisf+0x74>
    3a04:	96 e8       	ldi	r25, 0x86	; 134
    3a06:	86 2f       	mov	r24, r22
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	2a f0       	brmi	.+10     	; 0x3a18 <__floatsisf+0x6c>
    3a0e:	9a 95       	dec	r25
    3a10:	66 0f       	add	r22, r22
    3a12:	77 1f       	adc	r23, r23
    3a14:	88 1f       	adc	r24, r24
    3a16:	da f7       	brpl	.-10     	; 0x3a0e <__floatsisf+0x62>
    3a18:	88 0f       	add	r24, r24
    3a1a:	96 95       	lsr	r25
    3a1c:	87 95       	ror	r24
    3a1e:	97 f9       	bld	r25, 7
    3a20:	08 95       	ret

00003a22 <__fp_inf>:
    3a22:	97 f9       	bld	r25, 7
    3a24:	9f 67       	ori	r25, 0x7F	; 127
    3a26:	80 e8       	ldi	r24, 0x80	; 128
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	08 95       	ret

00003a2e <__fp_nan>:
    3a2e:	9f ef       	ldi	r25, 0xFF	; 255
    3a30:	80 ec       	ldi	r24, 0xC0	; 192
    3a32:	08 95       	ret

00003a34 <__fp_pscA>:
    3a34:	00 24       	eor	r0, r0
    3a36:	0a 94       	dec	r0
    3a38:	16 16       	cp	r1, r22
    3a3a:	17 06       	cpc	r1, r23
    3a3c:	18 06       	cpc	r1, r24
    3a3e:	09 06       	cpc	r0, r25
    3a40:	08 95       	ret

00003a42 <__fp_pscB>:
    3a42:	00 24       	eor	r0, r0
    3a44:	0a 94       	dec	r0
    3a46:	12 16       	cp	r1, r18
    3a48:	13 06       	cpc	r1, r19
    3a4a:	14 06       	cpc	r1, r20
    3a4c:	05 06       	cpc	r0, r21
    3a4e:	08 95       	ret

00003a50 <__fp_round>:
    3a50:	09 2e       	mov	r0, r25
    3a52:	03 94       	inc	r0
    3a54:	00 0c       	add	r0, r0
    3a56:	11 f4       	brne	.+4      	; 0x3a5c <__fp_round+0xc>
    3a58:	88 23       	and	r24, r24
    3a5a:	52 f0       	brmi	.+20     	; 0x3a70 <__fp_round+0x20>
    3a5c:	bb 0f       	add	r27, r27
    3a5e:	40 f4       	brcc	.+16     	; 0x3a70 <__fp_round+0x20>
    3a60:	bf 2b       	or	r27, r31
    3a62:	11 f4       	brne	.+4      	; 0x3a68 <__fp_round+0x18>
    3a64:	60 ff       	sbrs	r22, 0
    3a66:	04 c0       	rjmp	.+8      	; 0x3a70 <__fp_round+0x20>
    3a68:	6f 5f       	subi	r22, 0xFF	; 255
    3a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a70:	08 95       	ret

00003a72 <__fp_split3>:
    3a72:	57 fd       	sbrc	r21, 7
    3a74:	90 58       	subi	r25, 0x80	; 128
    3a76:	44 0f       	add	r20, r20
    3a78:	55 1f       	adc	r21, r21
    3a7a:	59 f0       	breq	.+22     	; 0x3a92 <__fp_splitA+0x10>
    3a7c:	5f 3f       	cpi	r21, 0xFF	; 255
    3a7e:	71 f0       	breq	.+28     	; 0x3a9c <__fp_splitA+0x1a>
    3a80:	47 95       	ror	r20

00003a82 <__fp_splitA>:
    3a82:	88 0f       	add	r24, r24
    3a84:	97 fb       	bst	r25, 7
    3a86:	99 1f       	adc	r25, r25
    3a88:	61 f0       	breq	.+24     	; 0x3aa2 <__fp_splitA+0x20>
    3a8a:	9f 3f       	cpi	r25, 0xFF	; 255
    3a8c:	79 f0       	breq	.+30     	; 0x3aac <__fp_splitA+0x2a>
    3a8e:	87 95       	ror	r24
    3a90:	08 95       	ret
    3a92:	12 16       	cp	r1, r18
    3a94:	13 06       	cpc	r1, r19
    3a96:	14 06       	cpc	r1, r20
    3a98:	55 1f       	adc	r21, r21
    3a9a:	f2 cf       	rjmp	.-28     	; 0x3a80 <__fp_split3+0xe>
    3a9c:	46 95       	lsr	r20
    3a9e:	f1 df       	rcall	.-30     	; 0x3a82 <__fp_splitA>
    3aa0:	08 c0       	rjmp	.+16     	; 0x3ab2 <__fp_splitA+0x30>
    3aa2:	16 16       	cp	r1, r22
    3aa4:	17 06       	cpc	r1, r23
    3aa6:	18 06       	cpc	r1, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	f1 cf       	rjmp	.-30     	; 0x3a8e <__fp_splitA+0xc>
    3aac:	86 95       	lsr	r24
    3aae:	71 05       	cpc	r23, r1
    3ab0:	61 05       	cpc	r22, r1
    3ab2:	08 94       	sec
    3ab4:	08 95       	ret

00003ab6 <__fp_zero>:
    3ab6:	e8 94       	clt

00003ab8 <__fp_szero>:
    3ab8:	bb 27       	eor	r27, r27
    3aba:	66 27       	eor	r22, r22
    3abc:	77 27       	eor	r23, r23
    3abe:	cb 01       	movw	r24, r22
    3ac0:	97 f9       	bld	r25, 7
    3ac2:	08 95       	ret

00003ac4 <__udivmodhi4>:
    3ac4:	aa 1b       	sub	r26, r26
    3ac6:	bb 1b       	sub	r27, r27
    3ac8:	51 e1       	ldi	r21, 0x11	; 17
    3aca:	07 c0       	rjmp	.+14     	; 0x3ada <__udivmodhi4_ep>

00003acc <__udivmodhi4_loop>:
    3acc:	aa 1f       	adc	r26, r26
    3ace:	bb 1f       	adc	r27, r27
    3ad0:	a6 17       	cp	r26, r22
    3ad2:	b7 07       	cpc	r27, r23
    3ad4:	10 f0       	brcs	.+4      	; 0x3ada <__udivmodhi4_ep>
    3ad6:	a6 1b       	sub	r26, r22
    3ad8:	b7 0b       	sbc	r27, r23

00003ada <__udivmodhi4_ep>:
    3ada:	88 1f       	adc	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	5a 95       	dec	r21
    3ae0:	a9 f7       	brne	.-22     	; 0x3acc <__udivmodhi4_loop>
    3ae2:	80 95       	com	r24
    3ae4:	90 95       	com	r25
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	cd 01       	movw	r24, r26
    3aea:	08 95       	ret

00003aec <__udivmodsi4>:
    3aec:	a1 e2       	ldi	r26, 0x21	; 33
    3aee:	1a 2e       	mov	r1, r26
    3af0:	aa 1b       	sub	r26, r26
    3af2:	bb 1b       	sub	r27, r27
    3af4:	fd 01       	movw	r30, r26
    3af6:	0d c0       	rjmp	.+26     	; 0x3b12 <__udivmodsi4_ep>

00003af8 <__udivmodsi4_loop>:
    3af8:	aa 1f       	adc	r26, r26
    3afa:	bb 1f       	adc	r27, r27
    3afc:	ee 1f       	adc	r30, r30
    3afe:	ff 1f       	adc	r31, r31
    3b00:	a2 17       	cp	r26, r18
    3b02:	b3 07       	cpc	r27, r19
    3b04:	e4 07       	cpc	r30, r20
    3b06:	f5 07       	cpc	r31, r21
    3b08:	20 f0       	brcs	.+8      	; 0x3b12 <__udivmodsi4_ep>
    3b0a:	a2 1b       	sub	r26, r18
    3b0c:	b3 0b       	sbc	r27, r19
    3b0e:	e4 0b       	sbc	r30, r20
    3b10:	f5 0b       	sbc	r31, r21

00003b12 <__udivmodsi4_ep>:
    3b12:	66 1f       	adc	r22, r22
    3b14:	77 1f       	adc	r23, r23
    3b16:	88 1f       	adc	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	1a 94       	dec	r1
    3b1c:	69 f7       	brne	.-38     	; 0x3af8 <__udivmodsi4_loop>
    3b1e:	60 95       	com	r22
    3b20:	70 95       	com	r23
    3b22:	80 95       	com	r24
    3b24:	90 95       	com	r25
    3b26:	9b 01       	movw	r18, r22
    3b28:	ac 01       	movw	r20, r24
    3b2a:	bd 01       	movw	r22, r26
    3b2c:	cf 01       	movw	r24, r30
    3b2e:	08 95       	ret

00003b30 <_exit>:
    3b30:	f8 94       	cli

00003b32 <__stop_program>:
    3b32:	ff cf       	rjmp	.-2      	; 0x3b32 <__stop_program>
