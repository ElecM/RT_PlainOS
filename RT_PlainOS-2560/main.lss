
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800200  00001cbe  00001d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000849  008003ba  008003ba  00001f0c  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000055e  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002077  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aa8  00000000  00000000  000045e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016f7  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  00006780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b4b  00000000  00000000  00006b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ad6  00000000  00000000  000076bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008191  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 46 0a 	jmp	0x148c	; 0x148c <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_36>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee eb       	ldi	r30, 0xBE	; 190
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 3b       	cpi	r26, 0xBA	; 186
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1c e0       	ldi	r17, 0x0C	; 12
     110:	aa eb       	ldi	r26, 0xBA	; 186
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 30       	cpi	r26, 0x03	; 3
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
     122:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <delay>:
};


//给空闲任务延时用，因为空闲任务中不能使用RTS_DelayTicks函数
void delay(u16_t t)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	0f 92       	push	r0
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9c 01       	movw	r18, r24
     138:	02 c0       	rjmp	.+4      	; 0x13e <delay+0x14>
    volatile unsigned int i;
    while(t--)
    {
        for(i=0;i<6000;i++)
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	30 40       	sbci	r19, 0x00	; 0

//给空闲任务延时用，因为空闲任务中不能使用RTS_DelayTicks函数
void delay(u16_t t)
{
    volatile unsigned int i;
    while(t--)
     13e:	21 15       	cp	r18, r1
     140:	31 05       	cpc	r19, r1
     142:	91 f0       	breq	.+36     	; 0x168 <delay+0x3e>
    {
        for(i=0;i<6000;i++)
     144:	1a 82       	std	Y+2, r1	; 0x02
     146:	19 82       	std	Y+1, r1	; 0x01
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	9a 81       	ldd	r25, Y+2	; 0x02
     14c:	80 57       	subi	r24, 0x70	; 112
     14e:	97 41       	sbci	r25, 0x17	; 23
     150:	a0 f7       	brcc	.-24     	; 0x13a <delay+0x10>
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	9a 83       	std	Y+2, r25	; 0x02
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	9a 81       	ldd	r25, Y+2	; 0x02
     160:	80 57       	subi	r24, 0x70	; 112
     162:	97 41       	sbci	r25, 0x17	; 23
     164:	50 f7       	brcc	.-44     	; 0x13a <delay+0x10>
     166:	f5 cf       	rjmp	.-22     	; 0x152 <delay+0x28>
            ;
    }
}
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <idle_hook>:


//空闲任务里面不能使用RTS_DelayTicks()系统延时函数
void idle_hook(void *data)
{
    USART1.send_str(&USART1,"IDLE is running!  ");
     172:	e0 91 a6 02 	lds	r30, 0x02A6
     176:	f0 91 a7 02 	lds	r31, 0x02A7
     17a:	8e e8       	ldi	r24, 0x8E	; 142
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	72 e0       	ldi	r23, 0x02	; 2
     182:	19 95       	eicall
    delay(100);
     184:	84 e6       	ldi	r24, 0x64	; 100
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 95 00 	call	0x12a	; 0x12a <delay>
}
     18c:	08 95       	ret

0000018e <main>:

int main(void)
{
    // Insert code
    s8_t rev;
    DDRB |= 0XFF;
     18e:	84 b1       	in	r24, 0x04	; 4
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	84 b9       	out	0x04, r24	; 4
    PORTB = 0X00;
     194:	15 b8       	out	0x05, r1	; 5
    usart_init(&USART1);
     196:	8e e8       	ldi	r24, 0x8E	; 142
     198:	92 e0       	ldi	r25, 0x02	; 2
     19a:	0e 94 88 0b 	call	0x1710	; 0x1710 <usart_init>
    USART1.send_str(&USART1,"RTS Start\r\n");
     19e:	e0 91 a6 02 	lds	r30, 0x02A6
     1a2:	f0 91 a7 02 	lds	r31, 0x02A7
     1a6:	8e e8       	ldi	r24, 0x8E	; 142
     1a8:	92 e0       	ldi	r25, 0x02	; 2
     1aa:	63 e1       	ldi	r22, 0x13	; 19
     1ac:	72 e0       	ldi	r23, 0x02	; 2
     1ae:	19 95       	eicall

    RTS_OS_Init(idle_hook);
     1b0:	89 eb       	ldi	r24, 0xB9	; 185
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 a8 09 	call	0x1350	; 0x1350 <RTS_OS_Init>
    RTS_CreateTask(task1,stack1,128,1);
     1b8:	8e ea       	ldi	r24, 0xAE	; 174
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	6d e7       	ldi	r22, 0x7D	; 125
     1be:	74 e0       	ldi	r23, 0x04	; 4
     1c0:	40 e8       	ldi	r20, 0x80	; 128
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	0e 94 3e 08 	call	0x107c	; 0x107c <RTS_CreateTask>
    RTS_CreateTask(task2,stack2,128,2);
     1ca:	88 e3       	ldi	r24, 0x38	; 56
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	6d ef       	ldi	r22, 0xFD	; 253
     1d0:	74 e0       	ldi	r23, 0x04	; 4
     1d2:	40 e8       	ldi	r20, 0x80	; 128
     1d4:	50 e0       	ldi	r21, 0x00	; 0
     1d6:	22 e0       	ldi	r18, 0x02	; 2
     1d8:	0e 94 3e 08 	call	0x107c	; 0x107c <RTS_CreateTask>
    RTS_CreateTask(task3,stack3,128,3);
     1dc:	8e e1       	ldi	r24, 0x1E	; 30
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	6d e7       	ldi	r22, 0x7D	; 125
     1e2:	75 e0       	ldi	r23, 0x05	; 5
     1e4:	40 e8       	ldi	r20, 0x80	; 128
     1e6:	50 e0       	ldi	r21, 0x00	; 0
     1e8:	23 e0       	ldi	r18, 0x03	; 3
     1ea:	0e 94 3e 08 	call	0x107c	; 0x107c <RTS_CreateTask>
    semaphore = RTS_CreateSemaphore(1);
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 40 09 	call	0x1280	; 0x1280 <RTS_CreateSemaphore>
     1f6:	90 93 bb 03 	sts	0x03BB, r25
     1fa:	80 93 ba 03 	sts	0x03BA, r24
     1fe:	09 c0       	rjmp	.+18     	; 0x212 <main+0x84>
        {
            USART1.send_str(&USART1,"RTS_OS Started!");
            RTS_OS_Start();
        }
        else
            USART1.send_str(&USART1,"please input 'S' to satrt RTS OS\r\n");
     200:	e0 91 a6 02 	lds	r30, 0x02A6
     204:	f0 91 a7 02 	lds	r31, 0x02A7
     208:	8e e8       	ldi	r24, 0x8E	; 142
     20a:	92 e0       	ldi	r25, 0x02	; 2
     20c:	6f e2       	ldi	r22, 0x2F	; 47
     20e:	72 e0       	ldi	r23, 0x02	; 2
     210:	19 95       	eicall
    RTS_CreateTask(task2,stack2,128,2);
    RTS_CreateTask(task3,stack3,128,3);
    semaphore = RTS_CreateSemaphore(1);
    while (1)
    {
        rev = USART1.receive_data(&USART1);
     212:	e0 91 a8 02 	lds	r30, 0x02A8
     216:	f0 91 a9 02 	lds	r31, 0x02A9
     21a:	8e e8       	ldi	r24, 0x8E	; 142
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	19 95       	eicall
        if(rev == 'S')
     220:	83 35       	cpi	r24, 0x53	; 83
     222:	71 f7       	brne	.-36     	; 0x200 <main+0x72>
        {
            USART1.send_str(&USART1,"RTS_OS Started!");
     224:	e0 91 a6 02 	lds	r30, 0x02A6
     228:	f0 91 a7 02 	lds	r31, 0x02A7
     22c:	8e e8       	ldi	r24, 0x8E	; 142
     22e:	92 e0       	ldi	r25, 0x02	; 2
     230:	6f e1       	ldi	r22, 0x1F	; 31
     232:	72 e0       	ldi	r23, 0x02	; 2
     234:	19 95       	eicall
            RTS_OS_Start();
     236:	0e 94 5f 09 	call	0x12be	; 0x12be <RTS_OS_Start>
     23a:	eb cf       	rjmp	.-42     	; 0x212 <main+0x84>

0000023c <task3>:
{
    data = data;
    char ch;
    while (1)
    {
       RTS_WaitSemaphore(semaphore);
     23c:	80 91 ba 03 	lds	r24, 0x03BA
     240:	90 91 bb 03 	lds	r25, 0x03BB
     244:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <RTS_WaitSemaphore>
       USART1.send_str(&USART1,"task3 is running!  ");
     248:	e0 91 a6 02 	lds	r30, 0x02A6
     24c:	f0 91 a7 02 	lds	r31, 0x02A7
     250:	8e e8       	ldi	r24, 0x8E	; 142
     252:	92 e0       	ldi	r25, 0x02	; 2
     254:	62 e5       	ldi	r22, 0x52	; 82
     256:	72 e0       	ldi	r23, 0x02	; 2
     258:	19 95       	eicall
       RTS_PostSemaphore(semaphore);
     25a:	80 91 ba 03 	lds	r24, 0x03BA
     25e:	90 91 bb 03 	lds	r25, 0x03BB
     262:	0e 94 96 08 	call	0x112c	; 0x112c <RTS_PostSemaphore>
       delay(100);
     266:	84 e6       	ldi	r24, 0x64	; 100
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 95 00 	call	0x12a	; 0x12a <delay>
     26e:	e6 cf       	rjmp	.-52     	; 0x23c <task3>

00000270 <task2>:

semaphore_t  *semaphore=NULL;


void task2(void *data)
{
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
    char ch;
    data = data;
    u32_t cr;
    while (1)
    {
        RTS_WaitSemaphore(semaphore);
     278:	80 91 ba 03 	lds	r24, 0x03BA
     27c:	90 91 bb 03 	lds	r25, 0x03BB
     280:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <RTS_WaitSemaphore>
        cr = RTS_GetCpuUtilizationRate()*1000.0001;
     284:	0e 94 cc 06 	call	0xd98	; 0xd98 <RTS_GetCpuUtilizationRate>
     288:	22 e0       	ldi	r18, 0x02	; 2
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	4a e7       	ldi	r20, 0x7A	; 122
     28e:	54 e4       	ldi	r21, 0x44	; 68
     290:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__mulsf3>
     294:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__fixunssfsi>
     298:	7b 01       	movw	r14, r22
     29a:	8c 01       	movw	r16, r24
        USART1.send_str(&USART1,"ticks:");
     29c:	e0 91 a6 02 	lds	r30, 0x02A6
     2a0:	f0 91 a7 02 	lds	r31, 0x02A7
     2a4:	8e e8       	ldi	r24, 0x8E	; 142
     2a6:	92 e0       	ldi	r25, 0x02	; 2
     2a8:	66 e6       	ldi	r22, 0x66	; 102
     2aa:	72 e0       	ldi	r23, 0x02	; 2
     2ac:	19 95       	eicall
        USART1.disp_unsigned_integer(&USART1,rts_gb_systicks);
     2ae:	40 91 fd 0b 	lds	r20, 0x0BFD
     2b2:	50 91 fe 0b 	lds	r21, 0x0BFE
     2b6:	60 91 ff 0b 	lds	r22, 0x0BFF
     2ba:	70 91 00 0c 	lds	r23, 0x0C00
     2be:	e0 91 ae 02 	lds	r30, 0x02AE
     2c2:	f0 91 af 02 	lds	r31, 0x02AF
     2c6:	8e e8       	ldi	r24, 0x8E	; 142
     2c8:	92 e0       	ldi	r25, 0x02	; 2
     2ca:	19 95       	eicall
        USART1.send_str(&USART1,"CPU Rate:");
     2cc:	e0 91 a6 02 	lds	r30, 0x02A6
     2d0:	f0 91 a7 02 	lds	r31, 0x02A7
     2d4:	8e e8       	ldi	r24, 0x8E	; 142
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	6d e6       	ldi	r22, 0x6D	; 109
     2da:	72 e0       	ldi	r23, 0x02	; 2
     2dc:	19 95       	eicall
        USART1.disp_unsigned_integer(&USART1,cr%100);
     2de:	b7 01       	movw	r22, r14
     2e0:	c8 01       	movw	r24, r16
     2e2:	24 e6       	ldi	r18, 0x64	; 100
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
     2ee:	ab 01       	movw	r20, r22
     2f0:	bc 01       	movw	r22, r24
     2f2:	e0 91 ae 02 	lds	r30, 0x02AE
     2f6:	f0 91 af 02 	lds	r31, 0x02AF
     2fa:	8e e8       	ldi	r24, 0x8E	; 142
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	19 95       	eicall
        USART1.send_str(&USART1,".");
     300:	e0 91 a6 02 	lds	r30, 0x02A6
     304:	f0 91 a7 02 	lds	r31, 0x02A7
     308:	8e e8       	ldi	r24, 0x8E	; 142
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	67 e7       	ldi	r22, 0x77	; 119
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	19 95       	eicall
        USART1.disp_unsigned_integer(&USART1,cr%10);
     312:	b7 01       	movw	r22, r14
     314:	c8 01       	movw	r24, r16
     316:	2a e0       	ldi	r18, 0x0A	; 10
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
     322:	ab 01       	movw	r20, r22
     324:	bc 01       	movw	r22, r24
     326:	e0 91 ae 02 	lds	r30, 0x02AE
     32a:	f0 91 af 02 	lds	r31, 0x02AF
     32e:	8e e8       	ldi	r24, 0x8E	; 142
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	19 95       	eicall
        USART1.send_str(&USART1,"%  ");
     334:	e0 91 a6 02 	lds	r30, 0x02A6
     338:	f0 91 a7 02 	lds	r31, 0x02A7
     33c:	8e e8       	ldi	r24, 0x8E	; 142
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	69 e7       	ldi	r22, 0x79	; 121
     342:	72 e0       	ldi	r23, 0x02	; 2
     344:	19 95       	eicall
        RTS_PostSemaphore(semaphore);
     346:	80 91 ba 03 	lds	r24, 0x03BA
     34a:	90 91 bb 03 	lds	r25, 0x03BB
     34e:	0e 94 96 08 	call	0x112c	; 0x112c <RTS_PostSemaphore>
        delay(100);
     352:	84 e6       	ldi	r24, 0x64	; 100
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 95 00 	call	0x12a	; 0x12a <delay>
     35a:	8e cf       	rjmp	.-228    	; 0x278 <task2+0x8>

0000035c <task1>:
u8_t stack1[128];
u8_t stack2[128];
u8_t stack3[128];

void task1(void *data)
{
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
    data = data;
    u8_t rev;
    while (1)
    {
        USART1.send_str(&USART1,"  curr_task_tid:");
     360:	e0 91 a6 02 	lds	r30, 0x02A6
     364:	f0 91 a7 02 	lds	r31, 0x02A7
     368:	8e e8       	ldi	r24, 0x8E	; 142
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	6d e7       	ldi	r22, 0x7D	; 125
     36e:	72 e0       	ldi	r23, 0x02	; 2
     370:	19 95       	eicall
        USART1.disp_unsigned_integer(&USART1,RTS_GetCurrTaskTid());
     372:	00 91 ae 02 	lds	r16, 0x02AE
     376:	10 91 af 02 	lds	r17, 0x02AF
     37a:	0e 94 c0 06 	call	0xd80	; 0xd80 <RTS_GetCurrTaskTid>
     37e:	48 2f       	mov	r20, r24
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	8e e8       	ldi	r24, 0x8E	; 142
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	f8 01       	movw	r30, r16
     38c:	19 95       	eicall
        rev = USART1.receive_data(&USART1);
     38e:	e0 91 a8 02 	lds	r30, 0x02A8
     392:	f0 91 a9 02 	lds	r31, 0x02A9
     396:	8e e8       	ldi	r24, 0x8E	; 142
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	19 95       	eicall
        if(rev == 'H')
     39c:	88 34       	cpi	r24, 0x48	; 72
     39e:	69 f0       	breq	.+26     	; 0x3ba <task1+0x5e>
        {
            RTS_PendTask(3);
        }
        else if(rev == 'A')
     3a0:	81 34       	cpi	r24, 0x41	; 65
     3a2:	79 f0       	breq	.+30     	; 0x3c2 <task1+0x66>
        {
            RTS_PendTask(1);
            
        }
        else if(rev == 'B')
     3a4:	82 34       	cpi	r24, 0x42	; 66
     3a6:	89 f0       	breq	.+34     	; 0x3ca <task1+0x6e>
        {
            RTS_ResumeTask(3);
        }
        else if(rev == 'C')
     3a8:	83 34       	cpi	r24, 0x43	; 67
     3aa:	99 f0       	breq	.+38     	; 0x3d2 <task1+0x76>
        {
            RTS_ChangeTaskPrio(3,1);
        }
        else if(rev == 'D')
     3ac:	84 34       	cpi	r24, 0x44	; 68
     3ae:	c1 f6       	brne	.-80     	; 0x360 <task1+0x4>
        {
            RTS_ChangeTaskPrio(3,5);
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	65 e0       	ldi	r22, 0x05	; 5
     3b4:	0e 94 99 07 	call	0xf32	; 0xf32 <RTS_ChangeTaskPrio>
     3b8:	d3 cf       	rjmp	.-90     	; 0x360 <task1+0x4>
        USART1.send_str(&USART1,"  curr_task_tid:");
        USART1.disp_unsigned_integer(&USART1,RTS_GetCurrTaskTid());
        rev = USART1.receive_data(&USART1);
        if(rev == 'H')
        {
            RTS_PendTask(3);
     3ba:	83 e0       	ldi	r24, 0x03	; 3
     3bc:	0e 94 f9 07 	call	0xff2	; 0xff2 <RTS_PendTask>
     3c0:	cf cf       	rjmp	.-98     	; 0x360 <task1+0x4>
        }
        else if(rev == 'A')
        {
            RTS_PendTask(1);
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 f9 07 	call	0xff2	; 0xff2 <RTS_PendTask>
     3c8:	cb cf       	rjmp	.-106    	; 0x360 <task1+0x4>
            
        }
        else if(rev == 'B')
        {
            RTS_ResumeTask(3);
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	0e 94 ce 07 	call	0xf9c	; 0xf9c <RTS_ResumeTask>
     3d0:	c7 cf       	rjmp	.-114    	; 0x360 <task1+0x4>
        }
        else if(rev == 'C')
        {
            RTS_ChangeTaskPrio(3,1);
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	0e 94 99 07 	call	0xf32	; 0xf32 <RTS_ChangeTaskPrio>
     3da:	c2 cf       	rjmp	.-124    	; 0x360 <task1+0x4>

000003dc <MemCleanFragment>:
//定义内存控制块


//内存碎片清理函数
void  MemCleanFragment(void)
{
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
    u16_t i;
    mcb *mem_ctr_blk_point;  // mcb mem_ctr_blk_point
    mem_ctr_blk_point = mem_ctr_blk[0].mem_next;
     3e4:	c0 91 fd 05 	lds	r28, 0x05FD
     3e8:	d0 91 fe 05 	lds	r29, 0x05FE
    #if  MEM_DEBUG >= 1
      MemDebug("cleanning up the memory fragmentation...");
    #endif
    for(i=0;i<mem_ctr_blk[0].mem_blk_num - 1 ;i++)
     3ec:	80 91 03 06 	lds	r24, 0x0603
     3f0:	90 91 04 06 	lds	r25, 0x0604
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	09 f4       	brne	.+2      	; 0x3fa <MemCleanFragment+0x1e>
     3f8:	4b c0       	rjmp	.+150    	; 0x490 <MemCleanFragment+0xb4>
     3fa:	00 e0       	ldi	r16, 0x00	; 0
     3fc:	10 e0       	ldi	r17, 0x00	; 0
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <MemCleanFragment+0x3a>
     400:	0f 5f       	subi	r16, 0xFF	; 255
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	80 91 03 06 	lds	r24, 0x0603
     408:	90 91 04 06 	lds	r25, 0x0604
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	08 17       	cp	r16, r24
     410:	19 07       	cpc	r17, r25
     412:	f0 f5       	brcc	.+124    	; 0x490 <MemCleanFragment+0xb4>
     414:	ef 01       	movw	r28, r30
    {
       if((mem_ctr_blk_point->mem_blk_ofs + mem_ctr_blk_point->mem_blk_num) == \
     416:	4c 81       	ldd	r20, Y+4	; 0x04
     418:	5d 81       	ldd	r21, Y+5	; 0x05
     41a:	e8 81       	ld	r30, Y
     41c:	f9 81       	ldd	r31, Y+1	; 0x01
     41e:	6e 81       	ldd	r22, Y+6	; 0x06
     420:	7f 81       	ldd	r23, Y+7	; 0x07
     422:	9a 01       	movw	r18, r20
     424:	26 0f       	add	r18, r22
     426:	37 1f       	adc	r19, r23
     428:	84 81       	ldd	r24, Z+4	; 0x04
     42a:	95 81       	ldd	r25, Z+5	; 0x05
     42c:	28 17       	cp	r18, r24
     42e:	39 07       	cpc	r19, r25
     430:	39 f7       	brne	.-50     	; 0x400 <MemCleanFragment+0x24>
           mem_ctr_blk_point->mem_next->mem_blk_ofs)
       {
           mem_ctr_blk_point->mem_next->mem_blk_ofs = mem_ctr_blk_point->mem_blk_ofs;
     432:	55 83       	std	Z+5, r21	; 0x05
     434:	44 83       	std	Z+4, r20	; 0x04
           mem_ctr_blk_point->mem_next->mem_blk_num += mem_ctr_blk_point->mem_blk_num;
     436:	86 81       	ldd	r24, Z+6	; 0x06
     438:	97 81       	ldd	r25, Z+7	; 0x07
     43a:	86 0f       	add	r24, r22
     43c:	97 1f       	adc	r25, r23
     43e:	97 83       	std	Z+7, r25	; 0x07
     440:	86 83       	std	Z+6, r24	; 0x06

           //删除该节点，并归还给空闲链表
           mem_ctr_blk_point->mem_prv->mem_next = mem_ctr_blk_point->mem_next;
     442:	aa 81       	ldd	r26, Y+2	; 0x02
     444:	bb 81       	ldd	r27, Y+3	; 0x03
     446:	11 96       	adiw	r26, 0x01	; 1
     448:	fc 93       	st	X, r31
     44a:	ee 93       	st	-X, r30
           mem_ctr_blk_point->mem_next->mem_prv = mem_ctr_blk_point->mem_prv;
     44c:	e8 81       	ld	r30, Y
     44e:	f9 81       	ldd	r31, Y+1	; 0x01
     450:	b3 83       	std	Z+3, r27	; 0x03
     452:	a2 83       	std	Z+2, r26	; 0x02

           mem_ctr_blk_point->mem_next = mem_ctr_blk[2].mem_next;
     454:	80 91 0d 06 	lds	r24, 0x060D
     458:	90 91 0e 06 	lds	r25, 0x060E
     45c:	99 83       	std	Y+1, r25	; 0x01
     45e:	88 83       	st	Y, r24
           mem_ctr_blk[2].mem_next    = mem_ctr_blk_point;
     460:	d0 93 0e 06 	sts	0x060E, r29
     464:	c0 93 0d 06 	sts	0x060D, r28
           mem_ctr_blk[2].mem_blk_num ++ ;
     468:	80 91 13 06 	lds	r24, 0x0613
     46c:	90 91 14 06 	lds	r25, 0x0614
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	90 93 14 06 	sts	0x0614, r25
     476:	80 93 13 06 	sts	0x0613, r24
           mem_ctr_blk[0].mem_blk_num -- ;
     47a:	80 91 03 06 	lds	r24, 0x0603
     47e:	90 91 04 06 	lds	r25, 0x0604
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	90 93 04 06 	sts	0x0604, r25
     488:	80 93 03 06 	sts	0x0603, r24
     48c:	fe 01       	movw	r30, r28
     48e:	b8 cf       	rjmp	.-144    	; 0x400 <MemCleanFragment+0x24>
       }
    }
     #if  MEM_DEBUG >= 1
      MemDebug("cleanning up the memory fragment completed");
    #endif
}
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <MemAllocInit>:
      MemDebug("memory's allocatation initialization start...");
   #endif

   //内存管理链表初始化，内存管理链表使用双向链表
   //mem_ctr_blk[0]作为管理链表表头
   mem_ctr_blk[0].mem_next = &mem_ctr_blk[1];
     49a:	2d ef       	ldi	r18, 0xFD	; 253
     49c:	35 e0       	ldi	r19, 0x05	; 5
     49e:	c9 01       	movw	r24, r18
     4a0:	08 96       	adiw	r24, 0x08	; 8
     4a2:	90 93 fe 05 	sts	0x05FE, r25
     4a6:	80 93 fd 05 	sts	0x05FD, r24
   mem_ctr_blk[0].mem_prv  = &mem_ctr_blk[1];
     4aa:	90 93 00 06 	sts	0x0600, r25
     4ae:	80 93 ff 05 	sts	0x05FF, r24
   mem_ctr_blk[1].mem_next = &mem_ctr_blk[0];
     4b2:	30 93 06 06 	sts	0x0606, r19
     4b6:	20 93 05 06 	sts	0x0605, r18
   mem_ctr_blk[1].mem_prv  = &mem_ctr_blk[0];
     4ba:	30 93 08 06 	sts	0x0608, r19
     4be:	20 93 07 06 	sts	0x0607, r18

   mem_ctr_blk[0].mem_blk_num  = 1;    //mcb_NUM 表头下面挂载的mcb的个数初始化为1
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	90 93 04 06 	sts	0x0604, r25
     4ca:	80 93 03 06 	sts	0x0603, r24
   mem_ctr_blk[0].mem_blk_ofs  = 0;    //UsedBytes;已经使用的总字节数初始化为0
     4ce:	10 92 02 06 	sts	0x0602, r1
     4d2:	10 92 01 06 	sts	0x0601, r1

   //初始化第一块内存管理块mcb
   mem_ctr_blk[1].mem_blk_ofs = 0;
     4d6:	10 92 0a 06 	sts	0x060A, r1
     4da:	10 92 09 06 	sts	0x0609, r1
   mem_ctr_blk[1].mem_blk_num = MEM_POOL_SIZE/MEM_BLK_SIZE;
     4de:	80 e8       	ldi	r24, 0x80	; 128
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	90 93 0c 06 	sts	0x060C, r25
     4e6:	80 93 0b 06 	sts	0x060B, r24

   //内存空闲链表初始化，空闲链表使用单向链表
   //mem_ctr_blk[2]作为空闲链表表头
   //空闲链表中表头中空闲块的个数初始化为MEM_mcb_NUM - 3
   mem_ctr_blk[2].mem_blk_num = MEM_MCB_NUM - 3;
     4ea:	8d e3       	ldi	r24, 0x3D	; 61
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	90 93 14 06 	sts	0x0614, r25
     4f2:	80 93 13 06 	sts	0x0613, r24
     4f6:	f9 01       	movw	r30, r18
     4f8:	70 96       	adiw	r30, 0x10	; 16



//内存管理初始化
void MemAllocInit(void)
{
     4fa:	cf 01       	movw	r24, r30
     4fc:	08 96       	adiw	r24, 0x08	; 8
   //mem_ctr_blk[2]作为空闲链表表头
   //空闲链表中表头中空闲块的个数初始化为MEM_mcb_NUM - 3
   mem_ctr_blk[2].mem_blk_num = MEM_MCB_NUM - 3;
   for(i=2; i<MEM_MCB_NUM - 1; i++)
   {
       mem_ctr_blk[i].mem_next = &mem_ctr_blk[i+1];
     4fe:	91 83       	std	Z+1, r25	; 0x01
     500:	80 83       	st	Z, r24
       mem_ctr_blk[i].mem_blk_num = 0;
     502:	17 82       	std	Z+7, r1	; 0x07
     504:	16 82       	std	Z+6, r1	; 0x06
       mem_ctr_blk[i].mem_blk_ofs = 0;
     506:	15 82       	std	Z+5, r1	; 0x05
     508:	14 82       	std	Z+4, r1	; 0x04
     50a:	fc 01       	movw	r30, r24

   //内存空闲链表初始化，空闲链表使用单向链表
   //mem_ctr_blk[2]作为空闲链表表头
   //空闲链表中表头中空闲块的个数初始化为MEM_mcb_NUM - 3
   mem_ctr_blk[2].mem_blk_num = MEM_MCB_NUM - 3;
   for(i=2; i<MEM_MCB_NUM - 1; i++)
     50c:	87 e0       	ldi	r24, 0x07	; 7
     50e:	e5 3f       	cpi	r30, 0xF5	; 245
     510:	f8 07       	cpc	r31, r24
     512:	99 f7       	brne	.-26     	; 0x4fa <MemAllocInit+0x60>
   {
       mem_ctr_blk[i].mem_next = &mem_ctr_blk[i+1];
       mem_ctr_blk[i].mem_blk_num = 0;
       mem_ctr_blk[i].mem_blk_ofs = 0;
   }
   mem_ctr_blk[MEM_MCB_NUM - 1].mem_blk_num = 0;
     514:	17 82       	std	Z+7, r1	; 0x07
     516:	16 82       	std	Z+6, r1	; 0x06
   mem_ctr_blk[MEM_MCB_NUM - 1].mem_blk_ofs = 0;
     518:	15 82       	std	Z+5, r1	; 0x05
     51a:	14 82       	std	Z+4, r1	; 0x04

   #if  MEM_DEBUG >= 1
      MemDebug("memory's allocatation initialization completed");
   #endif
}
     51c:	08 95       	ret

0000051e <MemAlloc>:


//内存分配函数
void *MemAlloc(MEM_ALC_BYT_TYP byte_size)
{
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
    #if  MEM_DATA_BITS == 32
    u32_t        mem_alc_blk_num;
    #endif

    mcb* mem_ctr_blk_point;
    mem_ctr_blk_point = mem_ctr_blk[0].mem_next;
     522:	c0 91 fd 05 	lds	r28, 0x05FD
     526:	d0 91 fe 05 	lds	r29, 0x05FE
    #endif
    //计算所需字节数
    byte_size = (byte_size + MEM_DATA_BYTES);

    //寻找可用的内存控制块
    for(i=0;i< mem_ctr_blk[0].mem_blk_num;i++)
     52a:	60 91 03 06 	lds	r22, 0x0603
     52e:	70 91 04 06 	lds	r23, 0x0604
     532:	61 15       	cp	r22, r1
     534:	71 05       	cpc	r23, r1
     536:	21 f1       	breq	.+72     	; 0x580 <MemAlloc+0x62>

    #if  MEM_DEBUG >= 1
      MemDebug("memory's allocatation start...");
    #endif
    //计算所需字节数
    byte_size = (byte_size + MEM_DATA_BYTES);
     538:	ac 01       	movw	r20, r24
     53a:	4e 5f       	subi	r20, 0xFE	; 254
     53c:	5f 4f       	sbci	r21, 0xFF	; 255

    //寻找可用的内存控制块
    for(i=0;i< mem_ctr_blk[0].mem_blk_num;i++)
    {
       if( byte_size <= (mem_ctr_blk_point->mem_blk_num*MEM_BLK_SIZE))
     53e:	8e 81       	ldd	r24, Y+6	; 0x06
     540:	9f 81       	ldd	r25, Y+7	; 0x07
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	84 17       	cp	r24, r20
     550:	95 07       	cpc	r25, r21
     552:	e0 f4       	brcc	.+56     	; 0x58c <MemAlloc+0x6e>

          #if  MEM_DEBUG >= 1
            MemDebug("memory's allocatation successed");
          #endif

          return (mem_pool + return_addr_ofs);
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	0b c0       	rjmp	.+22     	; 0x570 <MemAlloc+0x52>
    byte_size = (byte_size + MEM_DATA_BYTES);

    //寻找可用的内存控制块
    for(i=0;i< mem_ctr_blk[0].mem_blk_num;i++)
    {
       if( byte_size <= (mem_ctr_blk_point->mem_blk_num*MEM_BLK_SIZE))
     55a:	8e 81       	ldd	r24, Y+6	; 0x06
     55c:	9f 81       	ldd	r25, Y+7	; 0x07
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	84 17       	cp	r24, r20
     56c:	95 07       	cpc	r25, r21
     56e:	70 f4       	brcc	.+28     	; 0x58c <MemAlloc+0x6e>
          #endif

          return (mem_pool + return_addr_ofs);
       }
       else
         mem_ctr_blk_point = mem_ctr_blk_point->mem_next;
     570:	09 90       	ld	r0, Y+
     572:	d8 81       	ld	r29, Y
     574:	c0 2d       	mov	r28, r0
    #endif
    //计算所需字节数
    byte_size = (byte_size + MEM_DATA_BYTES);

    //寻找可用的内存控制块
    for(i=0;i< mem_ctr_blk[0].mem_blk_num;i++)
     576:	2f 5f       	subi	r18, 0xFF	; 255
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	26 17       	cp	r18, r22
     57c:	37 07       	cpc	r19, r23
     57e:	68 f3       	brcs	.-38     	; 0x55a <MemAlloc+0x3c>
     580:	e0 e0       	ldi	r30, 0x00	; 0
     582:	f0 e0       	ldi	r31, 0x00	; 0
    }
    #if  MEM_DEBUG >= 1
      MemDebug("memory's allocatation fail");
    #endif
    return NULL;
}
     584:	cf 01       	movw	r24, r30
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret
       {
          //计算所需的内存块个数
          mem_alc_blk_num = byte_size/MEM_BLK_SIZE+((byte_size%MEM_BLK_SIZE)+MEM_BLK_SIZE - 1)/MEM_BLK_SIZE;

          //更新内存使用的总字节数
          mem_ctr_blk[0].mem_blk_ofs += mem_alc_blk_num;
     58c:	ca 01       	movw	r24, r20
     58e:	87 70       	andi	r24, 0x07	; 7
     590:	90 70       	andi	r25, 0x00	; 0
     592:	07 96       	adiw	r24, 0x07	; 7
     594:	96 95       	lsr	r25
     596:	87 95       	ror	r24
     598:	96 95       	lsr	r25
     59a:	87 95       	ror	r24
     59c:	96 95       	lsr	r25
     59e:	87 95       	ror	r24
     5a0:	56 95       	lsr	r21
     5a2:	47 95       	ror	r20
     5a4:	56 95       	lsr	r21
     5a6:	47 95       	ror	r20
     5a8:	56 95       	lsr	r21
     5aa:	47 95       	ror	r20
     5ac:	84 0f       	add	r24, r20
     5ae:	48 2f       	mov	r20, r24
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	80 91 01 06 	lds	r24, 0x0601
     5b6:	90 91 02 06 	lds	r25, 0x0602
     5ba:	84 0f       	add	r24, r20
     5bc:	95 1f       	adc	r25, r21
     5be:	90 93 02 06 	sts	0x0602, r25
     5c2:	80 93 01 06 	sts	0x0601, r24

          //计算返回的偏移量
          return_addr_ofs = mem_ctr_blk_point->mem_blk_ofs*MEM_BLK_SIZE;
     5c6:	6c 81       	ldd	r22, Y+4	; 0x04
     5c8:	7d 81       	ldd	r23, Y+5	; 0x05
     5ca:	66 0f       	add	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	66 0f       	add	r22, r22
     5d0:	77 1f       	adc	r23, r23
     5d2:	66 0f       	add	r22, r22
     5d4:	77 1f       	adc	r23, r23

          //在返回地址前面注入此次使用的内存块的个数
          #if  MEM_ADDR_BITS == 16
          *(u16_t*)(&mem_pool[return_addr_ofs]) = (u16_t)((mem_alc_blk_num));
     5d6:	fb 01       	movw	r30, r22
     5d8:	e3 50       	subi	r30, 0x03	; 3
     5da:	f8 4f       	sbci	r31, 0xF8	; 248
     5dc:	51 83       	std	Z+1, r21	; 0x01
     5de:	40 83       	st	Z, r20
          return_addr_ofs = return_addr_ofs + 4;
          #endif

          //如果所需内存块个数与当前内存控制块中的块数相等，则
          //在内存管理链表钟删除该节点并归还给空闲链表
          if(mem_alc_blk_num == mem_ctr_blk_point->mem_blk_num )
     5e0:	2e 81       	ldd	r18, Y+6	; 0x06
     5e2:	3f 81       	ldd	r19, Y+7	; 0x07
     5e4:	42 17       	cp	r20, r18
     5e6:	53 07       	cpc	r21, r19
     5e8:	89 f0       	breq	.+34     	; 0x60c <MemAlloc+0xee>

          }
          else
          {
              //更新内存块的偏移量和内存块个数
              mem_ctr_blk_point->mem_blk_ofs = mem_ctr_blk_point->mem_blk_ofs + mem_alc_blk_num;
     5ea:	8c 81       	ldd	r24, Y+4	; 0x04
     5ec:	9d 81       	ldd	r25, Y+5	; 0x05
     5ee:	84 0f       	add	r24, r20
     5f0:	95 1f       	adc	r25, r21
     5f2:	9d 83       	std	Y+5, r25	; 0x05
     5f4:	8c 83       	std	Y+4, r24	; 0x04
              mem_ctr_blk_point->mem_blk_num -= mem_alc_blk_num;
     5f6:	24 1b       	sub	r18, r20
     5f8:	35 0b       	sbc	r19, r21
     5fa:	3f 83       	std	Y+7, r19	; 0x07
     5fc:	2e 83       	std	Y+6, r18	; 0x06

          #if  MEM_DEBUG >= 1
            MemDebug("memory's allocatation successed");
          #endif

          return (mem_pool + return_addr_ofs);
     5fe:	fb 01       	movw	r30, r22
     600:	e1 50       	subi	r30, 0x01	; 1
     602:	f8 4f       	sbci	r31, 0xF8	; 248
    }
    #if  MEM_DEBUG >= 1
      MemDebug("memory's allocatation fail");
    #endif
    return NULL;
}
     604:	cf 01       	movw	r24, r30
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

          //如果所需内存块个数与当前内存控制块中的块数相等，则
          //在内存管理链表钟删除该节点并归还给空闲链表
          if(mem_alc_blk_num == mem_ctr_blk_point->mem_blk_num )
          {
              mem_ctr_blk_point->mem_prv->mem_next = mem_ctr_blk_point->mem_next;
     60c:	aa 81       	ldd	r26, Y+2	; 0x02
     60e:	bb 81       	ldd	r27, Y+3	; 0x03
     610:	88 81       	ld	r24, Y
     612:	99 81       	ldd	r25, Y+1	; 0x01
     614:	11 96       	adiw	r26, 0x01	; 1
     616:	9c 93       	st	X, r25
     618:	8e 93       	st	-X, r24
              mem_ctr_blk_point->mem_next->mem_prv = mem_ctr_blk_point->mem_prv;
     61a:	e8 81       	ld	r30, Y
     61c:	f9 81       	ldd	r31, Y+1	; 0x01
     61e:	b3 83       	std	Z+3, r27	; 0x03
     620:	a2 83       	std	Z+2, r26	; 0x02

              mem_ctr_blk_point->mem_next = mem_ctr_blk[2].mem_next;
     622:	80 91 0d 06 	lds	r24, 0x060D
     626:	90 91 0e 06 	lds	r25, 0x060E
     62a:	99 83       	std	Y+1, r25	; 0x01
     62c:	88 83       	st	Y, r24
              mem_ctr_blk[2].mem_next    = mem_ctr_blk_point;
     62e:	d0 93 0e 06 	sts	0x060E, r29
     632:	c0 93 0d 06 	sts	0x060D, r28

              mem_ctr_blk[2].mem_blk_num ++ ;
     636:	80 91 13 06 	lds	r24, 0x0613
     63a:	90 91 14 06 	lds	r25, 0x0614
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	90 93 14 06 	sts	0x0614, r25
     644:	80 93 13 06 	sts	0x0613, r24
              mem_ctr_blk[0].mem_blk_num -- ;
     648:	80 91 03 06 	lds	r24, 0x0603
     64c:	90 91 04 06 	lds	r25, 0x0604
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	90 93 04 06 	sts	0x0604, r25
     656:	80 93 03 06 	sts	0x0603, r24
     65a:	d1 cf       	rjmp	.-94     	; 0x5fe <MemAlloc+0xe0>

0000065c <MemFree>:
}


//内存释放函数
void  MemFree(void *p)
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	fc 01       	movw	r30, r24
        MemDebug("memory's freeing start...");
     #endif

     //从指针前面取出内存块的个数和求出该块内存的实际偏移量
     #if  MEM_ADDR_BITS == 16
     mem_alc_num  =(MEM_DATA_TYPE)(*(u16_t*)((u8_t *)p-2));
     662:	b2 91       	ld	r27, -Z
     664:	a2 91       	ld	r26, -Z
     666:	32 96       	adiw	r30, 0x02	; 2
     mem_blk_ofs = (MEM_DATA_TYPE)(((u32_t)((u8_t *)p - mem_pool - 4))/MEM_BLK_SIZE);
     #endif


     //开始指向内存管理链表的第一个控制块
     mem_ctr_blk_point = mem_ctr_blk[0].mem_next;
     668:	c0 91 fd 05 	lds	r28, 0x05FD
     66c:	d0 91 fe 05 	lds	r29, 0x05FE

     //按照从小到大顺序插入新的内存控制块到内存控制链表中
     for(i=0;i<mem_ctr_blk[0].mem_blk_num; i++)
     670:	60 91 03 06 	lds	r22, 0x0603
     674:	70 91 04 06 	lds	r23, 0x0604
     678:	61 15       	cp	r22, r1
     67a:	71 05       	cpc	r23, r1
     67c:	f1 f0       	breq	.+60     	; 0x6ba <MemFree+0x5e>
     #endif

     //从指针前面取出内存块的个数和求出该块内存的实际偏移量
     #if  MEM_ADDR_BITS == 16
     mem_alc_num  =(MEM_DATA_TYPE)(*(u16_t*)((u8_t *)p-2));
     mem_blk_ofs = (MEM_DATA_TYPE)(((u16_t)((u8_t *)p - mem_pool - 2))/MEM_BLK_SIZE);
     67e:	af 01       	movw	r20, r30
     680:	4f 5f       	subi	r20, 0xFF	; 255
     682:	57 40       	sbci	r21, 0x07	; 7
     684:	56 95       	lsr	r21
     686:	47 95       	ror	r20
     688:	56 95       	lsr	r21
     68a:	47 95       	ror	r20
     68c:	56 95       	lsr	r21
     68e:	47 95       	ror	r20
     mem_ctr_blk_point = mem_ctr_blk[0].mem_next;

     //按照从小到大顺序插入新的内存控制块到内存控制链表中
     for(i=0;i<mem_ctr_blk[0].mem_blk_num; i++)
     {
        if(mem_blk_ofs < mem_ctr_blk_point->mem_blk_ofs)
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	9d 81       	ldd	r25, Y+5	; 0x05
     694:	48 17       	cp	r20, r24
     696:	59 07       	cpc	r21, r25
     698:	98 f0       	brcs	.+38     	; 0x6c0 <MemFree+0x64>
           mem_ctr_blk[2].mem_next = mem_idl_blk_point;

           //更新空闲链表下挂载的控制块个数
           mem_ctr_blk[2].mem_blk_num --;

           break;
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <MemFree+0x4e>
     mem_ctr_blk_point = mem_ctr_blk[0].mem_next;

     //按照从小到大顺序插入新的内存控制块到内存控制链表中
     for(i=0;i<mem_ctr_blk[0].mem_blk_num; i++)
     {
        if(mem_blk_ofs < mem_ctr_blk_point->mem_blk_ofs)
     6a0:	8c 81       	ldd	r24, Y+4	; 0x04
     6a2:	9d 81       	ldd	r25, Y+5	; 0x05
     6a4:	48 17       	cp	r20, r24
     6a6:	59 07       	cpc	r21, r25
     6a8:	58 f0       	brcs	.+22     	; 0x6c0 <MemFree+0x64>

           break;
        }
        else
        {
            mem_ctr_blk_point = mem_ctr_blk_point->mem_next;
     6aa:	09 90       	ld	r0, Y+
     6ac:	d8 81       	ld	r29, Y
     6ae:	c0 2d       	mov	r28, r0

     //开始指向内存管理链表的第一个控制块
     mem_ctr_blk_point = mem_ctr_blk[0].mem_next;

     //按照从小到大顺序插入新的内存控制块到内存控制链表中
     for(i=0;i<mem_ctr_blk[0].mem_blk_num; i++)
     6b0:	2f 5f       	subi	r18, 0xFF	; 255
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	26 17       	cp	r18, r22
     6b6:	37 07       	cpc	r19, r23
     6b8:	98 f3       	brcs	.-26     	; 0x6a0 <MemFree+0x44>
          MemDebug("memory's freeing successed");
        else
          MemDebug("memory's freeing fail");
     #endif

}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret
     for(i=0;i<mem_ctr_blk[0].mem_blk_num; i++)
     {
        if(mem_blk_ofs < mem_ctr_blk_point->mem_blk_ofs)
        {
           //临时存放空闲链表的第二个内存块地址
           mem_idl_blk_point = mem_ctr_blk[2].mem_next->mem_next;
     6c0:	e0 91 0d 06 	lds	r30, 0x060D
     6c4:	f0 91 0e 06 	lds	r31, 0x060E
     6c8:	20 81       	ld	r18, Z
     6ca:	31 81       	ldd	r19, Z+1	; 0x01

           //装入即将要释放的内存块的大小属性和偏移量属性到从空闲链表中取出的控制块中
           mem_ctr_blk[2].mem_next->mem_blk_ofs = mem_blk_ofs;
     6cc:	55 83       	std	Z+5, r21	; 0x05
     6ce:	44 83       	std	Z+4, r20	; 0x04
           mem_ctr_blk[2].mem_next->mem_blk_num = mem_alc_num;
     6d0:	b7 83       	std	Z+7, r27	; 0x07
     6d2:	a6 83       	std	Z+6, r26	; 0x06

           //更新管理链表表头属性
           mem_ctr_blk[0].mem_blk_ofs -= mem_alc_num;
     6d4:	80 91 01 06 	lds	r24, 0x0601
     6d8:	90 91 02 06 	lds	r25, 0x0602
     6dc:	8a 1b       	sub	r24, r26
     6de:	9b 0b       	sbc	r25, r27
     6e0:	90 93 02 06 	sts	0x0602, r25
     6e4:	80 93 01 06 	sts	0x0601, r24

           //插入管理链表中
           mem_ctr_blk[2].mem_next->mem_next = mem_ctr_blk_point;
     6e8:	d1 83       	std	Z+1, r29	; 0x01
     6ea:	c0 83       	st	Z, r28
           mem_ctr_blk[2].mem_next->mem_prv  = mem_ctr_blk_point->mem_prv;
     6ec:	a0 91 0d 06 	lds	r26, 0x060D
     6f0:	b0 91 0e 06 	lds	r27, 0x060E
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	9b 81       	ldd	r25, Y+3	; 0x03
     6f8:	13 96       	adiw	r26, 0x03	; 3
     6fa:	9c 93       	st	X, r25
     6fc:	8e 93       	st	-X, r24
     6fe:	12 97       	sbiw	r26, 0x02	; 2
           mem_ctr_blk_point->mem_prv->mem_next = mem_ctr_blk[2].mem_next;
     700:	ea 81       	ldd	r30, Y+2	; 0x02
     702:	fb 81       	ldd	r31, Y+3	; 0x03
     704:	b1 83       	std	Z+1, r27	; 0x01
     706:	a0 83       	st	Z, r26
           mem_ctr_blk_point->mem_prv = mem_ctr_blk[2].mem_next;
     708:	80 91 0d 06 	lds	r24, 0x060D
     70c:	90 91 0e 06 	lds	r25, 0x060E
     710:	9b 83       	std	Y+3, r25	; 0x03
     712:	8a 83       	std	Y+2, r24	; 0x02

           //更新内存管理链表中挂载的内存块的个数
           mem_ctr_blk[0].mem_blk_num ++ ;
     714:	80 91 03 06 	lds	r24, 0x0603
     718:	90 91 04 06 	lds	r25, 0x0604
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	90 93 04 06 	sts	0x0604, r25
     722:	80 93 03 06 	sts	0x0603, r24

           //将空闲链表的表头指向下一个空闲内存块
           mem_ctr_blk[2].mem_next = mem_idl_blk_point;
     726:	30 93 0e 06 	sts	0x060E, r19
     72a:	20 93 0d 06 	sts	0x060D, r18

           //更新空闲链表下挂载的控制块个数
           mem_ctr_blk[2].mem_blk_num --;
     72e:	80 91 13 06 	lds	r24, 0x0613
     732:	90 91 14 06 	lds	r25, 0x0614
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	90 93 14 06 	sts	0x0614, r25
     73c:	80 93 13 06 	sts	0x0613, r24
          MemDebug("memory's freeing successed");
        else
          MemDebug("memory's freeing fail");
     #endif

}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <MemGetUsedBytes>:

//获取内存使用总字节数
MEM_DATA_TYPE MemGetUsedBytes(void)
{
     746:	20 91 01 06 	lds	r18, 0x0601
     74a:	30 91 02 06 	lds	r19, 0x0602
     74e:	22 0f       	add	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	22 0f       	add	r18, r18
     754:	33 1f       	adc	r19, r19
     756:	22 0f       	add	r18, r18
     758:	33 1f       	adc	r19, r19
   return mem_ctr_blk[0].mem_blk_ofs*MEM_BLK_SIZE;
}
     75a:	c9 01       	movw	r24, r18
     75c:	08 95       	ret

0000075e <RTS_PORT_SystickInit>:

//RTS OS滴答定时器初始化，移植时需要用户自己实现
void RTS_PORT_SystickInit(void)
{
    /** 填写你的OS滴答定时器初始化代码 **/
    TCCR1B = 0x02;   //进行8预分频  16MHz
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	80 93 81 00 	sts	0x0081, r24
    TCNT1H = 0X00;
     764:	10 92 85 00 	sts	0x0085, r1
    TCNT1L = 0X00;
     768:	10 92 84 00 	sts	0x0084, r1
    OCR1AH = 0XFF;
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	80 93 89 00 	sts	0x0089, r24
    OCR1AL = 0XFF;
     772:	80 93 88 00 	sts	0x0088, r24
    TIFR1  = 0X00;
     776:	16 ba       	out	0x16, r1	; 22
    
    
    RTS_DISABLE_INTERRUPTS  /*< 关中断 */
     778:	8f b7       	in	r24, 0x3f	; 63
     77a:	8f 77       	andi	r24, 0x7F	; 127
     77c:	8f bf       	out	0x3f, r24	; 63
}
     77e:	08 95       	ret

00000780 <RTS_PORT_TaskStackInit>:

//任务堆栈初始化，移植需要用户自己实现
u8_t* RTS_PORT_TaskStackInit(void (*task)(void *data) ,
                                 u8_t     *task_stack,
                                 u16_t    stack_size)
{
     780:	fb 01       	movw	r30, r22
    task_stack       +=  stack_size-1;
     782:	41 50       	subi	r20, 0x01	; 1
     784:	50 40       	sbci	r21, 0x00	; 0
     786:	e4 0f       	add	r30, r20
     788:	f5 1f       	adc	r31, r21
    *(task_stack--)  =   (u8_t)((u16_t)task);
     78a:	80 83       	st	Z, r24
    *(task_stack--)  =   (u8_t)((u16_t)task>>8);
     78c:	92 93       	st	-Z, r25
    *(task_stack--)  =   (u8_t)((u16_t)task>>16);
     78e:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r1
     790:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r0
     792:	12 92       	st	-Z, r1
    *(task_stack--)  =   (u8_t)(1<<7);   //开中断标志，为了让每个任务都有可能被切换
     794:	80 e8       	ldi	r24, 0x80	; 128
     796:	82 93       	st	-Z, r24
    *(task_stack--)  =   0u;   //RAMP
     798:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r2
     79a:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r3
     79c:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r4
     79e:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r5
     7a0:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r6
     7a2:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r7
     7a4:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r8
     7a6:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r9
     7a8:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r10
     7aa:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r11
     7ac:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r12
     7ae:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r13
     7b0:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r14
     7b2:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r15
     7b4:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r16
     7b6:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r17
     7b8:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r18
     7ba:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r19
     7bc:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r20
     7be:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r21
     7c0:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r22
     7c2:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r23
     7c4:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r24
     7c6:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r25
     7c8:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r26
     7ca:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r27
     7cc:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r30
     7ce:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r31
     7d0:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r29
     7d2:	12 92       	st	-Z, r1
    *(task_stack--)  =   0u;   //r28
     7d4:	12 92       	st	-Z, r1
     7d6:	31 97       	sbiw	r30, 0x01	; 1

    return task_stack;
}
     7d8:	cf 01       	movw	r24, r30
     7da:	08 95       	ret

000007dc <RTS_CORE_Init>:
    #endif
}


void RTS_CORE_Init(void)
{
     7dc:	ec eb       	ldi	r30, 0xBC	; 188
     7de:	f3 e0       	ldi	r31, 0x03	; 3
static void RTS_CORE_TasksRegTblInit(void)
{
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_TASKS_NUM+1;i++)
    {
        rts_gb_tasks_reg_tbl[i]= NULL;
     7e0:	11 92       	st	Z+, r1
     7e2:	11 92       	st	Z+, r1
/*---------------------------------- RTS_OS初始化部分 -------------------------------------*/
//RTS_OS任务注册表初始化
static void RTS_CORE_TasksRegTblInit(void)
{
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_TASKS_NUM+1;i++)
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	e2 3d       	cpi	r30, 0xD2	; 210
     7e8:	f8 07       	cpc	r31, r24
     7ea:	d1 f7       	brne	.-12     	; 0x7e0 <RTS_CORE_Init+0x4>
static void RTS_CORE_PrioBitMapInit(void)
{
    u8_t i;
    for(i=0;i<MAX_BITMAP_ARRAY_NUM;i++)
    {
        rts_gb_prio_bitmap[i] = 0;
     7ec:	10 92 d2 03 	sts	0x03D2, r1
     7f0:	e5 ed       	ldi	r30, 0xD5	; 213
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
static void RTS_CORE_RdyListHeadTblInit(void)
{
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_MAX_PRIORITIES+1;i++)
    {
        rts_gb_rdy_lh_tbl[i].head = NULL;
     7f4:	11 82       	std	Z+1, r1	; 0x01
     7f6:	10 82       	st	Z, r1
        rts_gb_rdy_lh_tbl[i].node_num = 0;
     7f8:	12 82       	std	Z+2, r1	; 0x02
     7fa:	33 96       	adiw	r30, 0x03	; 3

//RTS_OS就绪任务链表数组初始化
static void RTS_CORE_RdyListHeadTblInit(void)
{
    u8_t i;
    for(i=0;i<RTS_CFG_MAX_MAX_PRIORITIES+1;i++)
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	ea 3e       	cpi	r30, 0xEA	; 234
     800:	f8 07       	cpc	r31, r24
     802:	c1 f7       	brne	.-16     	; 0x7f4 <RTS_CORE_Init+0x18>
}

//RTS_OS任务挂起、延时链表头初始化
static void RTS_CORE_Pend_DlyListHeadInit(void)
{
    rts_pend_tcb0.curr_status = RTS_TASK_STATUS_INVALID;
     804:	87 e0       	ldi	r24, 0x07	; 7
     806:	80 93 f0 03 	sts	0x03F0, r24
    rts_pend_tcb0.prev_status = RTS_TASK_STATUS_INVALID;
     80a:	80 93 f1 03 	sts	0x03F1, r24
    rts_pend_tcb0.prev = &rts_pend_tcb0;
     80e:	2d ee       	ldi	r18, 0xED	; 237
     810:	33 e0       	ldi	r19, 0x03	; 3
     812:	30 93 f8 03 	sts	0x03F8, r19
     816:	20 93 f7 03 	sts	0x03F7, r18
    rts_pend_tcb0.next = &rts_pend_tcb0;
     81a:	30 93 f6 03 	sts	0x03F6, r19
     81e:	20 93 f5 03 	sts	0x03F5, r18
    rts_pend_tcb0.list_head = &rts_gb_pend_lh;
     822:	8a ee       	ldi	r24, 0xEA	; 234
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	90 93 f4 03 	sts	0x03F4, r25
     82a:	80 93 f3 03 	sts	0x03F3, r24
    rts_gb_pend_lh.head = &rts_pend_tcb0;
     82e:	30 93 eb 03 	sts	0x03EB, r19
     832:	20 93 ea 03 	sts	0x03EA, r18
    rts_gb_pend_lh.node_num = 0;
     836:	10 92 ec 03 	sts	0x03EC, r1
{
    RTS_CORE_TasksRegTblInit();
    RTS_CORE_PrioBitMapInit();
    RTS_CORE_RdyListHeadTblInit();
    RTS_CORE_Pend_DlyListHeadInit();
}
     83a:	08 95       	ret

0000083c <RTS_CORE_UpdateTaskHightPrio>:
    u8_t bitmap_lv1_index;
    u8_t bitmap_index;
    u8_t bitmap_bit;
    
    bitmap_lv1_index = rts_gb_prio_tbl[rts_gb_prio_bitmap_lv2_index];
    bitmap_index     = rts_gb_prio_tbl[rts_gb_prio_bitmap_lv1_index[bitmap_lv1_index]];
     83c:	80 91 d4 03 	lds	r24, 0x03D4
     840:	a0 eb       	ldi	r26, 0xB0	; 176
     842:	b2 e0       	ldi	r27, 0x02	; 2
     844:	fd 01       	movw	r30, r26
     846:	e8 0f       	add	r30, r24
     848:	f1 1d       	adc	r31, r1
     84a:	20 81       	ld	r18, Z
     84c:	30 e0       	ldi	r19, 0x00	; 0
    bitmap_bit       = rts_gb_prio_tbl[rts_gb_prio_bitmap[bitmap_lv1_index*8 + bitmap_index]];
     84e:	f9 01       	movw	r30, r18
     850:	ed 52       	subi	r30, 0x2D	; 45
     852:	fc 4f       	sbci	r31, 0xFC	; 252
     854:	80 81       	ld	r24, Z
     856:	fd 01       	movw	r30, r26
     858:	e8 0f       	add	r30, r24
     85a:	f1 1d       	adc	r31, r1
     85c:	80 81       	ld	r24, Z
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	22 0f       	add	r18, r18
     864:	33 1f       	adc	r19, r19
     866:	22 0f       	add	r18, r18
     868:	33 1f       	adc	r19, r19
     86a:	28 0f       	add	r18, r24
     86c:	31 1d       	adc	r19, r1
    prio = bitmap_lv1_index*64 + bitmap_index*8 + bitmap_bit;
     86e:	f9 01       	movw	r30, r18
     870:	ee 52       	subi	r30, 0x2E	; 46
     872:	fc 4f       	sbci	r31, 0xFC	; 252
     874:	80 81       	ld	r24, Z
     876:	a8 0f       	add	r26, r24
     878:	b1 1d       	adc	r27, r1
     87a:	22 0f       	add	r18, r18
     87c:	33 1f       	adc	r19, r19
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	8c 91       	ld	r24, X
     888:	82 0f       	add	r24, r18
    hiprio = prio;
     88a:	80 93 b0 03 	sts	0x03B0, r24
    return prio;
}
     88e:	08 95       	ret

00000890 <RTS_CORE_ClearPrioBitmapBit>:

//根据优先级清除优先级位图
void RTS_CORE_ClearPrioBitmapBit(u8_t prio)
{
     890:	38 2f       	mov	r19, r24
    rts_gb_prio_bitmap[prio/8] &= (u8_t)(~(1<<(prio%8)));
     892:	e8 2f       	mov	r30, r24
     894:	e6 95       	lsr	r30
     896:	e6 95       	lsr	r30
     898:	e6 95       	lsr	r30
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	48 2f       	mov	r20, r24
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	ca 01       	movw	r24, r20
     8a2:	87 70       	andi	r24, 0x07	; 7
     8a4:	90 70       	andi	r25, 0x00	; 0
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	db 01       	movw	r26, r22
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <RTS_CORE_ClearPrioBitmapBit+0x22>
     8ae:	aa 0f       	add	r26, r26
     8b0:	bb 1f       	adc	r27, r27
     8b2:	8a 95       	dec	r24
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <RTS_CORE_ClearPrioBitmapBit+0x1e>
     8b6:	cd 01       	movw	r24, r26
     8b8:	80 95       	com	r24
     8ba:	ee 52       	subi	r30, 0x2E	; 46
     8bc:	fc 4f       	sbci	r31, 0xFC	; 252
     8be:	20 81       	ld	r18, Z
     8c0:	82 23       	and	r24, r18
     8c2:	80 83       	st	Z, r24
    if(rts_gb_prio_bitmap[prio/8] == 0)
     8c4:	88 23       	and	r24, r24
     8c6:	51 f5       	brne	.+84     	; 0x91c <RTS_CORE_ClearPrioBitmapBit+0x8c>
    {
        rts_gb_prio_bitmap_lv1_index[prio/64] &= (u8_t)(~(1<<((prio%64)/8)));
     8c8:	32 95       	swap	r19
     8ca:	36 95       	lsr	r19
     8cc:	36 95       	lsr	r19
     8ce:	33 70       	andi	r19, 0x03	; 3
     8d0:	a3 2f       	mov	r26, r19
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	4f 73       	andi	r20, 0x3F	; 63
     8d6:	50 70       	andi	r21, 0x00	; 0
     8d8:	55 95       	asr	r21
     8da:	47 95       	ror	r20
     8dc:	55 95       	asr	r21
     8de:	47 95       	ror	r20
     8e0:	55 95       	asr	r21
     8e2:	47 95       	ror	r20
     8e4:	cb 01       	movw	r24, r22
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <RTS_CORE_ClearPrioBitmapBit+0x5c>
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	4a 95       	dec	r20
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <RTS_CORE_ClearPrioBitmapBit+0x58>
     8f0:	80 95       	com	r24
     8f2:	fd 01       	movw	r30, r26
     8f4:	ed 52       	subi	r30, 0x2D	; 45
     8f6:	fc 4f       	sbci	r31, 0xFC	; 252
     8f8:	20 81       	ld	r18, Z
     8fa:	82 23       	and	r24, r18
     8fc:	80 83       	st	Z, r24
        if(rts_gb_prio_bitmap_lv1_index[prio/64] == 0)
     8fe:	88 23       	and	r24, r24
     900:	69 f4       	brne	.+26     	; 0x91c <RTS_CORE_ClearPrioBitmapBit+0x8c>
        {
            rts_gb_prio_bitmap_lv2_index  &= (u8_t)(~(1<<(prio/64)));
     902:	03 2e       	mov	r0, r19
     904:	02 c0       	rjmp	.+4      	; 0x90a <RTS_CORE_ClearPrioBitmapBit+0x7a>
     906:	66 0f       	add	r22, r22
     908:	77 1f       	adc	r23, r23
     90a:	0a 94       	dec	r0
     90c:	e2 f7       	brpl	.-8      	; 0x906 <RTS_CORE_ClearPrioBitmapBit+0x76>
     90e:	96 2f       	mov	r25, r22
     910:	90 95       	com	r25
     912:	80 91 d4 03 	lds	r24, 0x03D4
     916:	89 23       	and	r24, r25
     918:	80 93 d4 03 	sts	0x03D4, r24
     91c:	08 95       	ret

0000091e <RTS_CORE_SetPrioBitmapBit>:
}

//根据优先级设置优先级位图
void RTS_CORE_SetPrioBitmapBit(u8_t prio)
{
   rts_gb_prio_bitmap[prio/8] |= (u8_t)(1<<(prio%8)); //更新优先级位图
     91e:	68 2f       	mov	r22, r24
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	e2 ed       	ldi	r30, 0xD2	; 210
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	86 95       	lsr	r24
     928:	86 95       	lsr	r24
     92a:	86 95       	lsr	r24
     92c:	e8 0f       	add	r30, r24
     92e:	f1 1d       	adc	r31, r1
     930:	9b 01       	movw	r18, r22
     932:	27 70       	andi	r18, 0x07	; 7
     934:	30 70       	andi	r19, 0x00	; 0
     936:	a1 e0       	ldi	r26, 0x01	; 1
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	ad 01       	movw	r20, r26
     93c:	02 c0       	rjmp	.+4      	; 0x942 <RTS_CORE_SetPrioBitmapBit+0x24>
     93e:	44 0f       	add	r20, r20
     940:	55 1f       	adc	r21, r21
     942:	2a 95       	dec	r18
     944:	e2 f7       	brpl	.-8      	; 0x93e <RTS_CORE_SetPrioBitmapBit+0x20>
     946:	9a 01       	movw	r18, r20
     948:	40 81       	ld	r20, Z
     94a:	42 2b       	or	r20, r18
     94c:	40 83       	st	Z, r20
   rts_gb_prio_bitmap_lv1_index[prio/64] |= (u8_t)(1<<((prio%64)/8));
     94e:	86 95       	lsr	r24
     950:	86 95       	lsr	r24
     952:	86 95       	lsr	r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	fc 01       	movw	r30, r24
     958:	ed 52       	subi	r30, 0x2D	; 45
     95a:	fc 4f       	sbci	r31, 0xFC	; 252
     95c:	6f 73       	andi	r22, 0x3F	; 63
     95e:	70 70       	andi	r23, 0x00	; 0
     960:	75 95       	asr	r23
     962:	67 95       	ror	r22
     964:	75 95       	asr	r23
     966:	67 95       	ror	r22
     968:	75 95       	asr	r23
     96a:	67 95       	ror	r22
     96c:	9d 01       	movw	r18, r26
     96e:	02 c0       	rjmp	.+4      	; 0x974 <RTS_CORE_SetPrioBitmapBit+0x56>
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	6a 95       	dec	r22
     976:	e2 f7       	brpl	.-8      	; 0x970 <RTS_CORE_SetPrioBitmapBit+0x52>
     978:	b9 01       	movw	r22, r18
     97a:	20 81       	ld	r18, Z
     97c:	26 2b       	or	r18, r22
     97e:	20 83       	st	Z, r18
   rts_gb_prio_bitmap_lv2_index  |= (u8_t)(1<<(prio/64));
     980:	02 c0       	rjmp	.+4      	; 0x986 <RTS_CORE_SetPrioBitmapBit+0x68>
     982:	aa 0f       	add	r26, r26
     984:	bb 1f       	adc	r27, r27
     986:	8a 95       	dec	r24
     988:	e2 f7       	brpl	.-8      	; 0x982 <RTS_CORE_SetPrioBitmapBit+0x64>
     98a:	80 91 d4 03 	lds	r24, 0x03D4
     98e:	8a 2b       	or	r24, r26
     990:	80 93 d4 03 	sts	0x03D4, r24
}
     994:	08 95       	ret

00000996 <RTS_CORE_RegisterTask>:


//++++++注册任务到任务注册表中，注册成功后返回任务tid
//++++++返回0表示注册失败，规定0号tid用户不能使用
u8_t RTS_CORE_RegisterTask(TCB_t *tcb)
{
     996:	dc 01       	movw	r26, r24
     998:	ec eb       	ldi	r30, 0xBC	; 188
     99a:	f3 e0       	ldi	r31, 0x03	; 3
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	42 2f       	mov	r20, r18
    u8_t tid;
    for(tid = 0;tid < RTS_CFG_MAX_TASKS_NUM+1;tid++)
    {
        //如果该位置没有被注册，则将TCB注册到该位置上
        if(rts_gb_tasks_reg_tbl[tid] == NULL) 
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	89 2b       	or	r24, r25
     9a8:	49 f0       	breq	.+18     	; 0x9bc <RTS_CORE_RegisterTask+0x26>
        {
            rts_gb_tasks_reg_tbl[tid] = tcb;
            tcb->tid = tid;
            break;
     9aa:	4f 5f       	subi	r20, 0xFF	; 255
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	32 96       	adiw	r30, 0x02	; 2
//++++++注册任务到任务注册表中，注册成功后返回任务tid
//++++++返回0表示注册失败，规定0号tid用户不能使用
u8_t RTS_CORE_RegisterTask(TCB_t *tcb)
{
    u8_t tid;
    for(tid = 0;tid < RTS_CFG_MAX_TASKS_NUM+1;tid++)
     9b2:	2b 30       	cpi	r18, 0x0B	; 11
     9b4:	31 05       	cpc	r19, r1
     9b6:	a1 f7       	brne	.-24     	; 0x9a0 <RTS_CORE_RegisterTask+0xa>
            tcb->tid = tid;
            break;
        }
    }
    return tid;
}
     9b8:	84 2f       	mov	r24, r20
     9ba:	08 95       	ret
    for(tid = 0;tid < RTS_CFG_MAX_TASKS_NUM+1;tid++)
    {
        //如果该位置没有被注册，则将TCB注册到该位置上
        if(rts_gb_tasks_reg_tbl[tid] == NULL) 
        {
            rts_gb_tasks_reg_tbl[tid] = tcb;
     9bc:	f9 01       	movw	r30, r18
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	e4 54       	subi	r30, 0x44	; 68
     9c4:	fc 4f       	sbci	r31, 0xFC	; 252
     9c6:	b1 83       	std	Z+1, r27	; 0x01
     9c8:	a0 83       	st	Z, r26
            tcb->tid = tid;
     9ca:	15 96       	adiw	r26, 0x05	; 5
     9cc:	2c 93       	st	X, r18
            break;
        }
    }
    return tid;
}
     9ce:	84 2f       	mov	r24, r20
     9d0:	08 95       	ret

000009d2 <RTS_CORE_InsertTcbToRdyList>:

//++++++将任务TCB插入到任务就绪链表中
void RTS_CORE_InsertTcbToRdyList(TCB_t *tcb)
{
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
    u8_t prio;
    TCB_t *head = NULL;
    prio = tcb->prio;  //获取任务的优先级
     9d8:	6a 81       	ldd	r22, Y+2	; 0x02
    head = rts_gb_rdy_lh_tbl[prio].head;  //取得即将要插入就绪链表数组中的位置
     9da:	26 2f       	mov	r18, r22
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	a9 01       	movw	r20, r18
     9e0:	44 0f       	add	r20, r20
     9e2:	55 1f       	adc	r21, r21
     9e4:	fa 01       	movw	r30, r20
     9e6:	e2 0f       	add	r30, r18
     9e8:	f3 1f       	adc	r31, r19
     9ea:	eb 52       	subi	r30, 0x2B	; 43
     9ec:	fc 4f       	sbci	r31, 0xFC	; 252
     9ee:	a0 81       	ld	r26, Z
     9f0:	b1 81       	ldd	r27, Z+1	; 0x01
    if(head == NULL)   //当就绪链表下没有就绪TCB时
     9f2:	10 97       	sbiw	r26, 0x00	; 0
     9f4:	41 f1       	breq	.+80     	; 0xa46 <RTS_CORE_InsertTcbToRdyList+0x74>
        tcb->next = tcb;
        tcb->prev = tcb;
    }
    else               //当就绪链表下存在就绪TCB时
    {
        tcb->next = head;
     9f6:	b9 87       	std	Y+9, r27	; 0x09
     9f8:	a8 87       	std	Y+8, r26	; 0x08
        tcb->prev = head->prev;
     9fa:	1a 96       	adiw	r26, 0x0a	; 10
     9fc:	8d 91       	ld	r24, X+
     9fe:	9c 91       	ld	r25, X
     a00:	1b 97       	sbiw	r26, 0x0b	; 11
     a02:	9b 87       	std	Y+11, r25	; 0x0b
     a04:	8a 87       	std	Y+10, r24	; 0x0a
        head->prev->next = tcb;
     a06:	1a 96       	adiw	r26, 0x0a	; 10
     a08:	ed 91       	ld	r30, X+
     a0a:	fc 91       	ld	r31, X
     a0c:	1b 97       	sbiw	r26, 0x0b	; 11
     a0e:	d1 87       	std	Z+9, r29	; 0x09
     a10:	c0 87       	std	Z+8, r28	; 0x08
        head->prev = tcb;
     a12:	1b 96       	adiw	r26, 0x0b	; 11
     a14:	dc 93       	st	X, r29
     a16:	ce 93       	st	-X, r28
     a18:	1a 97       	sbiw	r26, 0x0a	; 10
    }
    ++rts_gb_rdy_lh_tbl[prio].node_num;  
     a1a:	fa 01       	movw	r30, r20
     a1c:	e2 0f       	add	r30, r18
     a1e:	f3 1f       	adc	r31, r19
     a20:	eb 52       	subi	r30, 0x2B	; 43
     a22:	fc 4f       	sbci	r31, 0xFC	; 252
     a24:	82 81       	ldd	r24, Z+2	; 0x02
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	82 83       	std	Z+2, r24	; 0x02
    tcb->list_head = &rts_gb_rdy_lh_tbl[prio];
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	68 9f       	mul	r22, r24
     a2e:	c0 01       	movw	r24, r0
     a30:	11 24       	eor	r1, r1
     a32:	8b 52       	subi	r24, 0x2B	; 43
     a34:	9c 4f       	sbci	r25, 0xFC	; 252
     a36:	9f 83       	std	Y+7, r25	; 0x07
     a38:	8e 83       	std	Y+6, r24	; 0x06
    //设置相应的优先级位图中的bit位
    RTS_CORE_SetPrioBitmapBit(prio);
     a3a:	86 2f       	mov	r24, r22
     a3c:	0e 94 8f 04 	call	0x91e	; 0x91e <RTS_CORE_SetPrioBitmapBit>
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret
    TCB_t *head = NULL;
    prio = tcb->prio;  //获取任务的优先级
    head = rts_gb_rdy_lh_tbl[prio].head;  //取得即将要插入就绪链表数组中的位置
    if(head == NULL)   //当就绪链表下没有就绪TCB时
    {
        rts_gb_rdy_lh_tbl[prio].head = tcb;  
     a46:	91 83       	std	Z+1, r25	; 0x01
     a48:	80 83       	st	Z, r24
        tcb->next = tcb;
     a4a:	99 87       	std	Y+9, r25	; 0x09
     a4c:	88 87       	std	Y+8, r24	; 0x08
        tcb->prev = tcb;
     a4e:	9b 87       	std	Y+11, r25	; 0x0b
     a50:	8a 87       	std	Y+10, r24	; 0x0a
     a52:	e3 cf       	rjmp	.-58     	; 0xa1a <RTS_CORE_InsertTcbToRdyList+0x48>

00000a54 <RTS_CORE_RemoveTcbFromRdyList>:
}


//++++++将任务TCB从就绪链表中删除
void RTS_CORE_RemoveTcbFromRdyList(TCB_t *tcb)
{
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	fc 01       	movw	r30, r24
    u8_t prio,num;
    prio = tcb->prio;
     a5a:	22 81       	ldd	r18, Z+2	; 0x02
    num = rts_gb_rdy_lh_tbl[prio].node_num;
     a5c:	82 2f       	mov	r24, r18
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	ec 01       	movw	r28, r24
     a62:	cc 0f       	add	r28, r28
     a64:	dd 1f       	adc	r29, r29
     a66:	c8 0f       	add	r28, r24
     a68:	d9 1f       	adc	r29, r25
     a6a:	cb 52       	subi	r28, 0x2B	; 43
     a6c:	dc 4f       	sbci	r29, 0xFC	; 252
     a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    if(num == 1)  //如果移除后就绪链表中的节点为0时
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	c9 f0       	breq	.+50     	; 0xaa6 <RTS_CORE_RemoveTcbFromRdyList+0x52>
    {
        rts_gb_rdy_lh_tbl[prio].head = NULL;
        RTS_CORE_ClearPrioBitmapBit(prio);    //清除相应的优先级位图中的bit位
        rts_gb_rdy_lh_tbl[prio].node_num = 0;
    }
    else if(num > 1)
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	a0 f0       	brcs	.+40     	; 0xaa0 <RTS_CORE_RemoveTcbFromRdyList+0x4c>
    {
        rts_gb_rdy_lh_tbl[prio].head = tcb->next;
     a78:	80 85       	ldd	r24, Z+8	; 0x08
     a7a:	91 85       	ldd	r25, Z+9	; 0x09
     a7c:	99 83       	std	Y+1, r25	; 0x01
     a7e:	88 83       	st	Y, r24
        tcb->prev->next = tcb->next;
     a80:	a2 85       	ldd	r26, Z+10	; 0x0a
     a82:	b3 85       	ldd	r27, Z+11	; 0x0b
     a84:	80 85       	ldd	r24, Z+8	; 0x08
     a86:	91 85       	ldd	r25, Z+9	; 0x09
     a88:	19 96       	adiw	r26, 0x09	; 9
     a8a:	9c 93       	st	X, r25
     a8c:	8e 93       	st	-X, r24
     a8e:	18 97       	sbiw	r26, 0x08	; 8
        tcb->next->prev = tcb->prev;
     a90:	00 84       	ldd	r0, Z+8	; 0x08
     a92:	f1 85       	ldd	r31, Z+9	; 0x09
     a94:	e0 2d       	mov	r30, r0
     a96:	b3 87       	std	Z+11, r27	; 0x0b
     a98:	a2 87       	std	Z+10, r26	; 0x0a
        --rts_gb_rdy_lh_tbl[prio].node_num;
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	81 50       	subi	r24, 0x01	; 1
     a9e:	8a 83       	std	Y+2, r24	; 0x02
    }
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret
    u8_t prio,num;
    prio = tcb->prio;
    num = rts_gb_rdy_lh_tbl[prio].node_num;
    if(num == 1)  //如果移除后就绪链表中的节点为0时
    {
        rts_gb_rdy_lh_tbl[prio].head = NULL;
     aa6:	19 82       	std	Y+1, r1	; 0x01
     aa8:	18 82       	st	Y, r1
        RTS_CORE_ClearPrioBitmapBit(prio);    //清除相应的优先级位图中的bit位
     aaa:	82 2f       	mov	r24, r18
     aac:	0e 94 48 04 	call	0x890	; 0x890 <RTS_CORE_ClearPrioBitmapBit>
        rts_gb_rdy_lh_tbl[prio].node_num = 0;
     ab0:	1a 82       	std	Y+2, r1	; 0x02
        rts_gb_rdy_lh_tbl[prio].head = tcb->next;
        tcb->prev->next = tcb->next;
        tcb->next->prev = tcb->prev;
        --rts_gb_rdy_lh_tbl[prio].node_num;
    }
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <RTS_CORE_InsertTcbToPendList>:


//++++++将任务TCB插入到挂起链表下
void RTS_CORE_InsertTcbToPendList(TCB_t *tcb)
{
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	dc 01       	movw	r26, r24
    TCB_t *p;
    taskListHead_t *list = &rts_gb_pend_lh; 
    p = list->head;
     abe:	20 91 ea 03 	lds	r18, 0x03EA
     ac2:	30 91 eb 03 	lds	r19, 0x03EB

    tcb->prev = p;        //总是将TCB插入到挂起链表中无效填充链表的下一个位置
     ac6:	1b 96       	adiw	r26, 0x0b	; 11
     ac8:	3c 93       	st	X, r19
     aca:	2e 93       	st	-X, r18
     acc:	1a 97       	sbiw	r26, 0x0a	; 10
    tcb->list_head = list;
     ace:	8a ee       	ldi	r24, 0xEA	; 234
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	17 96       	adiw	r26, 0x07	; 7
     ad4:	9c 93       	st	X, r25
     ad6:	8e 93       	st	-X, r24
     ad8:	16 97       	sbiw	r26, 0x06	; 6
    tcb->next = p->next; 
     ada:	e9 01       	movw	r28, r18
     adc:	88 85       	ldd	r24, Y+8	; 0x08
     ade:	99 85       	ldd	r25, Y+9	; 0x09
     ae0:	19 96       	adiw	r26, 0x09	; 9
     ae2:	9c 93       	st	X, r25
     ae4:	8e 93       	st	-X, r24
     ae6:	18 97       	sbiw	r26, 0x08	; 8
    p->next->prev = tcb;
     ae8:	e8 85       	ldd	r30, Y+8	; 0x08
     aea:	f9 85       	ldd	r31, Y+9	; 0x09
     aec:	b3 87       	std	Z+11, r27	; 0x0b
     aee:	a2 87       	std	Z+10, r26	; 0x0a
    p->next = tcb;
     af0:	b9 87       	std	Y+9, r27	; 0x09
     af2:	a8 87       	std	Y+8, r26	; 0x08

    ++list->node_num;
     af4:	80 91 ec 03 	lds	r24, 0x03EC
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	80 93 ec 03 	sts	0x03EC, r24
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <RTS_CORE_RemoveTcbFromPendList>:

//+++++将任务TCB从挂起链表下移除
void RTS_CORE_RemoveTcbFromPendList(TCB_t *tcb)
{
     b04:	fc 01       	movw	r30, r24
    tcb->prev->next = tcb->next;
     b06:	a2 85       	ldd	r26, Z+10	; 0x0a
     b08:	b3 85       	ldd	r27, Z+11	; 0x0b
     b0a:	80 85       	ldd	r24, Z+8	; 0x08
     b0c:	91 85       	ldd	r25, Z+9	; 0x09
     b0e:	19 96       	adiw	r26, 0x09	; 9
     b10:	9c 93       	st	X, r25
     b12:	8e 93       	st	-X, r24
     b14:	18 97       	sbiw	r26, 0x08	; 8
    tcb->next->prev = tcb->prev;
     b16:	00 84       	ldd	r0, Z+8	; 0x08
     b18:	f1 85       	ldd	r31, Z+9	; 0x09
     b1a:	e0 2d       	mov	r30, r0
     b1c:	b3 87       	std	Z+11, r27	; 0x0b
     b1e:	a2 87       	std	Z+10, r26	; 0x0a
    --rts_gb_pend_lh.node_num;
     b20:	80 91 ec 03 	lds	r24, 0x03EC
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	80 93 ec 03 	sts	0x03EC, r24
}
     b2a:	08 95       	ret

00000b2c <RTS_CORE_GetTcbFromTid>:

#endif

//根据tid获取TCB
void RTS_CORE_GetTcbFromTid(u8_t tid,TCB_t **tcb)
{
     b2c:	fb 01       	movw	r30, r22
    *tcb = rts_gb_tasks_reg_tbl[tid];
     b2e:	a8 2f       	mov	r26, r24
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	aa 0f       	add	r26, r26
     b34:	bb 1f       	adc	r27, r27
     b36:	a4 54       	subi	r26, 0x44	; 68
     b38:	bc 4f       	sbci	r27, 0xFC	; 252
     b3a:	8d 91       	ld	r24, X+
     b3c:	9c 91       	ld	r25, X
     b3e:	91 83       	std	Z+1, r25	; 0x01
     b40:	80 83       	st	Z, r24
}
     b42:	08 95       	ret

00000b44 <RTS_CORE_GetHightPrioTcb>:

void RTS_CORE_GetHightPrioTcb(TCB_t **tcb)
{
     b44:	dc 01       	movw	r26, r24
    *tcb = rts_gb_rdy_lh_tbl[hiprio].head;
     b46:	80 91 b0 03 	lds	r24, 0x03B0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	fc 01       	movw	r30, r24
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	e8 0f       	add	r30, r24
     b54:	f9 1f       	adc	r31, r25
     b56:	eb 52       	subi	r30, 0x2B	; 43
     b58:	fc 4f       	sbci	r31, 0xFC	; 252
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	8d 93       	st	X+, r24
     b60:	9c 93       	st	X, r25
}
     b62:	08 95       	ret

00000b64 <RTS_CORE_SwitchToHiprioTask>:

//切换到最高优先级
__attribute__ ((naked)) 
void RTS_CORE_SwitchToHiprioTask(void)
{
    RTS_PORT_TASK_SW_TOP    //保存当前任务环境
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	00 90 5f 00 	lds	r0, 0x005F
     b6c:	0f 92       	push	r0
     b6e:	00 90 5b 00 	lds	r0, 0x005B
     b72:	0f 92       	push	r0
     b74:	2f 92       	push	r2
     b76:	3f 92       	push	r3
     b78:	4f 92       	push	r4
     b7a:	5f 92       	push	r5
     b7c:	6f 92       	push	r6
     b7e:	7f 92       	push	r7
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	e0 91 01 0c 	lds	r30, 0x0C01
     bb4:	f0 91 02 0c 	lds	r31, 0x0C02
     bb8:	8d b7       	in	r24, 0x3d	; 61
     bba:	9e b7       	in	r25, 0x3e	; 62
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
    rts_gb_curr_task_tcb = rts_gb_rdy_lh_tbl[hiprio].head;
     bc0:	80 91 b0 03 	lds	r24, 0x03B0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	e8 0f       	add	r30, r24
     bce:	f9 1f       	adc	r31, r25
     bd0:	eb 52       	subi	r30, 0x2B	; 43
     bd2:	fc 4f       	sbci	r31, 0xFC	; 252
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	90 93 02 0c 	sts	0x0C02, r25
     bdc:	80 93 01 0c 	sts	0x0C01, r24

    /*< 如果不需要延时功能，则在没有同等优先级情况下关闭时间片轮转调度   */
    #if (RTS_CFG_DELAY_ENB == 0u)
    if(rts_gb_rdy_lh_tbl[hiprio].node_num > 1u)
     be0:	80 91 b0 03 	lds	r24, 0x03B0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	fc 01       	movw	r30, r24
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	e8 0f       	add	r30, r24
     bee:	f9 1f       	adc	r31, r25
     bf0:	eb 52       	subi	r30, 0x2B	; 43
     bf2:	fc 4f       	sbci	r31, 0xFC	; 252
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <RTS_CORE_SwitchToHiprioTask+0x98>
     bfa:	34 c0       	rjmp	.+104    	; 0xc64 <RTS_CORE_SwitchToHiprioTask+0x100>
        RTS_SYSTICK_ENABLE
     bfc:	80 91 6f 00 	lds	r24, 0x006F
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	80 93 6f 00 	sts	0x006F, r24
    else
        RTS_SYSTICK_DISABLE

    #endif
    RTS_PORT_TASK_SW_BOTTOM //切换到最高优先级任务
     c06:	e0 91 01 0c 	lds	r30, 0x0C01
     c0a:	f0 91 02 0c 	lds	r31, 0x0C02
     c0e:	80 81       	ld	r24, Z
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	9e bf       	out	0x3e, r25	; 62
     c14:	8d bf       	out	0x3d, r24	; 61
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	9f 90       	pop	r9
     c44:	8f 90       	pop	r8
     c46:	7f 90       	pop	r7
     c48:	6f 90       	pop	r6
     c4a:	5f 90       	pop	r5
     c4c:	4f 90       	pop	r4
     c4e:	3f 90       	pop	r3
     c50:	2f 90       	pop	r2
     c52:	0f 90       	pop	r0
     c54:	00 92 5b 00 	sts	0x005B, r0
     c58:	0f 90       	pop	r0
     c5a:	00 92 5f 00 	sts	0x005F, r0
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	08 95       	ret
    /*< 如果不需要延时功能，则在没有同等优先级情况下关闭时间片轮转调度   */
    #if (RTS_CFG_DELAY_ENB == 0u)
    if(rts_gb_rdy_lh_tbl[hiprio].node_num > 1u)
        RTS_SYSTICK_ENABLE
    else
        RTS_SYSTICK_DISABLE
     c64:	80 91 6f 00 	lds	r24, 0x006F
     c68:	8e 7f       	andi	r24, 0xFE	; 254
     c6a:	80 93 6f 00 	sts	0x006F, r24
     c6e:	cb cf       	rjmp	.-106    	; 0xc06 <RTS_CORE_SwitchToHiprioTask+0xa2>

00000c70 <RTS_CORE_GetHiprioTcbNum>:


//获取最高优先级TCB个数
u8_t RTS_CORE_GetHiprioTcbNum(void)
{
    return rts_gb_rdy_lh_tbl[hiprio].node_num;
     c70:	80 91 b0 03 	lds	r24, 0x03B0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	fc 01       	movw	r30, r24
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e8 0f       	add	r30, r24
     c7e:	f9 1f       	adc	r31, r25
     c80:	eb 52       	subi	r30, 0x2B	; 43
     c82:	fc 4f       	sbci	r31, 0xFC	; 252
}
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	08 95       	ret

00000c88 <RTS_CORE_SwitchToNextTask>:

//在优先级不改变情况下切换到下一个要运行的任务
__attribute__ ((naked)) 
void RTS_CORE_SwitchToNextTask(void)
{
    RTS_PORT_TASK_SW_TOP
     c88:	1f 92       	push	r1
     c8a:	0f 92       	push	r0
     c8c:	00 90 5f 00 	lds	r0, 0x005F
     c90:	0f 92       	push	r0
     c92:	00 90 5b 00 	lds	r0, 0x005B
     c96:	0f 92       	push	r0
     c98:	2f 92       	push	r2
     c9a:	3f 92       	push	r3
     c9c:	4f 92       	push	r4
     c9e:	5f 92       	push	r5
     ca0:	6f 92       	push	r6
     ca2:	7f 92       	push	r7
     ca4:	8f 92       	push	r8
     ca6:	9f 92       	push	r9
     ca8:	af 92       	push	r10
     caa:	bf 92       	push	r11
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	2f 93       	push	r18
     cba:	3f 93       	push	r19
     cbc:	4f 93       	push	r20
     cbe:	5f 93       	push	r21
     cc0:	6f 93       	push	r22
     cc2:	7f 93       	push	r23
     cc4:	8f 93       	push	r24
     cc6:	9f 93       	push	r25
     cc8:	af 93       	push	r26
     cca:	bf 93       	push	r27
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	e0 91 01 0c 	lds	r30, 0x0C01
     cd8:	f0 91 02 0c 	lds	r31, 0x0C02
     cdc:	8d b7       	in	r24, 0x3d	; 61
     cde:	9e b7       	in	r25, 0x3e	; 62
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	80 83       	st	Z, r24
    rts_gb_curr_task_tcb = rts_gb_curr_task_tcb->next;
     ce4:	e0 91 01 0c 	lds	r30, 0x0C01
     ce8:	f0 91 02 0c 	lds	r31, 0x0C02
     cec:	80 85       	ldd	r24, Z+8	; 0x08
     cee:	91 85       	ldd	r25, Z+9	; 0x09
     cf0:	90 93 02 0c 	sts	0x0C02, r25
     cf4:	80 93 01 0c 	sts	0x0C01, r24
    RTS_PORT_TASK_SW_BOTTOM
     cf8:	e0 91 01 0c 	lds	r30, 0x0C01
     cfc:	f0 91 02 0c 	lds	r31, 0x0C02
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	9e bf       	out	0x3e, r25	; 62
     d06:	8d bf       	out	0x3d, r24	; 61
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	bf 91       	pop	r27
     d12:	af 91       	pop	r26
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	7f 91       	pop	r23
     d1a:	6f 91       	pop	r22
     d1c:	5f 91       	pop	r21
     d1e:	4f 91       	pop	r20
     d20:	3f 91       	pop	r19
     d22:	2f 91       	pop	r18
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	bf 90       	pop	r11
     d32:	af 90       	pop	r10
     d34:	9f 90       	pop	r9
     d36:	8f 90       	pop	r8
     d38:	7f 90       	pop	r7
     d3a:	6f 90       	pop	r6
     d3c:	5f 90       	pop	r5
     d3e:	4f 90       	pop	r4
     d40:	3f 90       	pop	r3
     d42:	2f 90       	pop	r2
     d44:	0f 90       	pop	r0
     d46:	00 92 5b 00 	sts	0x005B, r0
     d4a:	0f 90       	pop	r0
     d4c:	00 92 5f 00 	sts	0x005F, r0
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	08 95       	ret

00000d56 <RTS_CORE_OsSchdule>:


//进行最高优先级调度
void RTS_CORE_OsSchdule(void)
{
    RTS_CORE_UpdateTaskHightPrio();
     d56:	0e 94 1e 04 	call	0x83c	; 0x83c <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_SwitchToHiprioTask();
     d5a:	0e 94 b2 05 	call	0xb64	; 0xb64 <RTS_CORE_SwitchToHiprioTask>
    
}
     d5e:	08 95       	ret

00000d60 <IdleTask>:


/*----------------------------------------- 任务初始化 ---------------------------------------------------*/
//定义空闲任务
static void IdleTask(void *data)
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
    data = data;
    while(1)
    {
        #if(RTS_CFG_IDLE_HOOK_ENB > 0u)
        if(rts_gb_idle_task_pf != NULL)  //空闲任务的钩子函数指针
     d66:	80 91 79 04 	lds	r24, 0x0479
     d6a:	90 91 7a 04 	lds	r25, 0x047A
     d6e:	89 2b       	or	r24, r25
     d70:	d1 f3       	breq	.-12     	; 0xd66 <IdleTask+0x6>
           rts_gb_idle_task_pf(data);
     d72:	e0 91 79 04 	lds	r30, 0x0479
     d76:	f0 91 7a 04 	lds	r31, 0x047A
     d7a:	ce 01       	movw	r24, r28
     d7c:	19 95       	eicall
     d7e:	f3 cf       	rjmp	.-26     	; 0xd66 <IdleTask+0x6>

00000d80 <RTS_GetCurrTaskTid>:


//获取当前运行任务的tid
u8_t RTS_GetCurrTaskTid(void)
{
    return rts_gb_curr_task_tcb->tid;
     d80:	e0 91 01 0c 	lds	r30, 0x0C01
     d84:	f0 91 02 0c 	lds	r31, 0x0C02
     d88:	85 81       	ldd	r24, Z+5	; 0x05
}
     d8a:	08 95       	ret

00000d8c <RTS_GetCurrTaskPrio>:

//获取当前运行任务的优先级
u8_t RTS_GetCurrTaskPrio(void)
{
    return rts_gb_curr_task_tcb->prio;
     d8c:	e0 91 01 0c 	lds	r30, 0x0C01
     d90:	f0 91 02 0c 	lds	r31, 0x0C02
     d94:	82 81       	ldd	r24, Z+2	; 0x02
}
     d96:	08 95       	ret

00000d98 <RTS_GetCpuUtilizationRate>:
}


/*< 获取CPU利用率   */
float32_t RTS_GetCpuUtilizationRate(void)
{
     d98:	af 92       	push	r10
     d9a:	bf 92       	push	r11
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
    return rts_gb_cpu_utilization_rate = 1.000001 - (float32_t)rts_gb_task_idle_coun/(float32_t)rts_gb_task_coun;
     da8:	60 91 b2 03 	lds	r22, 0x03B2
     dac:	70 91 b3 03 	lds	r23, 0x03B3
     db0:	e0 90 b4 03 	lds	r14, 0x03B4
     db4:	f0 90 b5 03 	lds	r15, 0x03B5
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__floatunsisf>
     dc0:	5b 01       	movw	r10, r22
     dc2:	6c 01       	movw	r12, r24
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	c8 01       	movw	r24, r16
     dca:	b7 01       	movw	r22, r14
     dcc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__floatunsisf>
     dd0:	9b 01       	movw	r18, r22
     dd2:	ac 01       	movw	r20, r24
     dd4:	c6 01       	movw	r24, r12
     dd6:	b5 01       	movw	r22, r10
     dd8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__divsf3>
     ddc:	9b 01       	movw	r18, r22
     dde:	ac 01       	movw	r20, r24
     de0:	68 e0       	ldi	r22, 0x08	; 8
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	9f e3       	ldi	r25, 0x3F	; 63
     de8:	0e 94 3d 0c 	call	0x187a	; 0x187a <__subsf3>
     dec:	60 93 b6 03 	sts	0x03B6, r22
     df0:	70 93 b7 03 	sts	0x03B7, r23
     df4:	80 93 b8 03 	sts	0x03B8, r24
     df8:	90 93 b9 03 	sts	0x03B9, r25
     dfc:	80 91 b6 03 	lds	r24, 0x03B6
     e00:	90 91 b7 03 	lds	r25, 0x03B7
     e04:	a0 91 b8 03 	lds	r26, 0x03B8
     e08:	b0 91 b9 03 	lds	r27, 0x03B9
}
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	08 95       	ret

00000e22 <RTS_TurnOffSchdule>:


/*< 关闭任务调度器   */
void RTS_TurnOffSchdule(void)
{
    RTS_ENTER_CRITICAL
     e22:	00 90 5f 00 	lds	r0, 0x005F
     e26:	0f 92       	push	r0
     e28:	8f b7       	in	r24, 0x3f	; 63
     e2a:	8f 77       	andi	r24, 0x7F	; 127
     e2c:	8f bf       	out	0x3f, r24	; 63
    rts_gb_task_switch_on = 0;
     e2e:	10 92 b1 03 	sts	0x03B1, r1
    RTS_EXIT_CRITICAL
     e32:	0f 90       	pop	r0
     e34:	00 92 5f 00 	sts	0x005F, r0
}
     e38:	08 95       	ret

00000e3a <RTS_TurnOnSchdule>:

/*< 开启任务调度器   */
void RTS_TurnOnSchdule(void)
{
    RTS_ENTER_CRITICAL
     e3a:	00 90 5f 00 	lds	r0, 0x005F
     e3e:	0f 92       	push	r0
     e40:	8f b7       	in	r24, 0x3f	; 63
     e42:	8f 77       	andi	r24, 0x7F	; 127
     e44:	8f bf       	out	0x3f, r24	; 63
    rts_gb_task_switch_on = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 b1 03 	sts	0x03B1, r24
    RTS_EXIT_CRITICAL
     e4c:	0f 90       	pop	r0
     e4e:	00 92 5f 00 	sts	0x005F, r0
}
     e52:	08 95       	ret

00000e54 <__vector_20>:



/*< RTS系统滴答定时器的中断服务函数 */
RTS_SYSTICK_HANDLER
{
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	0b b6       	in	r0, 0x3b	; 59
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
   #if(RTS_CFG_DELAY_ENB > 0u)
   TCB_t *dly_tcb;
   TCB_t *dly_tcb_next;
   #endif
   ++rts_gb_systicks;
     e7a:	80 91 fd 0b 	lds	r24, 0x0BFD
     e7e:	90 91 fe 0b 	lds	r25, 0x0BFE
     e82:	a0 91 ff 0b 	lds	r26, 0x0BFF
     e86:	b0 91 00 0c 	lds	r27, 0x0C00
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	a1 1d       	adc	r26, r1
     e8e:	b1 1d       	adc	r27, r1
     e90:	80 93 fd 0b 	sts	0x0BFD, r24
     e94:	90 93 fe 0b 	sts	0x0BFE, r25
     e98:	a0 93 ff 0b 	sts	0x0BFF, r26
     e9c:	b0 93 00 0c 	sts	0x0C00, r27

   RTS_SYSTICK_HANDLER_ENTER_DO
   if(rts_gb_task_switch_on == 1)
     ea0:	80 91 b1 03 	lds	r24, 0x03B1
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <__vector_20+0x56>
     ea8:	41 c0       	rjmp	.+130    	; 0xf2c <__vector_20+0xd8>
        RTS_CORE_SwitchToNextTask();

    }

    //统计CPU利用率
    if(rts_gb_curr_task_tcb->prio == RTS_CFG_MAX_MAX_PRIORITIES)
     eaa:	e0 91 01 0c 	lds	r30, 0x0C01
     eae:	f0 91 02 0c 	lds	r31, 0x0C02
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	86 30       	cpi	r24, 0x06	; 6
     eb6:	81 f1       	breq	.+96     	; 0xf18 <__vector_20+0xc4>
    {  
       rts_gb_task_idle_coun ++;
    }
    rts_gb_task_coun ++;
     eb8:	80 91 b4 03 	lds	r24, 0x03B4
     ebc:	90 91 b5 03 	lds	r25, 0x03B5
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	90 93 b5 03 	sts	0x03B5, r25
     ec6:	80 93 b4 03 	sts	0x03B4, r24
    if(rts_gb_task_coun >= RTS_CFG_GET_CPU_RATE_COUNT)
     eca:	80 91 b4 03 	lds	r24, 0x03B4
     ece:	90 91 b5 03 	lds	r25, 0x03B5
     ed2:	88 3c       	cpi	r24, 0xC8	; 200
     ed4:	91 05       	cpc	r25, r1
     ed6:	50 f0       	brcs	.+20     	; 0xeec <__vector_20+0x98>
    {
        rts_gb_task_coun = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	90 93 b5 03 	sts	0x03B5, r25
     ee0:	80 93 b4 03 	sts	0x03B4, r24
        rts_gb_task_idle_coun = 1;
     ee4:	90 93 b3 03 	sts	0x03B3, r25
     ee8:	80 93 b2 03 	sts	0x03B2, r24
    }

    RTS_SYSTICK_HANDLER_EXIT_DO
     eec:	85 b1       	in	r24, 0x05	; 5
     eee:	80 95       	com	r24
     ef0:	85 b9       	out	0x05, r24	; 5
    RTS_SYSTICK_CLEAR_INT_FLAG
}
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	bf 91       	pop	r27
     ef8:	af 91       	pop	r26
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	7f 91       	pop	r23
     f00:	6f 91       	pop	r22
     f02:	5f 91       	pop	r21
     f04:	4f 91       	pop	r20
     f06:	3f 91       	pop	r19
     f08:	2f 91       	pop	r18
     f0a:	0f 90       	pop	r0
     f0c:	0b be       	out	0x3b, r0	; 59
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti
    }

    //统计CPU利用率
    if(rts_gb_curr_task_tcb->prio == RTS_CFG_MAX_MAX_PRIORITIES)
    {  
       rts_gb_task_idle_coun ++;
     f18:	80 91 b2 03 	lds	r24, 0x03B2
     f1c:	90 91 b3 03 	lds	r25, 0x03B3
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	90 93 b3 03 	sts	0x03B3, r25
     f26:	80 93 b2 03 	sts	0x03B2, r24
     f2a:	c6 cf       	rjmp	.-116    	; 0xeb8 <__vector_20+0x64>
            RTS_CORE_UpdateTaskHightPrio();
            RTS_CORE_SwitchToHiprioTask();
        }
        #endif
        
        RTS_CORE_SwitchToNextTask();
     f2c:	0e 94 44 06 	call	0xc88	; 0xc88 <RTS_CORE_SwitchToNextTask>
     f30:	bc cf       	rjmp	.-136    	; 0xeaa <__vector_20+0x56>

00000f32 <RTS_ChangeTaskPrio>:
    return rts_gb_curr_task_tcb->prio;
}

//改变任务优先级
void RTS_ChangeTaskPrio(u8_t tid, u8_t dst_prio)
{
     f32:	1f 93       	push	r17
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	0f 92       	push	r0
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	16 2f       	mov	r17, r22
    TCB_t *tcb;
    RTS_ENTER_CRITICAL
     f42:	00 90 5f 00 	lds	r0, 0x005F
     f46:	0f 92       	push	r0
     f48:	9f b7       	in	r25, 0x3f	; 63
     f4a:	9f 77       	andi	r25, 0x7F	; 127
     f4c:	9f bf       	out	0x3f, r25	; 63
    RTS_CORE_GetTcbFromTid(tid,&tcb);
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	0e 94 96 05 	call	0xb2c	; 0xb2c <RTS_CORE_GetTcbFromTid>
    if(tcb->prio != dst_prio)
     f58:	e9 81       	ldd	r30, Y+1	; 0x01
     f5a:	fa 81       	ldd	r31, Y+2	; 0x02
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	81 17       	cp	r24, r17
     f60:	31 f0       	breq	.+12     	; 0xf6e <RTS_ChangeTaskPrio+0x3c>
    {
        if(tcb->curr_status != RTS_TASK_STATUS_SYNC)
     f62:	83 81       	ldd	r24, Z+3	; 0x03
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	19 f0       	breq	.+6      	; 0xf6e <RTS_ChangeTaskPrio+0x3c>
        {
            //如果当前的TCB是处于就绪状态，则需要将优先级更改后的TCB插入到新的位置
            if(tcb->curr_status == RTS_TASK_STATUS_READY)
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	51 f0       	breq	.+20     	; 0xf80 <RTS_ChangeTaskPrio+0x4e>
                RTS_CORE_UpdateTaskHightPrio();
                RTS_CORE_SwitchToHiprioTask();
            }
            else
            {
                tcb->prio = dst_prio;
     f6c:	12 83       	std	Z+2, r17	; 0x02
            }
        }
    }
    RTS_EXIT_CRITICAL
     f6e:	0f 90       	pop	r0
     f70:	00 92 5f 00 	sts	0x005F, r0
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	1f 91       	pop	r17
     f7e:	08 95       	ret
        if(tcb->curr_status != RTS_TASK_STATUS_SYNC)
        {
            //如果当前的TCB是处于就绪状态，则需要将优先级更改后的TCB插入到新的位置
            if(tcb->curr_status == RTS_TASK_STATUS_READY)
            {
                RTS_CORE_RemoveTcbFromRdyList(tcb);
     f80:	cf 01       	movw	r24, r30
     f82:	0e 94 2a 05 	call	0xa54	; 0xa54 <RTS_CORE_RemoveTcbFromRdyList>
                tcb->prio = dst_prio;
     f86:	e9 81       	ldd	r30, Y+1	; 0x01
     f88:	fa 81       	ldd	r31, Y+2	; 0x02
     f8a:	12 83       	std	Z+2, r17	; 0x02
                RTS_CORE_InsertTcbToRdyList(tcb);
     f8c:	cf 01       	movw	r24, r30
     f8e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <RTS_CORE_InsertTcbToRdyList>
                RTS_CORE_UpdateTaskHightPrio();
     f92:	0e 94 1e 04 	call	0x83c	; 0x83c <RTS_CORE_UpdateTaskHightPrio>
                RTS_CORE_SwitchToHiprioTask();
     f96:	0e 94 b2 05 	call	0xb64	; 0xb64 <RTS_CORE_SwitchToHiprioTask>
     f9a:	e9 cf       	rjmp	.-46     	; 0xf6e <RTS_ChangeTaskPrio+0x3c>

00000f9c <RTS_ResumeTask>:
}


//根据tid恢复任务
void RTS_ResumeTask(u8_t tid)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	0f 92       	push	r0
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
    TCB_t * tcb;
    RTS_ENTER_CRITICAL
     fa8:	00 90 5f 00 	lds	r0, 0x005F
     fac:	0f 92       	push	r0
     fae:	9f b7       	in	r25, 0x3f	; 63
     fb0:	9f 77       	andi	r25, 0x7F	; 127
     fb2:	9f bf       	out	0x3f, r25	; 63
    RTS_CORE_GetTcbFromTid(tid,&tcb);
     fb4:	be 01       	movw	r22, r28
     fb6:	6f 5f       	subi	r22, 0xFF	; 255
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	0e 94 96 05 	call	0xb2c	; 0xb2c <RTS_CORE_GetTcbFromTid>
    if(tcb->curr_status == RTS_TASK_STATUS_PEND)
     fbe:	e9 81       	ldd	r30, Y+1	; 0x01
     fc0:	fa 81       	ldd	r31, Y+2	; 0x02
     fc2:	93 81       	ldd	r25, Z+3	; 0x03
     fc4:	94 30       	cpi	r25, 0x04	; 4
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <RTS_ResumeTask+0x3c>
        RTS_CORE_RemoveTcbFromPendList(tcb);
        RTS_CORE_InsertTcbToRdyList(tcb);
        RTS_CORE_OsSchdule();
        
    }
    RTS_EXIT_CRITICAL
     fc8:	0f 90       	pop	r0
     fca:	00 92 5f 00 	sts	0x005F, r0
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret
    RTS_ENTER_CRITICAL
    RTS_CORE_GetTcbFromTid(tid,&tcb);
    if(tcb->curr_status == RTS_TASK_STATUS_PEND)
    {
        //从挂起态恢复到就绪态，这里不做超时处理，只是简单地处理为忽略中间挂起时间而直接进入就绪态
        tcb->curr_status = RTS_TASK_STATUS_READY;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	83 83       	std	Z+3, r24	; 0x03
        tcb->prev_status = RTS_TASK_STATUS_PEND;
     fdc:	94 83       	std	Z+4, r25	; 0x04
        RTS_CORE_RemoveTcbFromPendList(tcb);
     fde:	cf 01       	movw	r24, r30
     fe0:	0e 94 82 05 	call	0xb04	; 0xb04 <RTS_CORE_RemoveTcbFromPendList>
        RTS_CORE_InsertTcbToRdyList(tcb);
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <RTS_CORE_InsertTcbToRdyList>
        RTS_CORE_OsSchdule();
     fec:	0e 94 ab 06 	call	0xd56	; 0xd56 <RTS_CORE_OsSchdule>
     ff0:	eb cf       	rjmp	.-42     	; 0xfc8 <RTS_ResumeTask+0x2c>

00000ff2 <RTS_PendTask>:
}


//根据tid挂起任务
void RTS_PendTask(u8_t tid)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	0f 92       	push	r0
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
    TCB_t * tcb;
    RTS_ENTER_CRITICAL
     ffe:	00 90 5f 00 	lds	r0, 0x005F
    1002:	0f 92       	push	r0
    1004:	9f b7       	in	r25, 0x3f	; 63
    1006:	9f 77       	andi	r25, 0x7F	; 127
    1008:	9f bf       	out	0x3f, r25	; 63
    RTS_CORE_GetTcbFromTid(tid,&tcb);
    100a:	be 01       	movw	r22, r28
    100c:	6f 5f       	subi	r22, 0xFF	; 255
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	0e 94 96 05 	call	0xb2c	; 0xb2c <RTS_CORE_GetTcbFromTid>
    if(tcb->curr_status != RTS_TASK_STATUS_SYNC)
    1014:	e9 81       	ldd	r30, Y+1	; 0x01
    1016:	fa 81       	ldd	r31, Y+2	; 0x02
    1018:	23 81       	ldd	r18, Z+3	; 0x03
    101a:	28 30       	cpi	r18, 0x08	; 8
    101c:	49 f0       	breq	.+18     	; 0x1030 <RTS_PendTask+0x3e>
    {
        //如果挂起的是自己,则获取最高优先级任务运行
        if(tcb == rts_gb_curr_task_tcb)
    101e:	80 91 01 0c 	lds	r24, 0x0C01
    1022:	90 91 02 0c 	lds	r25, 0x0C02
    1026:	e8 17       	cp	r30, r24
    1028:	f9 07       	cpc	r31, r25
    102a:	b9 f0       	breq	.+46     	; 0x105a <RTS_PendTask+0x68>
                RTS_CORE_SwitchToHiprioTask();
            }
        }
        else
        {
            if(tcb->curr_status == RTS_TASK_STATUS_READY) //从就绪态挂起
    102c:	21 30       	cpi	r18, 0x01	; 1
    102e:	41 f0       	breq	.+16     	; 0x1040 <RTS_PendTask+0x4e>
                RTS_CORE_OsSchdule();
            }
            #endif
        }
    }
    RTS_EXIT_CRITICAL
    1030:	0f 90       	pop	r0
    1032:	00 92 5f 00 	sts	0x005F, r0
}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret
        }
        else
        {
            if(tcb->curr_status == RTS_TASK_STATUS_READY) //从就绪态挂起
            {
                tcb->curr_status = RTS_TASK_STATUS_PEND;
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	83 83       	std	Z+3, r24	; 0x03
                tcb->prev_status = RTS_TASK_STATUS_READY;
    1044:	24 83       	std	Z+4, r18	; 0x04
                RTS_CORE_RemoveTcbFromRdyList(tcb);      
    1046:	cf 01       	movw	r24, r30
    1048:	0e 94 2a 05 	call	0xa54	; 0xa54 <RTS_CORE_RemoveTcbFromRdyList>
                RTS_CORE_InsertTcbToPendList(tcb);
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	9a 81       	ldd	r25, Y+2	; 0x02
    1050:	0e 94 5c 05 	call	0xab8	; 0xab8 <RTS_CORE_InsertTcbToPendList>
                RTS_CORE_OsSchdule();
    1054:	0e 94 ab 06 	call	0xd56	; 0xd56 <RTS_CORE_OsSchdule>
    1058:	eb cf       	rjmp	.-42     	; 0x1030 <RTS_PendTask+0x3e>
    if(tcb->curr_status != RTS_TASK_STATUS_SYNC)
    {
        //如果挂起的是自己,则获取最高优先级任务运行
        if(tcb == rts_gb_curr_task_tcb)
        {
            if(tcb->curr_status == RTS_TASK_STATUS_READY)
    105a:	21 30       	cpi	r18, 0x01	; 1
    105c:	49 f7       	brne	.-46     	; 0x1030 <RTS_PendTask+0x3e>
            {
                tcb->curr_status = RTS_TASK_STATUS_PEND;
    105e:	84 e0       	ldi	r24, 0x04	; 4
    1060:	83 83       	std	Z+3, r24	; 0x03
                tcb->prev_status = RTS_TASK_STATUS_READY;
    1062:	24 83       	std	Z+4, r18	; 0x04
                RTS_CORE_RemoveTcbFromRdyList(tcb);
    1064:	cf 01       	movw	r24, r30
    1066:	0e 94 2a 05 	call	0xa54	; 0xa54 <RTS_CORE_RemoveTcbFromRdyList>
                RTS_CORE_InsertTcbToPendList(tcb);
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	0e 94 5c 05 	call	0xab8	; 0xab8 <RTS_CORE_InsertTcbToPendList>
                RTS_CORE_UpdateTaskHightPrio();
    1072:	0e 94 1e 04 	call	0x83c	; 0x83c <RTS_CORE_UpdateTaskHightPrio>
                RTS_CORE_SwitchToHiprioTask();
    1076:	0e 94 b2 05 	call	0xb64	; 0xb64 <RTS_CORE_SwitchToHiprioTask>
    107a:	da cf       	rjmp	.-76     	; 0x1030 <RTS_PendTask+0x3e>

0000107c <RTS_CreateTask>:
//******创建任务,成功返回tid，失败返回0
u8_t RTS_CreateTask(void (*task)(void *),
                    taskStack_t *stack,
                    u16_t       stack_size,
                    u8_t        prio)
{
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	02 2f       	mov	r16, r18
    TCB_t *task_tcb = NULL;
    u8_t tid = 0;
    //提前初始化堆栈,尽可能减少临界区访问时间
    stack = RTS_PORT_TaskStackInit(task,stack,stack_size);
    108a:	0e 94 c0 03 	call	0x780	; 0x780 <RTS_PORT_TaskStackInit>
    108e:	7c 01       	movw	r14, r24
    RTS_ENTER_CRITICAL
    1090:	00 90 5f 00 	lds	r0, 0x005F
    1094:	0f 92       	push	r0
    1096:	8f b7       	in	r24, 0x3f	; 63
    1098:	8f 77       	andi	r24, 0x7F	; 127
    109a:	8f bf       	out	0x3f, r24	; 63
    //一旦分配成功并创建成功，则由任务注册表来接管该TCB
    task_tcb = (TCB_t *)MemAlloc(sizeof(TCB_t)); 
    109c:	8c e0       	ldi	r24, 0x0C	; 12
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 8f 02 	call	0x51e	; 0x51e <MemAlloc>
    10a4:	ec 01       	movw	r28, r24
    if(task_tcb)
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	c9 f0       	breq	.+50     	; 0x10dc <RTS_CreateTask+0x60>
    {   
        tid = RTS_CORE_RegisterTask(task_tcb);
    10aa:	0e 94 cb 04 	call	0x996	; 0x996 <RTS_CORE_RegisterTask>
    10ae:	18 2f       	mov	r17, r24
        if(tid >= 0)
        { 
            task_tcb->tid  = tid;
    10b0:	8d 83       	std	Y+5, r24	; 0x05
            task_tcb->prio = prio;
    10b2:	0a 83       	std	Y+2, r16	; 0x02
            task_tcb->curr_status = RTS_TASK_STATUS_READY;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	8b 83       	std	Y+3, r24	; 0x03
            task_tcb->prev_status = RTS_TASK_STATUS_REMOVED;
    10b8:	86 e0       	ldi	r24, 0x06	; 6
    10ba:	8c 83       	std	Y+4, r24	; 0x04
            task_tcb->sp = stack;
    10bc:	f9 82       	std	Y+1, r15	; 0x01
    10be:	e8 82       	st	Y, r14
            //将任务TCB挂载到任务就绪链表中，同时更新优先级位图
            RTS_CORE_InsertTcbToRdyList(task_tcb);
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <RTS_CORE_InsertTcbToRdyList>
        else
        {
            MemFree(task_tcb);
        }
    }
    RTS_EXIT_CRITICAL
    10c6:	0f 90       	pop	r0
    10c8:	00 92 5f 00 	sts	0x005F, r0
    return tid;
}
    10cc:	81 2f       	mov	r24, r17
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	ef 90       	pop	r14
    10da:	08 95       	ret
    //提前初始化堆栈,尽可能减少临界区访问时间
    stack = RTS_PORT_TaskStackInit(task,stack,stack_size);
    RTS_ENTER_CRITICAL
    //一旦分配成功并创建成功，则由任务注册表来接管该TCB
    task_tcb = (TCB_t *)MemAlloc(sizeof(TCB_t)); 
    if(task_tcb)
    10dc:	10 e0       	ldi	r17, 0x00	; 0
    10de:	f3 cf       	rjmp	.-26     	; 0x10c6 <RTS_CreateTask+0x4a>

000010e0 <RTS_TASK_IdleTaskInit>:
    }
}

//空闲任务初始化
u8_t RTS_TASK_IdleTaskInit(void (*hook)(void *))
{
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	8c 01       	movw	r16, r24
    static u8_t idle_stack[128];
    u8_t tid;
    tid = RTS_CreateTask(IdleTask,idle_stack,128,RTS_CFG_MAX_MAX_PRIORITIES);
    10e6:	80 eb       	ldi	r24, 0xB0	; 176
    10e8:	96 e0       	ldi	r25, 0x06	; 6
    10ea:	69 ef       	ldi	r22, 0xF9	; 249
    10ec:	73 e0       	ldi	r23, 0x03	; 3
    10ee:	40 e8       	ldi	r20, 0x80	; 128
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	26 e0       	ldi	r18, 0x06	; 6
    10f4:	0e 94 3e 08 	call	0x107c	; 0x107c <RTS_CreateTask>
    #if(RTS_CFG_IDLE_HOOK_ENB > 0u)
    rts_gb_idle_task_pf = hook;
    10f8:	10 93 7a 04 	sts	0x047A, r17
    10fc:	00 93 79 04 	sts	0x0479, r16
    #endif
    return tid;
}
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	08 95       	ret

00001106 <RTS_InitSemaphore>:
  RTS_EXIT_CRITICAL
}

/*< 初始化信号量   */
void RTS_InitSemaphore(semaphore_t* semaph, s16_t initVal)
{
    1106:	fc 01       	movw	r30, r24
  RTS_ENTER_CRITICAL
    1108:	00 90 5f 00 	lds	r0, 0x005F
    110c:	0f 92       	push	r0
    110e:	8f b7       	in	r24, 0x3f	; 63
    1110:	8f 77       	andi	r24, 0x7F	; 127
    1112:	8f bf       	out	0x3f, r24	; 63
  semaph->value = initVal;
    1114:	77 87       	std	Z+15, r23	; 0x0f
    1116:	66 87       	std	Z+14, r22	; 0x0e
  semaph->tcb.next  = &semaph->tcb;
    1118:	e0 87       	std	Z+8, r30	; 0x08
    111a:	f1 87       	std	Z+9, r31	; 0x09
  semaph->tcb.prev  = &semaph->tcb;
    111c:	e2 87       	std	Z+10, r30	; 0x0a
    111e:	f3 87       	std	Z+11, r31	; 0x0b
  semaph->tcb_num   = 0u;
    1120:	15 86       	std	Z+13, r1	; 0x0d
    1122:	14 86       	std	Z+12, r1	; 0x0c
  RTS_EXIT_CRITICAL
    1124:	0f 90       	pop	r0
    1126:	00 92 5f 00 	sts	0x005F, r0
}
    112a:	08 95       	ret

0000112c <RTS_PostSemaphore>:
}


/*< 释放信号量   */
void RTS_PostSemaphore(semaphore_t* semaph)
{
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	dc 01       	movw	r26, r24
  TCB_t *tcb=NULL;
  RTS_ENTER_CRITICAL
    1132:	00 90 5f 00 	lds	r0, 0x005F
    1136:	0f 92       	push	r0
    1138:	8f b7       	in	r24, 0x3f	; 63
    113a:	8f 77       	andi	r24, 0x7F	; 127
    113c:	8f bf       	out	0x3f, r24	; 63
  rts_gb_curr_task_tcb->curr_status = RTS_TASK_STATUS_READY;
    113e:	e0 91 01 0c 	lds	r30, 0x0C01
    1142:	f0 91 02 0c 	lds	r31, 0x0C02
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	83 83       	std	Z+3, r24	; 0x03
  rts_gb_curr_task_tcb->prev_status = RTS_TASK_STATUS_SYNC;
    114a:	e0 91 01 0c 	lds	r30, 0x0C01
    114e:	f0 91 02 0c 	lds	r31, 0x0C02
    1152:	88 e0       	ldi	r24, 0x08	; 8
    1154:	84 83       	std	Z+4, r24	; 0x04
  ++semaph->value;
    1156:	1e 96       	adiw	r26, 0x0e	; 14
    1158:	8d 91       	ld	r24, X+
    115a:	9c 91       	ld	r25, X
    115c:	1f 97       	sbiw	r26, 0x0f	; 15
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	1f 96       	adiw	r26, 0x0f	; 15
    1162:	9c 93       	st	X, r25
    1164:	8e 93       	st	-X, r24
    1166:	1e 97       	sbiw	r26, 0x0e	; 14
  if(semaph->value <= 0)
    1168:	18 16       	cp	r1, r24
    116a:	19 06       	cpc	r1, r25
    116c:	34 f4       	brge	.+12     	; 0x117a <RTS_PostSemaphore+0x4e>
    RemoveTcbFromSmeaphoreList(&tcb,semaph);
    RTS_CORE_InsertTcbToRdyList(tcb);
    RTS_CORE_UpdateTaskHightPrio();
    RTS_CORE_SwitchToHiprioTask();
  }
  RTS_EXIT_CRITICAL
    116e:	0f 90       	pop	r0
    1170:	00 92 5f 00 	sts	0x005F, r0
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret
}

/*< 将TCB从信号量链表头部删除   */
static void RemoveTcbFromSmeaphoreList(TCB_t **tcb,semaphore_t* semaph)
{
   if(semaph->tcb_num > 0u)
    117a:	1c 96       	adiw	r26, 0x0c	; 12
    117c:	8d 91       	ld	r24, X+
    117e:	9c 91       	ld	r25, X
    1180:	1d 97       	sbiw	r26, 0x0d	; 13
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	79 f4       	brne	.+30     	; 0x11a4 <RTS_PostSemaphore+0x78>
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	d0 e0       	ldi	r29, 0x00	; 0
  rts_gb_curr_task_tcb->prev_status = RTS_TASK_STATUS_SYNC;
  ++semaph->value;
  if(semaph->value <= 0)
  {
    RemoveTcbFromSmeaphoreList(&tcb,semaph);
    RTS_CORE_InsertTcbToRdyList(tcb);
    118a:	ce 01       	movw	r24, r28
    118c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <RTS_CORE_InsertTcbToRdyList>
    RTS_CORE_UpdateTaskHightPrio();
    1190:	0e 94 1e 04 	call	0x83c	; 0x83c <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_SwitchToHiprioTask();
    1194:	0e 94 b2 05 	call	0xb64	; 0xb64 <RTS_CORE_SwitchToHiprioTask>
  }
  RTS_EXIT_CRITICAL
    1198:	0f 90       	pop	r0
    119a:	00 92 5f 00 	sts	0x005F, r0
}
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret
/*< 将TCB从信号量链表头部删除   */
static void RemoveTcbFromSmeaphoreList(TCB_t **tcb,semaphore_t* semaph)
{
   if(semaph->tcb_num > 0u)
   {
     (*tcb) = semaph->tcb.next;
    11a4:	18 96       	adiw	r26, 0x08	; 8
    11a6:	cd 91       	ld	r28, X+
    11a8:	dc 91       	ld	r29, X
    11aa:	19 97       	sbiw	r26, 0x09	; 9
     semaph->tcb.next->next->prev = &semaph->tcb;
    11ac:	e8 85       	ldd	r30, Y+8	; 0x08
    11ae:	f9 85       	ldd	r31, Y+9	; 0x09
    11b0:	b3 87       	std	Z+11, r27	; 0x0b
    11b2:	a2 87       	std	Z+10, r26	; 0x0a
     semaph->tcb.next = semaph->tcb.next->next;
    11b4:	19 96       	adiw	r26, 0x09	; 9
    11b6:	fc 93       	st	X, r31
    11b8:	ee 93       	st	-X, r30
    11ba:	18 97       	sbiw	r26, 0x08	; 8
     semaph->tcb_num -- ;
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	1d 96       	adiw	r26, 0x0d	; 13
    11c0:	9c 93       	st	X, r25
    11c2:	8e 93       	st	-X, r24
    11c4:	1c 97       	sbiw	r26, 0x0c	; 12
    11c6:	e1 cf       	rjmp	.-62     	; 0x118a <RTS_PostSemaphore+0x5e>

000011c8 <RTS_WaitSemaphore>:
}


/*< 等待信号量   */
void RTS_WaitSemaphore(semaphore_t* semaph)
{
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	ec 01       	movw	r28, r24
  /*< 如果当前信号量小于0则将该任务移到该信号量链表中 */
  RTS_ENTER_CRITICAL
    11ce:	00 90 5f 00 	lds	r0, 0x005F
    11d2:	0f 92       	push	r0
    11d4:	8f b7       	in	r24, 0x3f	; 63
    11d6:	8f 77       	andi	r24, 0x7F	; 127
    11d8:	8f bf       	out	0x3f, r24	; 63
  rts_gb_curr_task_tcb->curr_status = RTS_TASK_STATUS_SYNC;
    11da:	e0 91 01 0c 	lds	r30, 0x0C01
    11de:	f0 91 02 0c 	lds	r31, 0x0C02
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	83 83       	std	Z+3, r24	; 0x03
  rts_gb_curr_task_tcb->prev_status = RTS_TASK_STATUS_READY;
    11e6:	e0 91 01 0c 	lds	r30, 0x0C01
    11ea:	f0 91 02 0c 	lds	r31, 0x0C02
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	84 83       	std	Z+4, r24	; 0x04
  --semaph->value;
    11f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    11f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9f 87       	std	Y+15, r25	; 0x0f
    11fa:	8e 87       	std	Y+14, r24	; 0x0e
  if(semaph->value < 0)
    11fc:	97 fd       	sbrc	r25, 7
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <RTS_WaitSemaphore+0x44>
    RTS_CORE_RemoveTcbFromRdyList((TCB_t *)rts_gb_curr_task_tcb);
    InsertTcbToSemaphoreList((TCB_t *)rts_gb_curr_task_tcb,semaph);
    RTS_CORE_UpdateTaskHightPrio();
    RTS_CORE_SwitchToHiprioTask();
  }
  RTS_EXIT_CRITICAL
    1200:	0f 90       	pop	r0
    1202:	00 92 5f 00 	sts	0x005F, r0
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret
  rts_gb_curr_task_tcb->curr_status = RTS_TASK_STATUS_SYNC;
  rts_gb_curr_task_tcb->prev_status = RTS_TASK_STATUS_READY;
  --semaph->value;
  if(semaph->value < 0)
  {
    RTS_CORE_RemoveTcbFromRdyList((TCB_t *)rts_gb_curr_task_tcb);
    120c:	80 91 01 0c 	lds	r24, 0x0C01
    1210:	90 91 02 0c 	lds	r25, 0x0C02
    1214:	0e 94 2a 05 	call	0xa54	; 0xa54 <RTS_CORE_RemoveTcbFromRdyList>
    InsertTcbToSemaphoreList((TCB_t *)rts_gb_curr_task_tcb,semaph);
    1218:	a0 91 01 0c 	lds	r26, 0x0C01
    121c:	b0 91 02 0c 	lds	r27, 0x0C02
#if (RTS_CFG_SEMAPHORE_ENB > 0u)

/*< 将TCB从尾部插入到信号量链表中   */
static void InsertTcbToSemaphoreList(TCB_t *tcb, semaphore_t *semaph)
{
   tcb->prev  = semaph->tcb.prev;
    1220:	8a 85       	ldd	r24, Y+10	; 0x0a
    1222:	9b 85       	ldd	r25, Y+11	; 0x0b
    1224:	1b 96       	adiw	r26, 0x0b	; 11
    1226:	9c 93       	st	X, r25
    1228:	8e 93       	st	-X, r24
    122a:	1a 97       	sbiw	r26, 0x0a	; 10
   tcb->next  = &semaph->tcb;
    122c:	19 96       	adiw	r26, 0x09	; 9
    122e:	dc 93       	st	X, r29
    1230:	ce 93       	st	-X, r28
    1232:	18 97       	sbiw	r26, 0x08	; 8
   semaph->tcb.prev->next = tcb;
    1234:	ea 85       	ldd	r30, Y+10	; 0x0a
    1236:	fb 85       	ldd	r31, Y+11	; 0x0b
    1238:	b1 87       	std	Z+9, r27	; 0x09
    123a:	a0 87       	std	Z+8, r26	; 0x08
   semaph->tcb.prev = tcb;
    123c:	bb 87       	std	Y+11, r27	; 0x0b
    123e:	aa 87       	std	Y+10, r26	; 0x0a
   semaph->tcb_num ++;
    1240:	8c 85       	ldd	r24, Y+12	; 0x0c
    1242:	9d 85       	ldd	r25, Y+13	; 0x0d
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	9d 87       	std	Y+13, r25	; 0x0d
    1248:	8c 87       	std	Y+12, r24	; 0x0c
  --semaph->value;
  if(semaph->value < 0)
  {
    RTS_CORE_RemoveTcbFromRdyList((TCB_t *)rts_gb_curr_task_tcb);
    InsertTcbToSemaphoreList((TCB_t *)rts_gb_curr_task_tcb,semaph);
    RTS_CORE_UpdateTaskHightPrio();
    124a:	0e 94 1e 04 	call	0x83c	; 0x83c <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_SwitchToHiprioTask();
    124e:	0e 94 b2 05 	call	0xb64	; 0xb64 <RTS_CORE_SwitchToHiprioTask>
  }
  RTS_EXIT_CRITICAL
    1252:	0f 90       	pop	r0
    1254:	00 92 5f 00 	sts	0x005F, r0
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <RTS_DestorySemaphore>:
   return semaph;
}

/*< 动态销毁信号量   */
void RTS_DestorySemaphore(semaphore_t *semaph)
{
    125e:	9c 01       	movw	r18, r24
  RTS_ENTER_CRITICAL
    1260:	00 90 5f 00 	lds	r0, 0x005F
    1264:	0f 92       	push	r0
    1266:	8f b7       	in	r24, 0x3f	; 63
    1268:	8f 77       	andi	r24, 0x7F	; 127
    126a:	8f bf       	out	0x3f, r24	; 63
   if(semaph != NULL)
    126c:	21 15       	cp	r18, r1
    126e:	31 05       	cpc	r19, r1
    1270:	19 f0       	breq	.+6      	; 0x1278 <RTS_DestorySemaphore+0x1a>
   {
     MemFree(semaph);
    1272:	c9 01       	movw	r24, r18
    1274:	0e 94 2e 03 	call	0x65c	; 0x65c <MemFree>
   }
  RTS_EXIT_CRITICAL
    1278:	0f 90       	pop	r0
    127a:	00 92 5f 00 	sts	0x005F, r0
}
    127e:	08 95       	ret

00001280 <RTS_CreateSemaphore>:
   }
}

/*< 动态创建信号量   */
semaphore_t* RTS_CreateSemaphore(s16_t initVal)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
   semaphore_t *semaph = NULL;
   RTS_ENTER_CRITICAL
    1286:	00 90 5f 00 	lds	r0, 0x005F
    128a:	0f 92       	push	r0
    128c:	8f b7       	in	r24, 0x3f	; 63
    128e:	8f 77       	andi	r24, 0x7F	; 127
    1290:	8f bf       	out	0x3f, r24	; 63
   semaph = (semaphore_t*)MemAlloc(sizeof(semaphore_t));  /*< 申请信号量所需的内存  */
    1292:	80 e1       	ldi	r24, 0x10	; 16
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 8f 02 	call	0x51e	; 0x51e <MemAlloc>
    129a:	fc 01       	movw	r30, r24
   if(semaph != NULL)
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	41 f0       	breq	.+16     	; 0x12b0 <RTS_CreateSemaphore+0x30>
   {
     semaph->tcb.next = &semaph->tcb;
    12a0:	80 87       	std	Z+8, r24	; 0x08
    12a2:	91 87       	std	Z+9, r25	; 0x09
     semaph->tcb.prev = &semaph->tcb;
    12a4:	82 87       	std	Z+10, r24	; 0x0a
    12a6:	93 87       	std	Z+11, r25	; 0x0b
     semaph->tcb_num   = 0u;
    12a8:	15 86       	std	Z+13, r1	; 0x0d
    12aa:	14 86       	std	Z+12, r1	; 0x0c
     semaph->value = initVal;
    12ac:	d7 87       	std	Z+15, r29	; 0x0f
    12ae:	c6 87       	std	Z+14, r28	; 0x0e
   }
   RTS_EXIT_CRITICAL
    12b0:	0f 90       	pop	r0
    12b2:	00 92 5f 00 	sts	0x005F, r0
   return semaph;
}
    12b6:	cf 01       	movw	r24, r30
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <RTS_OS_Start>:


//RTS_OS启动
void RTS_OS_Start(void)
{
    RTS_CORE_UpdateTaskHightPrio();
    12be:	0e 94 1e 04 	call	0x83c	; 0x83c <RTS_CORE_UpdateTaskHightPrio>
    RTS_CORE_GetHightPrioTcb((TCB_t **)(&rts_gb_curr_task_tcb));
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	9c e0       	ldi	r25, 0x0C	; 12
    12c6:	0e 94 a2 05 	call	0xb44	; 0xb44 <RTS_CORE_GetHightPrioTcb>

    #if (RTS_CFG_DELAY_ENB == 0u)
    if(RTS_CORE_GetHiprioTcbNum() > 1u)
    12ca:	0e 94 38 06 	call	0xc70	; 0xc70 <RTS_CORE_GetHiprioTcbNum>
    12ce:	82 30       	cpi	r24, 0x02	; 2
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <RTS_OS_Start+0x16>
    12d2:	38 c0       	rjmp	.+112    	; 0x1344 <RTS_OS_Start+0x86>
        RTS_SYSTICK_ENABLE
    12d4:	80 91 6f 00 	lds	r24, 0x006F
    12d8:	81 60       	ori	r24, 0x01	; 1
    12da:	80 93 6f 00 	sts	0x006F, r24
    else
        RTS_SYSTICK_DISABLE
    #endif
    
    RTS_PORT_TASK_SW_BOTTOM 
    12de:	e0 91 01 0c 	lds	r30, 0x0C01
    12e2:	f0 91 02 0c 	lds	r31, 0x0C02
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	9e bf       	out	0x3e, r25	; 62
    12ec:	8d bf       	out	0x3d, r24	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	bf 91       	pop	r27
    12f8:	af 91       	pop	r26
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	9f 90       	pop	r9
    131c:	8f 90       	pop	r8
    131e:	7f 90       	pop	r7
    1320:	6f 90       	pop	r6
    1322:	5f 90       	pop	r5
    1324:	4f 90       	pop	r4
    1326:	3f 90       	pop	r3
    1328:	2f 90       	pop	r2
    132a:	0f 90       	pop	r0
    132c:	00 92 5b 00 	sts	0x005B, r0
    1330:	0f 90       	pop	r0
    1332:	00 92 5f 00 	sts	0x005F, r0
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	08 95       	ret
    RTS_ENABLE_INTERRUPTS  //开启总中断
    133c:	8f b7       	in	r24, 0x3f	; 63
    133e:	80 68       	ori	r24, 0x80	; 128
    1340:	8f bf       	out	0x3f, r24	; 63
    1342:	08 95       	ret

    #if (RTS_CFG_DELAY_ENB == 0u)
    if(RTS_CORE_GetHiprioTcbNum() > 1u)
        RTS_SYSTICK_ENABLE
    else
        RTS_SYSTICK_DISABLE
    1344:	80 91 6f 00 	lds	r24, 0x006F
    1348:	8e 7f       	andi	r24, 0xFE	; 254
    134a:	80 93 6f 00 	sts	0x006F, r24
    134e:	c7 cf       	rjmp	.-114    	; 0x12de <RTS_OS_Start+0x20>

00001350 <RTS_OS_Init>:
#include "rts_os.h"


//RTS_OS初始化
void RTS_OS_Init(void (*idle_task_hook)(void *))
{
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	8c 01       	movw	r16, r24
    RTS_DISABLE_INTERRUPTS
    1356:	8f b7       	in	r24, 0x3f	; 63
    1358:	8f 77       	andi	r24, 0x7F	; 127
    135a:	8f bf       	out	0x3f, r24	; 63
    MemAllocInit();
    135c:	0e 94 4d 02 	call	0x49a	; 0x49a <MemAllocInit>
    RTS_PORT_SystickInit();
    1360:	0e 94 af 03 	call	0x75e	; 0x75e <RTS_PORT_SystickInit>
    RTS_CORE_Init();
    1364:	0e 94 ee 03 	call	0x7dc	; 0x7dc <RTS_CORE_Init>
    RTS_TASK_IdleTaskInit(idle_task_hook);
    1368:	c8 01       	movw	r24, r16
    136a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <RTS_TASK_IdleTaskInit>
    rts_gb_systicks = 0;
    136e:	10 92 fd 0b 	sts	0x0BFD, r1
    1372:	10 92 fe 0b 	sts	0x0BFE, r1
    1376:	10 92 ff 0b 	sts	0x0BFF, r1
    137a:	10 92 00 0c 	sts	0x0C00, r1
}
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	08 95       	ret

00001384 <_transmit_data>:
/**-------------------------------*/
};


static void _transmit_data(struct _usart *mythis,const u8_t data)
{
    1384:	dc 01       	movw	r26, r24

    while ( !( (*mythis->ux_cofg.reg_ucsra) & (1<<5)) )
    1386:	19 96       	adiw	r26, 0x09	; 9
    1388:	ed 91       	ld	r30, X+
    138a:	fc 91       	ld	r31, X
    138c:	1a 97       	sbiw	r26, 0x0a	; 10
    138e:	80 81       	ld	r24, Z
    1390:	85 ff       	sbrs	r24, 5
    1392:	f9 cf       	rjmp	.-14     	; 0x1386 <_transmit_data+0x2>
    ;
    (*mythis->ux_cofg.reg_udr) = data;
    1394:	17 96       	adiw	r26, 0x07	; 7
    1396:	ed 91       	ld	r30, X+
    1398:	fc 91       	ld	r31, X
    139a:	18 97       	sbiw	r26, 0x08	; 8
    139c:	60 83       	st	Z, r22
}
    139e:	08 95       	ret

000013a0 <_send_str>:


static void _send_str(struct _usart *mythis,s8_t *str)
{
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	8c 01       	movw	r16, r24
    13aa:	eb 01       	movw	r28, r22
    while(*str)
    13ac:	68 81       	ld	r22, Y
    13ae:	66 23       	and	r22, r22
    13b0:	59 f0       	breq	.+22     	; 0x13c8 <_send_str+0x28>
    {
        mythis->transmit_data(mythis,*(str++));
    13b2:	21 96       	adiw	r28, 0x01	; 1
    13b4:	d8 01       	movw	r26, r16
    13b6:	56 96       	adiw	r26, 0x16	; 22
    13b8:	ed 91       	ld	r30, X+
    13ba:	fc 91       	ld	r31, X
    13bc:	57 97       	sbiw	r26, 0x17	; 23
    13be:	c8 01       	movw	r24, r16
    13c0:	19 95       	eicall
}


static void _send_str(struct _usart *mythis,s8_t *str)
{
    while(*str)
    13c2:	68 81       	ld	r22, Y
    13c4:	66 23       	and	r22, r22
    13c6:	a9 f7       	brne	.-22     	; 0x13b2 <_send_str+0x12>
    {
        mythis->transmit_data(mythis,*(str++));
    }
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	08 95       	ret

000013d2 <_receive_data>:


static u8_t _receive_data(struct _usart *mythis)
{
    13d2:	dc 01       	movw	r26, r24
    while ( !((*mythis->ux_cofg.reg_ucsra) & (1<<7)) )
    13d4:	19 96       	adiw	r26, 0x09	; 9
    13d6:	ed 91       	ld	r30, X+
    13d8:	fc 91       	ld	r31, X
    13da:	1a 97       	sbiw	r26, 0x0a	; 10
    13dc:	80 81       	ld	r24, Z
    13de:	87 ff       	sbrs	r24, 7
    13e0:	f9 cf       	rjmp	.-14     	; 0x13d4 <_receive_data+0x2>
    ;
    return (*mythis->ux_cofg.reg_udr);
    13e2:	17 96       	adiw	r26, 0x07	; 7
    13e4:	ed 91       	ld	r30, X+
    13e6:	fc 91       	ld	r31, X
    13e8:	18 97       	sbiw	r26, 0x08	; 8
    13ea:	80 81       	ld	r24, Z
}
    13ec:	08 95       	ret

000013ee <__vector_36>:




USART1_RX_INTERRUPT_FUN_NAME
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	0b b6       	in	r0, 0x3b	; 59
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
    u8_t rev_tmp = *global_this->ux_cofg.reg_udr;
    1414:	e0 91 7b 04 	lds	r30, 0x047B
    1418:	f0 91 7c 04 	lds	r31, 0x047C
    141c:	07 80       	ldd	r0, Z+7	; 0x07
    141e:	f0 85       	ldd	r31, Z+8	; 0x08
    1420:	e0 2d       	mov	r30, r0
    1422:	90 81       	ld	r25, Z
    if(rev_tmp == global_this->rev_ending_char)
    1424:	e0 91 7b 04 	lds	r30, 0x047B
    1428:	f0 91 7c 04 	lds	r31, 0x047C
    142c:	83 89       	ldd	r24, Z+19	; 0x13
    142e:	89 17       	cp	r24, r25
    1430:	01 f1       	breq	.+64     	; 0x1472 <__vector_36+0x84>
        //如果遇到结束符，则调用回调函数
        global_this->rev_data_callback_fun((struct _usart *)global_this);
    }
    else
    {
        *(global_this->rev_data_buff_ptr++) = rev_tmp;
    1432:	a0 91 7b 04 	lds	r26, 0x047B
    1436:	b0 91 7c 04 	lds	r27, 0x047C
    143a:	54 96       	adiw	r26, 0x14	; 20
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	55 97       	sbiw	r26, 0x15	; 21
    1442:	91 93       	st	Z+, r25
    1444:	55 96       	adiw	r26, 0x15	; 21
    1446:	fc 93       	st	X, r31
    1448:	ee 93       	st	-X, r30
    144a:	54 97       	sbiw	r26, 0x14	; 20
    }
}
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0b be       	out	0x3b, r0	; 59
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti
{
    u8_t rev_tmp = *global_this->ux_cofg.reg_udr;
    if(rev_tmp == global_this->rev_ending_char)
    {
        //如果遇到结束符，则调用回调函数
        global_this->rev_data_callback_fun((struct _usart *)global_this);
    1472:	e0 91 7b 04 	lds	r30, 0x047B
    1476:	f0 91 7c 04 	lds	r31, 0x047C
    147a:	04 8c       	ldd	r0, Z+28	; 0x1c
    147c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    147e:	e0 2d       	mov	r30, r0
    1480:	80 91 7b 04 	lds	r24, 0x047B
    1484:	90 91 7c 04 	lds	r25, 0x047C
    1488:	19 95       	eicall
    148a:	e0 cf       	rjmp	.-64     	; 0x144c <__vector_36+0x5e>

0000148c <__vector_25>:
    }
}


USART0_RX_INTERRUPT_FUN_NAME
{
    148c:	1f 92       	push	r1
    148e:	0f 92       	push	r0
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	0f 92       	push	r0
    1494:	0b b6       	in	r0, 0x3b	; 59
    1496:	0f 92       	push	r0
    1498:	11 24       	eor	r1, r1
    149a:	2f 93       	push	r18
    149c:	3f 93       	push	r19
    149e:	4f 93       	push	r20
    14a0:	5f 93       	push	r21
    14a2:	6f 93       	push	r22
    14a4:	7f 93       	push	r23
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
    14ae:	ef 93       	push	r30
    14b0:	ff 93       	push	r31
    u8_t rev_tmp = *global_this->ux_cofg.reg_udr;
    14b2:	e0 91 7b 04 	lds	r30, 0x047B
    14b6:	f0 91 7c 04 	lds	r31, 0x047C
    14ba:	07 80       	ldd	r0, Z+7	; 0x07
    14bc:	f0 85       	ldd	r31, Z+8	; 0x08
    14be:	e0 2d       	mov	r30, r0
    14c0:	90 81       	ld	r25, Z
    if(rev_tmp == global_this->rev_ending_char)
    14c2:	e0 91 7b 04 	lds	r30, 0x047B
    14c6:	f0 91 7c 04 	lds	r31, 0x047C
    14ca:	83 89       	ldd	r24, Z+19	; 0x13
    14cc:	89 17       	cp	r24, r25
    14ce:	01 f1       	breq	.+64     	; 0x1510 <__vector_25+0x84>
        //如果遇到结束符，则调用回调函数
        global_this->rev_data_callback_fun((struct _usart *)global_this);
    }
    else
    {
        *(global_this->rev_data_buff_ptr++) = rev_tmp;
    14d0:	a0 91 7b 04 	lds	r26, 0x047B
    14d4:	b0 91 7c 04 	lds	r27, 0x047C
    14d8:	54 96       	adiw	r26, 0x14	; 20
    14da:	ed 91       	ld	r30, X+
    14dc:	fc 91       	ld	r31, X
    14de:	55 97       	sbiw	r26, 0x15	; 21
    14e0:	91 93       	st	Z+, r25
    14e2:	55 96       	adiw	r26, 0x15	; 21
    14e4:	fc 93       	st	X, r31
    14e6:	ee 93       	st	-X, r30
    14e8:	54 97       	sbiw	r26, 0x14	; 20
    }
}
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0b be       	out	0x3b, r0	; 59
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti
{
    u8_t rev_tmp = *global_this->ux_cofg.reg_udr;
    if(rev_tmp == global_this->rev_ending_char)
    {
        //如果遇到结束符，则调用回调函数
        global_this->rev_data_callback_fun((struct _usart *)global_this);
    1510:	e0 91 7b 04 	lds	r30, 0x047B
    1514:	f0 91 7c 04 	lds	r31, 0x047C
    1518:	04 8c       	ldd	r0, Z+28	; 0x1c
    151a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    151c:	e0 2d       	mov	r30, r0
    151e:	80 91 7b 04 	lds	r24, 0x047B
    1522:	90 91 7c 04 	lds	r25, 0x047C
    1526:	19 95       	eicall
    1528:	e0 cf       	rjmp	.-64     	; 0x14ea <__vector_25+0x5e>

0000152a <_disp_unsigned_integer>:




static void _disp_unsigned_integer(struct _usart *mythis,u32_t number)
{
    152a:	8f 92       	push	r8
    152c:	9f 92       	push	r9
    152e:	af 92       	push	r10
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	63 97       	sbiw	r28, 0x13	; 19
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	5c 01       	movw	r10, r24
    1552:	6a 01       	movw	r12, r20
    1554:	7b 01       	movw	r14, r22
    u32_t tmp = number/10;
    1556:	ba 01       	movw	r22, r20
    1558:	c7 01       	movw	r24, r14
    155a:	2a e0       	ldi	r18, 0x0A	; 10
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
    1566:	c9 01       	movw	r24, r18
    1568:	da 01       	movw	r26, r20
    156a:	9c 01       	movw	r18, r24
    156c:	ad 01       	movw	r20, r26
    u8_t bits = 1;
    s8_t char_tmp[17]={0};
    156e:	4e 01       	movw	r8, r28
    1570:	08 94       	sec
    1572:	81 1c       	adc	r8, r1
    1574:	91 1c       	adc	r9, r1
    1576:	81 e1       	ldi	r24, 0x11	; 17
    1578:	d4 01       	movw	r26, r8
    157a:	1d 92       	st	X+, r1
    157c:	8a 95       	dec	r24
    157e:	e9 f7       	brne	.-6      	; 0x157a <_disp_unsigned_integer+0x50>
    while(tmp)
    1580:	21 15       	cp	r18, r1
    1582:	31 05       	cpc	r19, r1
    1584:	41 05       	cpc	r20, r1
    1586:	51 05       	cpc	r21, r1
    1588:	09 f4       	brne	.+2      	; 0x158c <_disp_unsigned_integer+0x62>
    158a:	4c c0       	rjmp	.+152    	; 0x1624 <_disp_unsigned_integer+0xfa>
    158c:	01 e0       	ldi	r16, 0x01	; 1
    {
        tmp /= 10;
    158e:	ca 01       	movw	r24, r20
    1590:	b9 01       	movw	r22, r18
    1592:	2a e0       	ldi	r18, 0x0A	; 10
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
    159e:	c9 01       	movw	r24, r18
    15a0:	da 01       	movw	r26, r20
    15a2:	9c 01       	movw	r18, r24
    15a4:	ad 01       	movw	r20, r26
        bits ++;
    15a6:	0f 5f       	subi	r16, 0xFF	; 255
static void _disp_unsigned_integer(struct _usart *mythis,u32_t number)
{
    u32_t tmp = number/10;
    u8_t bits = 1;
    s8_t char_tmp[17]={0};
    while(tmp)
    15a8:	21 15       	cp	r18, r1
    15aa:	31 05       	cpc	r19, r1
    15ac:	41 05       	cpc	r20, r1
    15ae:	51 05       	cpc	r21, r1
    15b0:	71 f7       	brne	.-36     	; 0x158e <_disp_unsigned_integer+0x64>
    {
        tmp /= 10;
        bits ++;
    }
    for(;bits>0;bits--)
    15b2:	00 23       	and	r16, r16
    15b4:	e9 f0       	breq	.+58     	; 0x15f0 <_disp_unsigned_integer+0xc6>
    {
        char_tmp[bits-1] = number%10+'0';
    15b6:	fe 01       	movw	r30, r28
    15b8:	e0 0f       	add	r30, r16
    15ba:	f1 1d       	adc	r31, r1
    15bc:	fb 8b       	std	Y+19, r31	; 0x13
    15be:	ea 8b       	std	Y+18, r30	; 0x12
    15c0:	b6 01       	movw	r22, r12
    15c2:	c7 01       	movw	r24, r14
    15c4:	2a e0       	ldi	r18, 0x0A	; 10
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
    15d0:	60 5d       	subi	r22, 0xD0	; 208
    15d2:	aa 89       	ldd	r26, Y+18	; 0x12
    15d4:	bb 89       	ldd	r27, Y+19	; 0x13
    15d6:	6c 93       	st	X, r22
        number /= 10;
    15d8:	b6 01       	movw	r22, r12
    15da:	c7 01       	movw	r24, r14
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__udivmodsi4>
    15e8:	69 01       	movw	r12, r18
    15ea:	7a 01       	movw	r14, r20
    while(tmp)
    {
        tmp /= 10;
        bits ++;
    }
    for(;bits>0;bits--)
    15ec:	01 50       	subi	r16, 0x01	; 1
    15ee:	19 f7       	brne	.-58     	; 0x15b6 <_disp_unsigned_integer+0x8c>
    {
        char_tmp[bits-1] = number%10+'0';
        number /= 10;
    }
    mythis->send_str(mythis,char_tmp);
    15f0:	d5 01       	movw	r26, r10
    15f2:	58 96       	adiw	r26, 0x18	; 24
    15f4:	ed 91       	ld	r30, X+
    15f6:	fc 91       	ld	r31, X
    15f8:	59 97       	sbiw	r26, 0x19	; 25
    15fa:	c5 01       	movw	r24, r10
    15fc:	b4 01       	movw	r22, r8
    15fe:	19 95       	eicall
}
    1600:	63 96       	adiw	r28, 0x13	; 19
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	af 90       	pop	r10
    161e:	9f 90       	pop	r9
    1620:	8f 90       	pop	r8
    1622:	08 95       	ret
static void _disp_unsigned_integer(struct _usart *mythis,u32_t number)
{
    u32_t tmp = number/10;
    u8_t bits = 1;
    s8_t char_tmp[17]={0};
    while(tmp)
    1624:	01 e0       	ldi	r16, 0x01	; 1
    1626:	c7 cf       	rjmp	.-114    	; 0x15b6 <_disp_unsigned_integer+0x8c>

00001628 <_disp_pic>:
    mythis->send_str(mythis,char_tmp);
}


static void _disp_pic(struct _usart * const mythis,u8_t w,u8_t h,const u8_t* pic)
{
    1628:	6f 92       	push	r6
    162a:	7f 92       	push	r7
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ec 01       	movw	r28, r24
    1644:	96 2e       	mov	r9, r22
    1646:	69 01       	movw	r12, r18
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    1648:	46 9f       	mul	r20, r22
    164a:	30 01       	movw	r6, r0
    164c:	11 24       	eor	r1, r1
    164e:	61 14       	cp	r6, r1
    1650:	71 04       	cpc	r7, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <_disp_pic+0x2e>
    1654:	4f c0       	rjmp	.+158    	; 0x16f4 <_disp_pic+0xcc>
    1656:	aa 24       	eor	r10, r10
    1658:	bb 24       	eor	r11, r11
    165a:	75 01       	movw	r14, r10
    165c:	00 e0       	ldi	r16, 0x00	; 0
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	19 c0       	rjmp	.+50     	; 0x1694 <_disp_pic+0x6c>
    {
        for(k=0;k<8;k++)
        {
            if((*pic)&(1<<k))
            {
                mythis->transmit_data(mythis,'*');
    1662:	ee 89       	ldd	r30, Y+22	; 0x16
    1664:	ff 89       	ldd	r31, Y+23	; 0x17
    1666:	ce 01       	movw	r24, r28
    1668:	6a e2       	ldi	r22, 0x2A	; 42
    166a:	19 95       	eicall
                mythis->transmit_data(mythis,'*');
    166c:	ee 89       	ldd	r30, Y+22	; 0x16
    166e:	ff 89       	ldd	r31, Y+23	; 0x17
    1670:	ce 01       	movw	r24, r28
    1672:	6a e2       	ldi	r22, 0x2A	; 42
    1674:	19 95       	eicall
                mythis->transmit_data(mythis,' ');
                mythis->transmit_data(mythis,' ');
            }


            i++;
    1676:	08 94       	sec
    1678:	e1 1c       	adc	r14, r1
    167a:	f1 1c       	adc	r15, r1
            if((i %w) == 0)
    167c:	c7 01       	movw	r24, r14
    167e:	69 2d       	mov	r22, r9
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <__udivmodhi4>
    1686:	89 2b       	or	r24, r25
    1688:	d9 f0       	breq	.+54     	; 0x16c0 <_disp_pic+0x98>
            {
                mythis->transmit_data(mythis,'\r');
                mythis->transmit_data(mythis,'\n');
    168a:	0f 5f       	subi	r16, 0xFF	; 255
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    168e:	08 30       	cpi	r16, 0x08	; 8
    1690:	11 05       	cpc	r17, r1
    1692:	29 f1       	breq	.+74     	; 0x16de <_disp_pic+0xb6>
        {
            if((*pic)&(1<<k))
    1694:	f6 01       	movw	r30, r12
    1696:	80 81       	ld	r24, Z
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	00 2e       	mov	r0, r16
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <_disp_pic+0x7a>
    169e:	95 95       	asr	r25
    16a0:	87 95       	ror	r24
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <_disp_pic+0x76>
    16a6:	80 fd       	sbrc	r24, 0
    16a8:	dc cf       	rjmp	.-72     	; 0x1662 <_disp_pic+0x3a>
                mythis->transmit_data(mythis,'*');
                mythis->transmit_data(mythis,'*');
            }
            else
            {
                mythis->transmit_data(mythis,' ');
    16aa:	ee 89       	ldd	r30, Y+22	; 0x16
    16ac:	ff 89       	ldd	r31, Y+23	; 0x17
    16ae:	ce 01       	movw	r24, r28
    16b0:	60 e2       	ldi	r22, 0x20	; 32
    16b2:	19 95       	eicall
                mythis->transmit_data(mythis,' ');
    16b4:	ee 89       	ldd	r30, Y+22	; 0x16
    16b6:	ff 89       	ldd	r31, Y+23	; 0x17
    16b8:	ce 01       	movw	r24, r28
    16ba:	60 e2       	ldi	r22, 0x20	; 32
    16bc:	19 95       	eicall
    16be:	db cf       	rjmp	.-74     	; 0x1676 <_disp_pic+0x4e>


            i++;
            if((i %w) == 0)
            {
                mythis->transmit_data(mythis,'\r');
    16c0:	ee 89       	ldd	r30, Y+22	; 0x16
    16c2:	ff 89       	ldd	r31, Y+23	; 0x17
    16c4:	ce 01       	movw	r24, r28
    16c6:	6d e0       	ldi	r22, 0x0D	; 13
    16c8:	19 95       	eicall
                mythis->transmit_data(mythis,'\n');
    16ca:	ee 89       	ldd	r30, Y+22	; 0x16
    16cc:	ff 89       	ldd	r31, Y+23	; 0x17
    16ce:	ce 01       	movw	r24, r28
    16d0:	6a e0       	ldi	r22, 0x0A	; 10
    16d2:	19 95       	eicall
    16d4:	0f 5f       	subi	r16, 0xFF	; 255
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    {
        for(k=0;k<8;k++)
    16d8:	08 30       	cpi	r16, 0x08	; 8
    16da:	11 05       	cpc	r17, r1
    16dc:	d9 f6       	brne	.-74     	; 0x1694 <_disp_pic+0x6c>
    16de:	88 e0       	ldi	r24, 0x08	; 8
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a8 0e       	add	r10, r24
    16e4:	b9 1e       	adc	r11, r25

static void _disp_pic(struct _usart * const mythis,u8_t w,u8_t h,const u8_t* pic)
{
    u16_t i=0;
    u8_t  k;
    while(i<w*h)
    16e6:	a6 14       	cp	r10, r6
    16e8:	b7 04       	cpc	r11, r7
    16ea:	20 f4       	brcc	.+8      	; 0x16f4 <_disp_pic+0xcc>
            {
                mythis->transmit_data(mythis,'\r');
                mythis->transmit_data(mythis,'\n');
            }
        }
        pic++;
    16ec:	08 94       	sec
    16ee:	c1 1c       	adc	r12, r1
    16f0:	d1 1c       	adc	r13, r1
    16f2:	b3 cf       	rjmp	.-154    	; 0x165a <_disp_pic+0x32>
    }
}
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	bf 90       	pop	r11
    1706:	af 90       	pop	r10
    1708:	9f 90       	pop	r9
    170a:	7f 90       	pop	r7
    170c:	6f 90       	pop	r6
    170e:	08 95       	ret

00001710 <usart_init>:


void usart_init(usart * const usartn)
{
    1710:	dc 01       	movw	r26, r24
    global_this = usartn;
    1712:	90 93 7c 04 	sts	0x047C, r25
    1716:	80 93 7b 04 	sts	0x047B, r24
    switch(usartn->ux_cofg.number)
    171a:	8c 91       	ld	r24, X
    171c:	88 23       	and	r24, r24
    171e:	09 f0       	breq	.+2      	; 0x1722 <usart_init+0x12>
    1720:	6a c0       	rjmp	.+212    	; 0x17f6 <usart_init+0xe6>
    {
        case 0:
          usartn->ux_cofg.reg_udr = (volatile u8_t *)0xc6;
    1722:	86 ec       	ldi	r24, 0xC6	; 198
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	18 96       	adiw	r26, 0x08	; 8
    1728:	9c 93       	st	X, r25
    172a:	8e 93       	st	-X, r24
    172c:	17 97       	sbiw	r26, 0x07	; 7
          usartn->ux_cofg.reg_ucsra = (volatile u8_t *)0xc0;
    172e:	80 ec       	ldi	r24, 0xC0	; 192
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	1a 96       	adiw	r26, 0x0a	; 10
    1734:	9c 93       	st	X, r25
    1736:	8e 93       	st	-X, r24
    1738:	19 97       	sbiw	r26, 0x09	; 9
          usartn->ux_cofg.reg_ucsrb = (volatile u8_t *)0xc1;
    173a:	81 ec       	ldi	r24, 0xC1	; 193
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	1c 96       	adiw	r26, 0x0c	; 12
    1740:	9c 93       	st	X, r25
    1742:	8e 93       	st	-X, r24
    1744:	1b 97       	sbiw	r26, 0x0b	; 11
          usartn->ux_cofg.reg_ucsrc = (volatile u8_t *)0xc2;
    1746:	82 ec       	ldi	r24, 0xC2	; 194
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	1e 96       	adiw	r26, 0x0e	; 14
    174c:	9c 93       	st	X, r25
    174e:	8e 93       	st	-X, r24
    1750:	1d 97       	sbiw	r26, 0x0d	; 13
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0xc4;
    1752:	84 ec       	ldi	r24, 0xC4	; 196
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	50 96       	adiw	r26, 0x10	; 16
    1758:	9c 93       	st	X, r25
    175a:	8e 93       	st	-X, r24
    175c:	1f 97       	sbiw	r26, 0x0f	; 15
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0xc5;
    175e:	85 ec       	ldi	r24, 0xC5	; 197
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	52 96       	adiw	r26, 0x12	; 18
    1764:	9c 93       	st	X, r25
    1766:	8e 93       	st	-X, r24
    1768:	51 97       	sbiw	r26, 0x11	; 17
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0x97;
          break;
    }

    //设置波特率和数据格式
    (*usartn->ux_cofg.reg_ubrrh) = 0;
    176a:	51 96       	adiw	r26, 0x11	; 17
    176c:	ed 91       	ld	r30, X+
    176e:	fc 91       	ld	r31, X
    1770:	52 97       	sbiw	r26, 0x12	; 18
    1772:	10 82       	st	Z, r1
    (*usartn->ux_cofg.reg_ubrrl) = 8;
    1774:	1f 96       	adiw	r26, 0x0f	; 15
    1776:	ed 91       	ld	r30, X+
    1778:	fc 91       	ld	r31, X
    177a:	50 97       	sbiw	r26, 0x10	; 16
    177c:	88 e0       	ldi	r24, 0x08	; 8
    177e:	80 83       	st	Z, r24

    (*usartn->ux_cofg.reg_ucsrb) = ((1<<4)|(1<<3));
    1780:	1b 96       	adiw	r26, 0x0b	; 11
    1782:	ed 91       	ld	r30, X+
    1784:	fc 91       	ld	r31, X
    1786:	1c 97       	sbiw	r26, 0x0c	; 12
    1788:	88 e1       	ldi	r24, 0x18	; 24
    178a:	80 83       	st	Z, r24
    (*usartn->ux_cofg.reg_ucsrc) = ((usartn->ux_cofg.crc_type<<4)|(usartn->ux_cofg.stop_bits_num<<3)|(usartn->ux_cofg.data_bits_num<<1));
    178c:	1d 96       	adiw	r26, 0x0d	; 13
    178e:	ed 91       	ld	r30, X+
    1790:	fc 91       	ld	r31, X
    1792:	1e 97       	sbiw	r26, 0x0e	; 14
    1794:	15 96       	adiw	r26, 0x05	; 5
    1796:	8c 91       	ld	r24, X
    1798:	15 97       	sbiw	r26, 0x05	; 5
    179a:	88 0f       	add	r24, r24
    179c:	88 0f       	add	r24, r24
    179e:	88 0f       	add	r24, r24
    17a0:	13 96       	adiw	r26, 0x03	; 3
    17a2:	9c 91       	ld	r25, X
    17a4:	13 97       	sbiw	r26, 0x03	; 3
    17a6:	92 95       	swap	r25
    17a8:	90 7f       	andi	r25, 0xF0	; 240
    17aa:	98 2b       	or	r25, r24
    17ac:	14 96       	adiw	r26, 0x04	; 4
    17ae:	8c 91       	ld	r24, X
    17b0:	14 97       	sbiw	r26, 0x04	; 4
    17b2:	88 0f       	add	r24, r24
    17b4:	89 2b       	or	r24, r25
    17b6:	80 83       	st	Z, r24



    //注册驱动
    usartn->transmit_data = _transmit_data;
    17b8:	82 ec       	ldi	r24, 0xC2	; 194
    17ba:	99 e0       	ldi	r25, 0x09	; 9
    17bc:	57 96       	adiw	r26, 0x17	; 23
    17be:	9c 93       	st	X, r25
    17c0:	8e 93       	st	-X, r24
    17c2:	56 97       	sbiw	r26, 0x16	; 22
    usartn->receive_data  = _receive_data;
    17c4:	89 ee       	ldi	r24, 0xE9	; 233
    17c6:	99 e0       	ldi	r25, 0x09	; 9
    17c8:	5b 96       	adiw	r26, 0x1b	; 27
    17ca:	9c 93       	st	X, r25
    17cc:	8e 93       	st	-X, r24
    17ce:	5a 97       	sbiw	r26, 0x1a	; 26
    usartn->send_str = _send_str;
    17d0:	80 ed       	ldi	r24, 0xD0	; 208
    17d2:	99 e0       	ldi	r25, 0x09	; 9
    17d4:	59 96       	adiw	r26, 0x19	; 25
    17d6:	9c 93       	st	X, r25
    17d8:	8e 93       	st	-X, r24
    17da:	58 97       	sbiw	r26, 0x18	; 24
    usartn->disp_pic = _disp_pic;
    17dc:	84 e1       	ldi	r24, 0x14	; 20
    17de:	9b e0       	ldi	r25, 0x0B	; 11
    17e0:	5f 96       	adiw	r26, 0x1f	; 31
    17e2:	9c 93       	st	X, r25
    17e4:	8e 93       	st	-X, r24
    17e6:	5e 97       	sbiw	r26, 0x1e	; 30
    usartn->disp_unsigned_integer = _disp_unsigned_integer;
    17e8:	85 e9       	ldi	r24, 0x95	; 149
    17ea:	9a e0       	ldi	r25, 0x0A	; 10
    17ec:	91 96       	adiw	r26, 0x21	; 33
    17ee:	9c 93       	st	X, r25
    17f0:	8e 93       	st	-X, r24
    17f2:	90 97       	sbiw	r26, 0x20	; 32


}
    17f4:	08 95       	ret


void usart_init(usart * const usartn)
{
    global_this = usartn;
    switch(usartn->ux_cofg.number)
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	d9 f0       	breq	.+54     	; 0x1830 <usart_init+0x120>
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0xCC;
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0xCD;
          break;

        default:
          usartn->ux_cofg.reg_udr = (volatile u8_t *)0x97;   //保留，操作这些寄存器不会有任何效果
    17fa:	87 e9       	ldi	r24, 0x97	; 151
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	18 96       	adiw	r26, 0x08	; 8
    1800:	9c 93       	st	X, r25
    1802:	8e 93       	st	-X, r24
    1804:	17 97       	sbiw	r26, 0x07	; 7
          usartn->ux_cofg.reg_ucsra = (volatile u8_t *)0x97;
    1806:	1a 96       	adiw	r26, 0x0a	; 10
    1808:	9c 93       	st	X, r25
    180a:	8e 93       	st	-X, r24
    180c:	19 97       	sbiw	r26, 0x09	; 9
          usartn->ux_cofg.reg_ucsrb = (volatile u8_t *)0x97;
    180e:	1c 96       	adiw	r26, 0x0c	; 12
    1810:	9c 93       	st	X, r25
    1812:	8e 93       	st	-X, r24
    1814:	1b 97       	sbiw	r26, 0x0b	; 11
          usartn->ux_cofg.reg_ucsrc = (volatile u8_t *)0x97;
    1816:	1e 96       	adiw	r26, 0x0e	; 14
    1818:	9c 93       	st	X, r25
    181a:	8e 93       	st	-X, r24
    181c:	1d 97       	sbiw	r26, 0x0d	; 13
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0x97;
    181e:	50 96       	adiw	r26, 0x10	; 16
    1820:	9c 93       	st	X, r25
    1822:	8e 93       	st	-X, r24
    1824:	1f 97       	sbiw	r26, 0x0f	; 15
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0x97;
    1826:	52 96       	adiw	r26, 0x12	; 18
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24
    182c:	51 97       	sbiw	r26, 0x11	; 17
    182e:	9d cf       	rjmp	.-198    	; 0x176a <usart_init+0x5a>
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0xc4;
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0xc5;
          break;

        case 1:
          usartn->ux_cofg.reg_udr = (volatile u8_t *)0xCE;
    1830:	8e ec       	ldi	r24, 0xCE	; 206
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	18 96       	adiw	r26, 0x08	; 8
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
    183a:	17 97       	sbiw	r26, 0x07	; 7
          usartn->ux_cofg.reg_ucsra = (volatile u8_t *)0xC8;
    183c:	88 ec       	ldi	r24, 0xC8	; 200
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	1a 96       	adiw	r26, 0x0a	; 10
    1842:	9c 93       	st	X, r25
    1844:	8e 93       	st	-X, r24
    1846:	19 97       	sbiw	r26, 0x09	; 9
          usartn->ux_cofg.reg_ucsrb = (volatile u8_t *)0xC9;
    1848:	89 ec       	ldi	r24, 0xC9	; 201
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	1c 96       	adiw	r26, 0x0c	; 12
    184e:	9c 93       	st	X, r25
    1850:	8e 93       	st	-X, r24
    1852:	1b 97       	sbiw	r26, 0x0b	; 11
          usartn->ux_cofg.reg_ucsrc = (volatile u8_t *)0xCA;
    1854:	8a ec       	ldi	r24, 0xCA	; 202
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	1e 96       	adiw	r26, 0x0e	; 14
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	1d 97       	sbiw	r26, 0x0d	; 13
          usartn->ux_cofg.reg_ubrrl = (volatile u8_t *)0xCC;
    1860:	8c ec       	ldi	r24, 0xCC	; 204
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	50 96       	adiw	r26, 0x10	; 16
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
    186a:	1f 97       	sbiw	r26, 0x0f	; 15
          usartn->ux_cofg.reg_ubrrh = (volatile u8_t *)0xCD;
    186c:	8d ec       	ldi	r24, 0xCD	; 205
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	52 96       	adiw	r26, 0x12	; 18
    1872:	9c 93       	st	X, r25
    1874:	8e 93       	st	-X, r24
    1876:	51 97       	sbiw	r26, 0x11	; 17
    1878:	78 cf       	rjmp	.-272    	; 0x176a <usart_init+0x5a>

0000187a <__subsf3>:
    187a:	50 58       	subi	r21, 0x80	; 128

0000187c <__addsf3>:
    187c:	bb 27       	eor	r27, r27
    187e:	aa 27       	eor	r26, r26
    1880:	0e d0       	rcall	.+28     	; 0x189e <__addsf3x>
    1882:	48 c1       	rjmp	.+656    	; 0x1b14 <__fp_round>
    1884:	39 d1       	rcall	.+626    	; 0x1af8 <__fp_pscA>
    1886:	30 f0       	brcs	.+12     	; 0x1894 <__addsf3+0x18>
    1888:	3e d1       	rcall	.+636    	; 0x1b06 <__fp_pscB>
    188a:	20 f0       	brcs	.+8      	; 0x1894 <__addsf3+0x18>
    188c:	31 f4       	brne	.+12     	; 0x189a <__addsf3+0x1e>
    188e:	9f 3f       	cpi	r25, 0xFF	; 255
    1890:	11 f4       	brne	.+4      	; 0x1896 <__addsf3+0x1a>
    1892:	1e f4       	brtc	.+6      	; 0x189a <__addsf3+0x1e>
    1894:	2e c1       	rjmp	.+604    	; 0x1af2 <__fp_nan>
    1896:	0e f4       	brtc	.+2      	; 0x189a <__addsf3+0x1e>
    1898:	e0 95       	com	r30
    189a:	e7 fb       	bst	r30, 7
    189c:	24 c1       	rjmp	.+584    	; 0x1ae6 <__fp_inf>

0000189e <__addsf3x>:
    189e:	e9 2f       	mov	r30, r25
    18a0:	4a d1       	rcall	.+660    	; 0x1b36 <__fp_split3>
    18a2:	80 f3       	brcs	.-32     	; 0x1884 <__addsf3+0x8>
    18a4:	ba 17       	cp	r27, r26
    18a6:	62 07       	cpc	r22, r18
    18a8:	73 07       	cpc	r23, r19
    18aa:	84 07       	cpc	r24, r20
    18ac:	95 07       	cpc	r25, r21
    18ae:	18 f0       	brcs	.+6      	; 0x18b6 <__addsf3x+0x18>
    18b0:	71 f4       	brne	.+28     	; 0x18ce <__addsf3x+0x30>
    18b2:	9e f5       	brtc	.+102    	; 0x191a <__addsf3x+0x7c>
    18b4:	62 c1       	rjmp	.+708    	; 0x1b7a <__fp_zero>
    18b6:	0e f4       	brtc	.+2      	; 0x18ba <__addsf3x+0x1c>
    18b8:	e0 95       	com	r30
    18ba:	0b 2e       	mov	r0, r27
    18bc:	ba 2f       	mov	r27, r26
    18be:	a0 2d       	mov	r26, r0
    18c0:	0b 01       	movw	r0, r22
    18c2:	b9 01       	movw	r22, r18
    18c4:	90 01       	movw	r18, r0
    18c6:	0c 01       	movw	r0, r24
    18c8:	ca 01       	movw	r24, r20
    18ca:	a0 01       	movw	r20, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	ff 27       	eor	r31, r31
    18d0:	59 1b       	sub	r21, r25
    18d2:	99 f0       	breq	.+38     	; 0x18fa <__addsf3x+0x5c>
    18d4:	59 3f       	cpi	r21, 0xF9	; 249
    18d6:	50 f4       	brcc	.+20     	; 0x18ec <__addsf3x+0x4e>
    18d8:	50 3e       	cpi	r21, 0xE0	; 224
    18da:	68 f1       	brcs	.+90     	; 0x1936 <__addsf3x+0x98>
    18dc:	1a 16       	cp	r1, r26
    18de:	f0 40       	sbci	r31, 0x00	; 0
    18e0:	a2 2f       	mov	r26, r18
    18e2:	23 2f       	mov	r18, r19
    18e4:	34 2f       	mov	r19, r20
    18e6:	44 27       	eor	r20, r20
    18e8:	58 5f       	subi	r21, 0xF8	; 248
    18ea:	f3 cf       	rjmp	.-26     	; 0x18d2 <__addsf3x+0x34>
    18ec:	46 95       	lsr	r20
    18ee:	37 95       	ror	r19
    18f0:	27 95       	ror	r18
    18f2:	a7 95       	ror	r26
    18f4:	f0 40       	sbci	r31, 0x00	; 0
    18f6:	53 95       	inc	r21
    18f8:	c9 f7       	brne	.-14     	; 0x18ec <__addsf3x+0x4e>
    18fa:	7e f4       	brtc	.+30     	; 0x191a <__addsf3x+0x7c>
    18fc:	1f 16       	cp	r1, r31
    18fe:	ba 0b       	sbc	r27, r26
    1900:	62 0b       	sbc	r22, r18
    1902:	73 0b       	sbc	r23, r19
    1904:	84 0b       	sbc	r24, r20
    1906:	ba f0       	brmi	.+46     	; 0x1936 <__addsf3x+0x98>
    1908:	91 50       	subi	r25, 0x01	; 1
    190a:	a1 f0       	breq	.+40     	; 0x1934 <__addsf3x+0x96>
    190c:	ff 0f       	add	r31, r31
    190e:	bb 1f       	adc	r27, r27
    1910:	66 1f       	adc	r22, r22
    1912:	77 1f       	adc	r23, r23
    1914:	88 1f       	adc	r24, r24
    1916:	c2 f7       	brpl	.-16     	; 0x1908 <__addsf3x+0x6a>
    1918:	0e c0       	rjmp	.+28     	; 0x1936 <__addsf3x+0x98>
    191a:	ba 0f       	add	r27, r26
    191c:	62 1f       	adc	r22, r18
    191e:	73 1f       	adc	r23, r19
    1920:	84 1f       	adc	r24, r20
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__addsf3x+0x98>
    1924:	87 95       	ror	r24
    1926:	77 95       	ror	r23
    1928:	67 95       	ror	r22
    192a:	b7 95       	ror	r27
    192c:	f7 95       	ror	r31
    192e:	9e 3f       	cpi	r25, 0xFE	; 254
    1930:	08 f0       	brcs	.+2      	; 0x1934 <__addsf3x+0x96>
    1932:	b3 cf       	rjmp	.-154    	; 0x189a <__addsf3+0x1e>
    1934:	93 95       	inc	r25
    1936:	88 0f       	add	r24, r24
    1938:	08 f0       	brcs	.+2      	; 0x193c <__addsf3x+0x9e>
    193a:	99 27       	eor	r25, r25
    193c:	ee 0f       	add	r30, r30
    193e:	97 95       	ror	r25
    1940:	87 95       	ror	r24
    1942:	08 95       	ret

00001944 <__divsf3>:
    1944:	0c d0       	rcall	.+24     	; 0x195e <__divsf3x>
    1946:	e6 c0       	rjmp	.+460    	; 0x1b14 <__fp_round>
    1948:	de d0       	rcall	.+444    	; 0x1b06 <__fp_pscB>
    194a:	40 f0       	brcs	.+16     	; 0x195c <__divsf3+0x18>
    194c:	d5 d0       	rcall	.+426    	; 0x1af8 <__fp_pscA>
    194e:	30 f0       	brcs	.+12     	; 0x195c <__divsf3+0x18>
    1950:	21 f4       	brne	.+8      	; 0x195a <__divsf3+0x16>
    1952:	5f 3f       	cpi	r21, 0xFF	; 255
    1954:	19 f0       	breq	.+6      	; 0x195c <__divsf3+0x18>
    1956:	c7 c0       	rjmp	.+398    	; 0x1ae6 <__fp_inf>
    1958:	51 11       	cpse	r21, r1
    195a:	10 c1       	rjmp	.+544    	; 0x1b7c <__fp_szero>
    195c:	ca c0       	rjmp	.+404    	; 0x1af2 <__fp_nan>

0000195e <__divsf3x>:
    195e:	eb d0       	rcall	.+470    	; 0x1b36 <__fp_split3>
    1960:	98 f3       	brcs	.-26     	; 0x1948 <__divsf3+0x4>

00001962 <__divsf3_pse>:
    1962:	99 23       	and	r25, r25
    1964:	c9 f3       	breq	.-14     	; 0x1958 <__divsf3+0x14>
    1966:	55 23       	and	r21, r21
    1968:	b1 f3       	breq	.-20     	; 0x1956 <__divsf3+0x12>
    196a:	95 1b       	sub	r25, r21
    196c:	55 0b       	sbc	r21, r21
    196e:	bb 27       	eor	r27, r27
    1970:	aa 27       	eor	r26, r26
    1972:	62 17       	cp	r22, r18
    1974:	73 07       	cpc	r23, r19
    1976:	84 07       	cpc	r24, r20
    1978:	38 f0       	brcs	.+14     	; 0x1988 <__divsf3_pse+0x26>
    197a:	9f 5f       	subi	r25, 0xFF	; 255
    197c:	5f 4f       	sbci	r21, 0xFF	; 255
    197e:	22 0f       	add	r18, r18
    1980:	33 1f       	adc	r19, r19
    1982:	44 1f       	adc	r20, r20
    1984:	aa 1f       	adc	r26, r26
    1986:	a9 f3       	breq	.-22     	; 0x1972 <__divsf3_pse+0x10>
    1988:	33 d0       	rcall	.+102    	; 0x19f0 <__divsf3_pse+0x8e>
    198a:	0e 2e       	mov	r0, r30
    198c:	3a f0       	brmi	.+14     	; 0x199c <__divsf3_pse+0x3a>
    198e:	e0 e8       	ldi	r30, 0x80	; 128
    1990:	30 d0       	rcall	.+96     	; 0x19f2 <__divsf3_pse+0x90>
    1992:	91 50       	subi	r25, 0x01	; 1
    1994:	50 40       	sbci	r21, 0x00	; 0
    1996:	e6 95       	lsr	r30
    1998:	00 1c       	adc	r0, r0
    199a:	ca f7       	brpl	.-14     	; 0x198e <__divsf3_pse+0x2c>
    199c:	29 d0       	rcall	.+82     	; 0x19f0 <__divsf3_pse+0x8e>
    199e:	fe 2f       	mov	r31, r30
    19a0:	27 d0       	rcall	.+78     	; 0x19f0 <__divsf3_pse+0x8e>
    19a2:	66 0f       	add	r22, r22
    19a4:	77 1f       	adc	r23, r23
    19a6:	88 1f       	adc	r24, r24
    19a8:	bb 1f       	adc	r27, r27
    19aa:	26 17       	cp	r18, r22
    19ac:	37 07       	cpc	r19, r23
    19ae:	48 07       	cpc	r20, r24
    19b0:	ab 07       	cpc	r26, r27
    19b2:	b0 e8       	ldi	r27, 0x80	; 128
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <__divsf3_pse+0x56>
    19b6:	bb 0b       	sbc	r27, r27
    19b8:	80 2d       	mov	r24, r0
    19ba:	bf 01       	movw	r22, r30
    19bc:	ff 27       	eor	r31, r31
    19be:	93 58       	subi	r25, 0x83	; 131
    19c0:	5f 4f       	sbci	r21, 0xFF	; 255
    19c2:	2a f0       	brmi	.+10     	; 0x19ce <__divsf3_pse+0x6c>
    19c4:	9e 3f       	cpi	r25, 0xFE	; 254
    19c6:	51 05       	cpc	r21, r1
    19c8:	68 f0       	brcs	.+26     	; 0x19e4 <__divsf3_pse+0x82>
    19ca:	8d c0       	rjmp	.+282    	; 0x1ae6 <__fp_inf>
    19cc:	d7 c0       	rjmp	.+430    	; 0x1b7c <__fp_szero>
    19ce:	5f 3f       	cpi	r21, 0xFF	; 255
    19d0:	ec f3       	brlt	.-6      	; 0x19cc <__divsf3_pse+0x6a>
    19d2:	98 3e       	cpi	r25, 0xE8	; 232
    19d4:	dc f3       	brlt	.-10     	; 0x19cc <__divsf3_pse+0x6a>
    19d6:	86 95       	lsr	r24
    19d8:	77 95       	ror	r23
    19da:	67 95       	ror	r22
    19dc:	b7 95       	ror	r27
    19de:	f7 95       	ror	r31
    19e0:	9f 5f       	subi	r25, 0xFF	; 255
    19e2:	c9 f7       	brne	.-14     	; 0x19d6 <__divsf3_pse+0x74>
    19e4:	88 0f       	add	r24, r24
    19e6:	91 1d       	adc	r25, r1
    19e8:	96 95       	lsr	r25
    19ea:	87 95       	ror	r24
    19ec:	97 f9       	bld	r25, 7
    19ee:	08 95       	ret
    19f0:	e1 e0       	ldi	r30, 0x01	; 1
    19f2:	66 0f       	add	r22, r22
    19f4:	77 1f       	adc	r23, r23
    19f6:	88 1f       	adc	r24, r24
    19f8:	bb 1f       	adc	r27, r27
    19fa:	62 17       	cp	r22, r18
    19fc:	73 07       	cpc	r23, r19
    19fe:	84 07       	cpc	r24, r20
    1a00:	ba 07       	cpc	r27, r26
    1a02:	20 f0       	brcs	.+8      	; 0x1a0c <__divsf3_pse+0xaa>
    1a04:	62 1b       	sub	r22, r18
    1a06:	73 0b       	sbc	r23, r19
    1a08:	84 0b       	sbc	r24, r20
    1a0a:	ba 0b       	sbc	r27, r26
    1a0c:	ee 1f       	adc	r30, r30
    1a0e:	88 f7       	brcc	.-30     	; 0x19f2 <__divsf3_pse+0x90>
    1a10:	e0 95       	com	r30
    1a12:	08 95       	ret

00001a14 <__fixunssfsi>:
    1a14:	98 d0       	rcall	.+304    	; 0x1b46 <__fp_splitA>
    1a16:	88 f0       	brcs	.+34     	; 0x1a3a <__fixunssfsi+0x26>
    1a18:	9f 57       	subi	r25, 0x7F	; 127
    1a1a:	90 f0       	brcs	.+36     	; 0x1a40 <__fixunssfsi+0x2c>
    1a1c:	b9 2f       	mov	r27, r25
    1a1e:	99 27       	eor	r25, r25
    1a20:	b7 51       	subi	r27, 0x17	; 23
    1a22:	a0 f0       	brcs	.+40     	; 0x1a4c <__fixunssfsi+0x38>
    1a24:	d1 f0       	breq	.+52     	; 0x1a5a <__fixunssfsi+0x46>
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	1a f0       	brmi	.+6      	; 0x1a36 <__fixunssfsi+0x22>
    1a30:	ba 95       	dec	r27
    1a32:	c9 f7       	brne	.-14     	; 0x1a26 <__fixunssfsi+0x12>
    1a34:	12 c0       	rjmp	.+36     	; 0x1a5a <__fixunssfsi+0x46>
    1a36:	b1 30       	cpi	r27, 0x01	; 1
    1a38:	81 f0       	breq	.+32     	; 0x1a5a <__fixunssfsi+0x46>
    1a3a:	9f d0       	rcall	.+318    	; 0x1b7a <__fp_zero>
    1a3c:	b1 e0       	ldi	r27, 0x01	; 1
    1a3e:	08 95       	ret
    1a40:	9c c0       	rjmp	.+312    	; 0x1b7a <__fp_zero>
    1a42:	67 2f       	mov	r22, r23
    1a44:	78 2f       	mov	r23, r24
    1a46:	88 27       	eor	r24, r24
    1a48:	b8 5f       	subi	r27, 0xF8	; 248
    1a4a:	39 f0       	breq	.+14     	; 0x1a5a <__fixunssfsi+0x46>
    1a4c:	b9 3f       	cpi	r27, 0xF9	; 249
    1a4e:	cc f3       	brlt	.-14     	; 0x1a42 <__fixunssfsi+0x2e>
    1a50:	86 95       	lsr	r24
    1a52:	77 95       	ror	r23
    1a54:	67 95       	ror	r22
    1a56:	b3 95       	inc	r27
    1a58:	d9 f7       	brne	.-10     	; 0x1a50 <__fixunssfsi+0x3c>
    1a5a:	3e f4       	brtc	.+14     	; 0x1a6a <__fixunssfsi+0x56>
    1a5c:	90 95       	com	r25
    1a5e:	80 95       	com	r24
    1a60:	70 95       	com	r23
    1a62:	61 95       	neg	r22
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	08 95       	ret

00001a6c <__floatunsisf>:
    1a6c:	e8 94       	clt
    1a6e:	09 c0       	rjmp	.+18     	; 0x1a82 <__floatsisf+0x12>

00001a70 <__floatsisf>:
    1a70:	97 fb       	bst	r25, 7
    1a72:	3e f4       	brtc	.+14     	; 0x1a82 <__floatsisf+0x12>
    1a74:	90 95       	com	r25
    1a76:	80 95       	com	r24
    1a78:	70 95       	com	r23
    1a7a:	61 95       	neg	r22
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	99 23       	and	r25, r25
    1a84:	a9 f0       	breq	.+42     	; 0x1ab0 <__floatsisf+0x40>
    1a86:	f9 2f       	mov	r31, r25
    1a88:	96 e9       	ldi	r25, 0x96	; 150
    1a8a:	bb 27       	eor	r27, r27
    1a8c:	93 95       	inc	r25
    1a8e:	f6 95       	lsr	r31
    1a90:	87 95       	ror	r24
    1a92:	77 95       	ror	r23
    1a94:	67 95       	ror	r22
    1a96:	b7 95       	ror	r27
    1a98:	f1 11       	cpse	r31, r1
    1a9a:	f8 cf       	rjmp	.-16     	; 0x1a8c <__floatsisf+0x1c>
    1a9c:	fa f4       	brpl	.+62     	; 0x1adc <__floatsisf+0x6c>
    1a9e:	bb 0f       	add	r27, r27
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <__floatsisf+0x36>
    1aa2:	60 ff       	sbrs	r22, 0
    1aa4:	1b c0       	rjmp	.+54     	; 0x1adc <__floatsisf+0x6c>
    1aa6:	6f 5f       	subi	r22, 0xFF	; 255
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	16 c0       	rjmp	.+44     	; 0x1adc <__floatsisf+0x6c>
    1ab0:	88 23       	and	r24, r24
    1ab2:	11 f0       	breq	.+4      	; 0x1ab8 <__floatsisf+0x48>
    1ab4:	96 e9       	ldi	r25, 0x96	; 150
    1ab6:	11 c0       	rjmp	.+34     	; 0x1ada <__floatsisf+0x6a>
    1ab8:	77 23       	and	r23, r23
    1aba:	21 f0       	breq	.+8      	; 0x1ac4 <__floatsisf+0x54>
    1abc:	9e e8       	ldi	r25, 0x8E	; 142
    1abe:	87 2f       	mov	r24, r23
    1ac0:	76 2f       	mov	r23, r22
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <__floatsisf+0x5e>
    1ac4:	66 23       	and	r22, r22
    1ac6:	71 f0       	breq	.+28     	; 0x1ae4 <__floatsisf+0x74>
    1ac8:	96 e8       	ldi	r25, 0x86	; 134
    1aca:	86 2f       	mov	r24, r22
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	60 e0       	ldi	r22, 0x00	; 0
    1ad0:	2a f0       	brmi	.+10     	; 0x1adc <__floatsisf+0x6c>
    1ad2:	9a 95       	dec	r25
    1ad4:	66 0f       	add	r22, r22
    1ad6:	77 1f       	adc	r23, r23
    1ad8:	88 1f       	adc	r24, r24
    1ada:	da f7       	brpl	.-10     	; 0x1ad2 <__floatsisf+0x62>
    1adc:	88 0f       	add	r24, r24
    1ade:	96 95       	lsr	r25
    1ae0:	87 95       	ror	r24
    1ae2:	97 f9       	bld	r25, 7
    1ae4:	08 95       	ret

00001ae6 <__fp_inf>:
    1ae6:	97 f9       	bld	r25, 7
    1ae8:	9f 67       	ori	r25, 0x7F	; 127
    1aea:	80 e8       	ldi	r24, 0x80	; 128
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	08 95       	ret

00001af2 <__fp_nan>:
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	80 ec       	ldi	r24, 0xC0	; 192
    1af6:	08 95       	ret

00001af8 <__fp_pscA>:
    1af8:	00 24       	eor	r0, r0
    1afa:	0a 94       	dec	r0
    1afc:	16 16       	cp	r1, r22
    1afe:	17 06       	cpc	r1, r23
    1b00:	18 06       	cpc	r1, r24
    1b02:	09 06       	cpc	r0, r25
    1b04:	08 95       	ret

00001b06 <__fp_pscB>:
    1b06:	00 24       	eor	r0, r0
    1b08:	0a 94       	dec	r0
    1b0a:	12 16       	cp	r1, r18
    1b0c:	13 06       	cpc	r1, r19
    1b0e:	14 06       	cpc	r1, r20
    1b10:	05 06       	cpc	r0, r21
    1b12:	08 95       	ret

00001b14 <__fp_round>:
    1b14:	09 2e       	mov	r0, r25
    1b16:	03 94       	inc	r0
    1b18:	00 0c       	add	r0, r0
    1b1a:	11 f4       	brne	.+4      	; 0x1b20 <__fp_round+0xc>
    1b1c:	88 23       	and	r24, r24
    1b1e:	52 f0       	brmi	.+20     	; 0x1b34 <__fp_round+0x20>
    1b20:	bb 0f       	add	r27, r27
    1b22:	40 f4       	brcc	.+16     	; 0x1b34 <__fp_round+0x20>
    1b24:	bf 2b       	or	r27, r31
    1b26:	11 f4       	brne	.+4      	; 0x1b2c <__fp_round+0x18>
    1b28:	60 ff       	sbrs	r22, 0
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <__fp_round+0x20>
    1b2c:	6f 5f       	subi	r22, 0xFF	; 255
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	8f 4f       	sbci	r24, 0xFF	; 255
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	08 95       	ret

00001b36 <__fp_split3>:
    1b36:	57 fd       	sbrc	r21, 7
    1b38:	90 58       	subi	r25, 0x80	; 128
    1b3a:	44 0f       	add	r20, r20
    1b3c:	55 1f       	adc	r21, r21
    1b3e:	59 f0       	breq	.+22     	; 0x1b56 <__fp_splitA+0x10>
    1b40:	5f 3f       	cpi	r21, 0xFF	; 255
    1b42:	71 f0       	breq	.+28     	; 0x1b60 <__fp_splitA+0x1a>
    1b44:	47 95       	ror	r20

00001b46 <__fp_splitA>:
    1b46:	88 0f       	add	r24, r24
    1b48:	97 fb       	bst	r25, 7
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <__fp_splitA+0x20>
    1b4e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b50:	79 f0       	breq	.+30     	; 0x1b70 <__fp_splitA+0x2a>
    1b52:	87 95       	ror	r24
    1b54:	08 95       	ret
    1b56:	12 16       	cp	r1, r18
    1b58:	13 06       	cpc	r1, r19
    1b5a:	14 06       	cpc	r1, r20
    1b5c:	55 1f       	adc	r21, r21
    1b5e:	f2 cf       	rjmp	.-28     	; 0x1b44 <__fp_split3+0xe>
    1b60:	46 95       	lsr	r20
    1b62:	f1 df       	rcall	.-30     	; 0x1b46 <__fp_splitA>
    1b64:	08 c0       	rjmp	.+16     	; 0x1b76 <__fp_splitA+0x30>
    1b66:	16 16       	cp	r1, r22
    1b68:	17 06       	cpc	r1, r23
    1b6a:	18 06       	cpc	r1, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	f1 cf       	rjmp	.-30     	; 0x1b52 <__fp_splitA+0xc>
    1b70:	86 95       	lsr	r24
    1b72:	71 05       	cpc	r23, r1
    1b74:	61 05       	cpc	r22, r1
    1b76:	08 94       	sec
    1b78:	08 95       	ret

00001b7a <__fp_zero>:
    1b7a:	e8 94       	clt

00001b7c <__fp_szero>:
    1b7c:	bb 27       	eor	r27, r27
    1b7e:	66 27       	eor	r22, r22
    1b80:	77 27       	eor	r23, r23
    1b82:	cb 01       	movw	r24, r22
    1b84:	97 f9       	bld	r25, 7
    1b86:	08 95       	ret

00001b88 <__mulsf3>:
    1b88:	0b d0       	rcall	.+22     	; 0x1ba0 <__mulsf3x>
    1b8a:	c4 cf       	rjmp	.-120    	; 0x1b14 <__fp_round>
    1b8c:	b5 df       	rcall	.-150    	; 0x1af8 <__fp_pscA>
    1b8e:	28 f0       	brcs	.+10     	; 0x1b9a <__mulsf3+0x12>
    1b90:	ba df       	rcall	.-140    	; 0x1b06 <__fp_pscB>
    1b92:	18 f0       	brcs	.+6      	; 0x1b9a <__mulsf3+0x12>
    1b94:	95 23       	and	r25, r21
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <__mulsf3+0x12>
    1b98:	a6 cf       	rjmp	.-180    	; 0x1ae6 <__fp_inf>
    1b9a:	ab cf       	rjmp	.-170    	; 0x1af2 <__fp_nan>
    1b9c:	11 24       	eor	r1, r1
    1b9e:	ee cf       	rjmp	.-36     	; 0x1b7c <__fp_szero>

00001ba0 <__mulsf3x>:
    1ba0:	ca df       	rcall	.-108    	; 0x1b36 <__fp_split3>
    1ba2:	a0 f3       	brcs	.-24     	; 0x1b8c <__mulsf3+0x4>

00001ba4 <__mulsf3_pse>:
    1ba4:	95 9f       	mul	r25, r21
    1ba6:	d1 f3       	breq	.-12     	; 0x1b9c <__mulsf3+0x14>
    1ba8:	95 0f       	add	r25, r21
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	55 1f       	adc	r21, r21
    1bae:	62 9f       	mul	r22, r18
    1bb0:	f0 01       	movw	r30, r0
    1bb2:	72 9f       	mul	r23, r18
    1bb4:	bb 27       	eor	r27, r27
    1bb6:	f0 0d       	add	r31, r0
    1bb8:	b1 1d       	adc	r27, r1
    1bba:	63 9f       	mul	r22, r19
    1bbc:	aa 27       	eor	r26, r26
    1bbe:	f0 0d       	add	r31, r0
    1bc0:	b1 1d       	adc	r27, r1
    1bc2:	aa 1f       	adc	r26, r26
    1bc4:	64 9f       	mul	r22, r20
    1bc6:	66 27       	eor	r22, r22
    1bc8:	b0 0d       	add	r27, r0
    1bca:	a1 1d       	adc	r26, r1
    1bcc:	66 1f       	adc	r22, r22
    1bce:	82 9f       	mul	r24, r18
    1bd0:	22 27       	eor	r18, r18
    1bd2:	b0 0d       	add	r27, r0
    1bd4:	a1 1d       	adc	r26, r1
    1bd6:	62 1f       	adc	r22, r18
    1bd8:	73 9f       	mul	r23, r19
    1bda:	b0 0d       	add	r27, r0
    1bdc:	a1 1d       	adc	r26, r1
    1bde:	62 1f       	adc	r22, r18
    1be0:	83 9f       	mul	r24, r19
    1be2:	a0 0d       	add	r26, r0
    1be4:	61 1d       	adc	r22, r1
    1be6:	22 1f       	adc	r18, r18
    1be8:	74 9f       	mul	r23, r20
    1bea:	33 27       	eor	r19, r19
    1bec:	a0 0d       	add	r26, r0
    1bee:	61 1d       	adc	r22, r1
    1bf0:	23 1f       	adc	r18, r19
    1bf2:	84 9f       	mul	r24, r20
    1bf4:	60 0d       	add	r22, r0
    1bf6:	21 1d       	adc	r18, r1
    1bf8:	82 2f       	mov	r24, r18
    1bfa:	76 2f       	mov	r23, r22
    1bfc:	6a 2f       	mov	r22, r26
    1bfe:	11 24       	eor	r1, r1
    1c00:	9f 57       	subi	r25, 0x7F	; 127
    1c02:	50 40       	sbci	r21, 0x00	; 0
    1c04:	8a f0       	brmi	.+34     	; 0x1c28 <__mulsf3_pse+0x84>
    1c06:	e1 f0       	breq	.+56     	; 0x1c40 <__mulsf3_pse+0x9c>
    1c08:	88 23       	and	r24, r24
    1c0a:	4a f0       	brmi	.+18     	; 0x1c1e <__mulsf3_pse+0x7a>
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31
    1c10:	bb 1f       	adc	r27, r27
    1c12:	66 1f       	adc	r22, r22
    1c14:	77 1f       	adc	r23, r23
    1c16:	88 1f       	adc	r24, r24
    1c18:	91 50       	subi	r25, 0x01	; 1
    1c1a:	50 40       	sbci	r21, 0x00	; 0
    1c1c:	a9 f7       	brne	.-22     	; 0x1c08 <__mulsf3_pse+0x64>
    1c1e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c20:	51 05       	cpc	r21, r1
    1c22:	70 f0       	brcs	.+28     	; 0x1c40 <__mulsf3_pse+0x9c>
    1c24:	60 cf       	rjmp	.-320    	; 0x1ae6 <__fp_inf>
    1c26:	aa cf       	rjmp	.-172    	; 0x1b7c <__fp_szero>
    1c28:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2a:	ec f3       	brlt	.-6      	; 0x1c26 <__mulsf3_pse+0x82>
    1c2c:	98 3e       	cpi	r25, 0xE8	; 232
    1c2e:	dc f3       	brlt	.-10     	; 0x1c26 <__mulsf3_pse+0x82>
    1c30:	86 95       	lsr	r24
    1c32:	77 95       	ror	r23
    1c34:	67 95       	ror	r22
    1c36:	b7 95       	ror	r27
    1c38:	f7 95       	ror	r31
    1c3a:	e7 95       	ror	r30
    1c3c:	9f 5f       	subi	r25, 0xFF	; 255
    1c3e:	c1 f7       	brne	.-16     	; 0x1c30 <__mulsf3_pse+0x8c>
    1c40:	fe 2b       	or	r31, r30
    1c42:	88 0f       	add	r24, r24
    1c44:	91 1d       	adc	r25, r1
    1c46:	96 95       	lsr	r25
    1c48:	87 95       	ror	r24
    1c4a:	97 f9       	bld	r25, 7
    1c4c:	08 95       	ret

00001c4e <__udivmodhi4>:
    1c4e:	aa 1b       	sub	r26, r26
    1c50:	bb 1b       	sub	r27, r27
    1c52:	51 e1       	ldi	r21, 0x11	; 17
    1c54:	07 c0       	rjmp	.+14     	; 0x1c64 <__udivmodhi4_ep>

00001c56 <__udivmodhi4_loop>:
    1c56:	aa 1f       	adc	r26, r26
    1c58:	bb 1f       	adc	r27, r27
    1c5a:	a6 17       	cp	r26, r22
    1c5c:	b7 07       	cpc	r27, r23
    1c5e:	10 f0       	brcs	.+4      	; 0x1c64 <__udivmodhi4_ep>
    1c60:	a6 1b       	sub	r26, r22
    1c62:	b7 0b       	sbc	r27, r23

00001c64 <__udivmodhi4_ep>:
    1c64:	88 1f       	adc	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	5a 95       	dec	r21
    1c6a:	a9 f7       	brne	.-22     	; 0x1c56 <__udivmodhi4_loop>
    1c6c:	80 95       	com	r24
    1c6e:	90 95       	com	r25
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	08 95       	ret

00001c76 <__udivmodsi4>:
    1c76:	a1 e2       	ldi	r26, 0x21	; 33
    1c78:	1a 2e       	mov	r1, r26
    1c7a:	aa 1b       	sub	r26, r26
    1c7c:	bb 1b       	sub	r27, r27
    1c7e:	fd 01       	movw	r30, r26
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <__udivmodsi4_ep>

00001c82 <__udivmodsi4_loop>:
    1c82:	aa 1f       	adc	r26, r26
    1c84:	bb 1f       	adc	r27, r27
    1c86:	ee 1f       	adc	r30, r30
    1c88:	ff 1f       	adc	r31, r31
    1c8a:	a2 17       	cp	r26, r18
    1c8c:	b3 07       	cpc	r27, r19
    1c8e:	e4 07       	cpc	r30, r20
    1c90:	f5 07       	cpc	r31, r21
    1c92:	20 f0       	brcs	.+8      	; 0x1c9c <__udivmodsi4_ep>
    1c94:	a2 1b       	sub	r26, r18
    1c96:	b3 0b       	sbc	r27, r19
    1c98:	e4 0b       	sbc	r30, r20
    1c9a:	f5 0b       	sbc	r31, r21

00001c9c <__udivmodsi4_ep>:
    1c9c:	66 1f       	adc	r22, r22
    1c9e:	77 1f       	adc	r23, r23
    1ca0:	88 1f       	adc	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	1a 94       	dec	r1
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <__udivmodsi4_loop>
    1ca8:	60 95       	com	r22
    1caa:	70 95       	com	r23
    1cac:	80 95       	com	r24
    1cae:	90 95       	com	r25
    1cb0:	9b 01       	movw	r18, r22
    1cb2:	ac 01       	movw	r20, r24
    1cb4:	bd 01       	movw	r22, r26
    1cb6:	cf 01       	movw	r24, r30
    1cb8:	08 95       	ret

00001cba <_exit>:
    1cba:	f8 94       	cli

00001cbc <__stop_program>:
    1cbc:	ff cf       	rjmp	.-2      	; 0x1cbc <__stop_program>
